/**
 *
 *  ESUP-Portail ESUP-MONDOSSIERWEB-PEGASE - Copyright (c) 2021 ESUP-Portail consortium
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 2.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.insgestion;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Gets or Sets TriInscription
 */
@JsonAdapter(TriInscription.Adapter.class)
public enum TriInscription {
  
  UUIDASC("uuidASC"),
  
  UUIDDESC("uuidDESC"),
  
  NOCANDIDATASC("noCandidatASC"),
  
  NOCANDIDATDESC("noCandidatDESC"),
  
  ETATCIVIL_NOMDENAISSANCEASC("etatCivil.nomDeNaissanceASC"),
  
  ETATCIVIL_NOMDENAISSANCEDESC("etatCivil.nomDeNaissanceDESC"),
  
  ETATCIVIL_PRENOMASC("etatCivil.prenomASC"),
  
  ETATCIVIL_PRENOMDESC("etatCivil.prenomDESC"),
  
  NAISSANCE_DATEDENAISSANCEASC("naissance.dateDeNaissanceASC"),
  
  NAISSANCE_DATEDENAISSANCEDESC("naissance.dateDeNaissanceDESC"),
  
  NAISSANCE_PAYSDENAISSANCEASC("naissance.paysDeNaissanceASC"),
  
  NAISSANCE_PAYSDENAISSANCEDESC("naissance.paysDeNaissanceDESC"),
  
  NAISSANCE_COMMUNEDENAISSANCEASC("naissance.communeDeNaissanceASC"),
  
  NAISSANCE_COMMUNEDENAISSANCEDESC("naissance.communeDeNaissanceDESC"),
  
  BAC_INEASC("bac.ineASC"),
  
  BAC_INEDESC("bac.ineDESC"),
  
  VOEUASC("voeuASC"),
  
  VOEUDESC("voeuDESC"),
  
  VOEU_STATUTINSCRIPTIONASC("voeu.statutInscriptionASC"),
  
  VOEU_STATUTINSCRIPTIONDESC("voeu.statutInscriptionDESC"),
  
  VOEU_STATUTPAIEMENTASC("voeu.statutPaiementASC"),
  
  VOEU_STATUTPAIEMENTDESC("voeu.statutPaiementDESC"),
  
  VOEU_STATUTPIECESASC("voeu.statutPiecesASC"),
  
  VOEU_STATUTPIECESDESC("voeu.statutPiecesDESC");

  private String value;

  TriInscription(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TriInscription fromValue(String value) {
    for (TriInscription b : TriInscription.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TriInscription> {
    @Override
    public void write(final JsonWriter jsonWriter, final TriInscription enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TriInscription read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TriInscription.fromValue(value);
    }
  }
}

