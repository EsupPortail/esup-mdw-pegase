/*
 * INSCRIPTION Externe V2
 *  # Introduction  Liste l'ensemble des services et des opérations Ins (Module Inscription) identifiés pour un usage externe.  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 2.1.0-rc.20250404093138
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.insext;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.insext.DemandeDeContactSimple;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * ContactComplet
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:08:56.114878100+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class ContactComplet {
  public static final String SERIALIZED_NAME_CANAL_COMMUNICATION = "canalCommunication";
  public static final String SERIALIZED_NAME_DEMANDE_DE_CONTACT = "demandeDeContact";
  public static final String SERIALIZED_NAME_PROPRIETAIRE = "proprietaire";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("canalCommunication");
    openapiFields.add("demandeDeContact");
    openapiFields.add("proprietaire");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("canalCommunication");
    openapiRequiredFields.add("demandeDeContact");
  }

  @SerializedName(SERIALIZED_NAME_CANAL_COMMUNICATION)
  @javax.annotation.Nonnull
  protected CanalCommunicationEnum canalCommunication;
  @SerializedName(SERIALIZED_NAME_DEMANDE_DE_CONTACT)
  @javax.annotation.Nonnull
  private DemandeDeContactSimple demandeDeContact;
  @SerializedName(SERIALIZED_NAME_PROPRIETAIRE)
  @javax.annotation.Nullable
  private String proprietaire;

  public ContactComplet() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactComplet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactComplet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactComplet is not found in the empty JSON string", ContactComplet.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("canalCommunication").getAsString();
      switch (discriminatorValue) {
        case "ContactAdresseComplet":
          ContactAdresseComplet.validateJsonElement(jsonElement);
          break;
        case "ContactMelComplet":
          ContactMelComplet.validateJsonElement(jsonElement);
          break;
        case "ContactTelephoneComplet":
          ContactTelephoneComplet.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `canalCommunication` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }

  /**
   * Create an instance of ContactComplet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactComplet
   * @throws IOException if the JSON string is invalid with respect to ContactComplet
   */
  public static ContactComplet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactComplet.class);
  }

  public ContactComplet canalCommunication(@javax.annotation.Nonnull CanalCommunicationEnum canalCommunication) {
    this.canalCommunication = canalCommunication;
    return this;
  }

  /**
   * type de contact
   * @return canalCommunication
   */
  @javax.annotation.Nonnull
  public CanalCommunicationEnum getCanalCommunication() {
    return canalCommunication;
  }

  public void setCanalCommunication(@javax.annotation.Nonnull CanalCommunicationEnum canalCommunication) {
    this.canalCommunication = canalCommunication;
  }

  public ContactComplet demandeDeContact(@javax.annotation.Nonnull DemandeDeContactSimple demandeDeContact) {
    this.demandeDeContact = demandeDeContact;
    return this;
  }

  /**
   * Get demandeDeContact
   * @return demandeDeContact
   */
  @javax.annotation.Nonnull
  public DemandeDeContactSimple getDemandeDeContact() {
    return demandeDeContact;
  }

  public void setDemandeDeContact(@javax.annotation.Nonnull DemandeDeContactSimple demandeDeContact) {
    this.demandeDeContact = demandeDeContact;
  }

  public ContactComplet proprietaire(@javax.annotation.Nullable String proprietaire) {
    this.proprietaire = proprietaire;
    return this;
  }

  /**
   * Personne à contacter si différent de l&#39;apprenant
   * @return proprietaire
   */
  @javax.annotation.Nullable
  public String getProprietaire() {
    return proprietaire;
  }

  public void setProprietaire(@javax.annotation.Nullable String proprietaire) {
    this.proprietaire = proprietaire;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactComplet contactComplet = (ContactComplet) o;
    return Objects.equals(this.canalCommunication, contactComplet.canalCommunication) &&
        Objects.equals(this.demandeDeContact, contactComplet.demandeDeContact) &&
        Objects.equals(this.proprietaire, contactComplet.proprietaire);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canalCommunication, demandeDeContact, proprietaire);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactComplet {\n");
    sb.append("    canalCommunication: ").append(toIndentedString(canalCommunication)).append("\n");
    sb.append("    demandeDeContact: ").append(toIndentedString(demandeDeContact)).append("\n");
    sb.append("    proprietaire: ").append(toIndentedString(proprietaire)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of ContactComplet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  /**
   * type de contact
   */
  @JsonAdapter(CanalCommunicationEnum.Adapter.class)
  public enum CanalCommunicationEnum {
    CONTACT_ADRESSE_COMPLET("ContactAdresseComplet"),

    CONTACT_MEL_COMPLET("ContactMelComplet"),

    CONTACT_TELEPHONE_COMPLET("ContactTelephoneComplet");

    private String value;

    CanalCommunicationEnum(String value) {
      this.value = value;
    }

    public static CanalCommunicationEnum fromValue(String value) {
      for (CanalCommunicationEnum b : CanalCommunicationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CanalCommunicationEnum.fromValue(value);
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static class Adapter extends TypeAdapter<CanalCommunicationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CanalCommunicationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CanalCommunicationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CanalCommunicationEnum.fromValue(value);
      }
    }
  }
}

