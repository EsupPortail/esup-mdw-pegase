/*
 * INSCRIPTION Externe V2
 *  # Introduction  Liste l'ensemble des services et des opérations Ins (Module Inscription) identifiés pour un usage externe.  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 2.1.0-rc.20250404093138
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.insext;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.insext.Formation;
import fr.univlorraine.pegase.model.insext.ObjetAvecLibelle;
import fr.univlorraine.pegase.model.insext.ObjetFormationOuGroupement;
import fr.univlorraine.pegase.model.insext.Periode;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * décrit la formation ou l&#39;objet de formation d&#39;une inscription
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:08:56.114878100+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class CibleInscription extends ObjetAvecLibelle {
  public static final String SERIALIZED_NAME_CODE_STRUCTURE = "codeStructure";
  public static final String SERIALIZED_NAME_FORMATION = "formation";
  public static final String SERIALIZED_NAME_UA_I_STRUCTURE_PRINCIPALE = "UAIStructurePrincipale";
  public static final String SERIALIZED_NAME_CHEMIN = "chemin";
  public static final String SERIALIZED_NAME_PERIODE = "periode";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("est1");
    openapiFields.add("code");
    openapiFields.add("libelleCourt");
    openapiFields.add("libelleLong");
    openapiFields.add("codeStructure");
    openapiFields.add("formation");
    openapiFields.add("UAIStructurePrincipale");
    openapiFields.add("chemin");
    openapiFields.add("periode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("est1");
  }

  @SerializedName(SERIALIZED_NAME_CODE_STRUCTURE)
  @javax.annotation.Nullable
  private String codeStructure;
  @SerializedName(SERIALIZED_NAME_FORMATION)
  @javax.annotation.Nullable
  private Formation formation;
  @SerializedName(SERIALIZED_NAME_UA_I_STRUCTURE_PRINCIPALE)
  @javax.annotation.Nullable
  private String uaIStructurePrincipale;
  @SerializedName(SERIALIZED_NAME_CHEMIN)
  @javax.annotation.Nullable
  private List<ObjetFormationOuGroupement> chemin = new ArrayList<>();
  @SerializedName(SERIALIZED_NAME_PERIODE)
  @javax.annotation.Nullable
  private Periode periode;

  public CibleInscription() {
    this.est1 = this.getClass().getSimpleName();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CibleInscription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CibleInscription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CibleInscription is not found in the empty JSON string", CibleInscription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CibleInscription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CibleInscription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CibleInscription.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
  }

  /**
   * Create an instance of CibleInscription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CibleInscription
   * @throws IOException if the JSON string is invalid with respect to CibleInscription
   */
  public static CibleInscription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CibleInscription.class);
  }

  public CibleInscription codeStructure(@javax.annotation.Nullable String codeStructure) {
    this.codeStructure = codeStructure;
    return this;
  }

  /**
   * Le code de la structure issu de la nomenclature Structures organisationnelles
   * @return codeStructure
   */
  @javax.annotation.Nullable
  public String getCodeStructure() {
    return codeStructure;
  }

  public void setCodeStructure(@javax.annotation.Nullable String codeStructure) {
    this.codeStructure = codeStructure;
  }

  public CibleInscription formation(@javax.annotation.Nullable Formation formation) {
    this.formation = formation;
    return this;
  }

  /**
   * Get formation
   * @return formation
   */
  @javax.annotation.Nullable
  public Formation getFormation() {
    return formation;
  }

  public void setFormation(@javax.annotation.Nullable Formation formation) {
    this.formation = formation;
  }

  public CibleInscription uaIStructurePrincipale(@javax.annotation.Nullable String uaIStructurePrincipale) {
    this.uaIStructurePrincipale = uaIStructurePrincipale;
    return this;
  }

  /**
   * Le code UAI de la structure
   * @return uaIStructurePrincipale
   */
  @javax.annotation.Nullable
  public String getUaIStructurePrincipale() {
    return uaIStructurePrincipale;
  }

  public void setUaIStructurePrincipale(@javax.annotation.Nullable String uaIStructurePrincipale) {
    this.uaIStructurePrincipale = uaIStructurePrincipale;
  }

  public CibleInscription chemin(@javax.annotation.Nullable List<ObjetFormationOuGroupement> chemin) {
    this.chemin = chemin;
    return this;
  }

  public CibleInscription addCheminItem(ObjetFormationOuGroupement cheminItem) {
    if (this.chemin == null) {
      this.chemin = new ArrayList<>();
    }
    this.chemin.add(cheminItem);
    return this;
  }

  /**
   * liste des codes ObjetFormation ou Groupement depuis la Formation racine jusqu&#39;à l&#39;ObjetFormation feuille (même code que CiblePourInscription), peut être vide
   * @return chemin
   */
  @javax.annotation.Nullable
  public List<ObjetFormationOuGroupement> getChemin() {
    return chemin;
  }

  public void setChemin(@javax.annotation.Nullable List<ObjetFormationOuGroupement> chemin) {
    this.chemin = chemin;
  }

  public CibleInscription periode(@javax.annotation.Nullable Periode periode) {
    this.periode = periode;
    return this;
  }

  /**
   * Get periode
   * @return periode
   */
  @javax.annotation.Nullable
  public Periode getPeriode() {
    return periode;
  }

  public void setPeriode(@javax.annotation.Nullable Periode periode) {
    this.periode = periode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CibleInscription cibleInscription = (CibleInscription) o;
    return Objects.equals(this.codeStructure, cibleInscription.codeStructure) &&
        Objects.equals(this.formation, cibleInscription.formation) &&
        Objects.equals(this.uaIStructurePrincipale, cibleInscription.uaIStructurePrincipale) &&
        Objects.equals(this.chemin, cibleInscription.chemin) &&
        Objects.equals(this.periode, cibleInscription.periode) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeStructure, formation, uaIStructurePrincipale, chemin, periode, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CibleInscription {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    codeStructure: ").append(toIndentedString(codeStructure)).append("\n");
    sb.append("    formation: ").append(toIndentedString(formation)).append("\n");
    sb.append("    uaIStructurePrincipale: ").append(toIndentedString(uaIStructurePrincipale)).append("\n");
    sb.append("    chemin: ").append(toIndentedString(chemin)).append("\n");
    sb.append("    periode: ").append(toIndentedString(periode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of CibleInscription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CibleInscription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CibleInscription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CibleInscription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CibleInscription.class));

       return (TypeAdapter<T>) new TypeAdapter<CibleInscription>() {
           @Override
           public void write(JsonWriter out, CibleInscription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CibleInscription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

