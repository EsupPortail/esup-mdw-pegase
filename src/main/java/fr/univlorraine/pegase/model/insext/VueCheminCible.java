/*
 * INSCRIPTION Externe V2
 *  # Introduction  Liste l'ensemble des services et des opérations Ins (Module Inscription) identifiés pour un usage externe.  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 2.1.0-rc.20250404093138
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.insext;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * VueCheminCible
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:08:56.114878100+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class VueCheminCible {
  public static final String SERIALIZED_NAME_CODE = "code";
  public static final String SERIALIZED_NAME_TYPE = "type";
  public static final String SERIALIZED_NAME_LIBELLE_COURT = "libelleCourt";
  public static final String SERIALIZED_NAME_LIBELLE_LONG = "libelleLong";
  public static final String SERIALIZED_NAME_ID_CHEMIN = "idChemin";
  public static final String SERIALIZED_NAME_ID_PERIODE = "idPeriode";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("type");
    openapiFields.add("libelleCourt");
    openapiFields.add("libelleLong");
    openapiFields.add("idChemin");
    openapiFields.add("idPeriode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("libelleCourt");
    openapiRequiredFields.add("libelleLong");
    openapiRequiredFields.add("idChemin");
    openapiRequiredFields.add("idPeriode");
  }

  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nonnull
  private String code;
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  private String type;
  @SerializedName(SERIALIZED_NAME_LIBELLE_COURT)
  @javax.annotation.Nonnull
  private String libelleCourt;
  @SerializedName(SERIALIZED_NAME_LIBELLE_LONG)
  @javax.annotation.Nonnull
  private String libelleLong;
  @SerializedName(SERIALIZED_NAME_ID_CHEMIN)
  @javax.annotation.Nonnull
  private UUID idChemin;
  @SerializedName(SERIALIZED_NAME_ID_PERIODE)
  @javax.annotation.Nonnull
  private UUID idPeriode;

  public VueCheminCible() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VueCheminCible
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VueCheminCible.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VueCheminCible is not found in the empty JSON string", VueCheminCible.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VueCheminCible.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VueCheminCible` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VueCheminCible.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (!jsonObj.get("libelleCourt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `libelleCourt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("libelleCourt").toString()));
      }
      if (!jsonObj.get("libelleLong").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `libelleLong` to be a primitive type in the JSON string but got `%s`", jsonObj.get("libelleLong").toString()));
      }
      if (!jsonObj.get("idChemin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idChemin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idChemin").toString()));
      }
      if (!jsonObj.get("idPeriode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idPeriode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idPeriode").toString()));
      }
  }

  /**
   * Create an instance of VueCheminCible given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VueCheminCible
   * @throws IOException if the JSON string is invalid with respect to VueCheminCible
   */
  public static VueCheminCible fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VueCheminCible.class);
  }

  public VueCheminCible code(@javax.annotation.Nonnull String code) {
    this.code = code;
    return this;
  }

  /**
   * Code l&#39;objet dans la maquette de formation
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nonnull String code) {
    this.code = code;
  }

  public VueCheminCible type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Code du type de l&#39;objet dans la maquette de formation (PARCOUR_TYPE, ANNEE, SEMESTRE, ...)
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }

  public VueCheminCible libelleCourt(@javax.annotation.Nonnull String libelleCourt) {
    this.libelleCourt = libelleCourt;
    return this;
  }

  /**
   * Libellé court de l&#39;objet dans la maquette de formation
   * @return libelleCourt
   */
  @javax.annotation.Nonnull
  public String getLibelleCourt() {
    return libelleCourt;
  }

  public void setLibelleCourt(@javax.annotation.Nonnull String libelleCourt) {
    this.libelleCourt = libelleCourt;
  }

  public VueCheminCible libelleLong(@javax.annotation.Nonnull String libelleLong) {
    this.libelleLong = libelleLong;
    return this;
  }

  /**
   * Libellé long de l&#39;objet dans la maquette de formation
   * @return libelleLong
   */
  @javax.annotation.Nonnull
  public String getLibelleLong() {
    return libelleLong;
  }

  public void setLibelleLong(@javax.annotation.Nonnull String libelleLong) {
    this.libelleLong = libelleLong;
  }

  public VueCheminCible idChemin(@javax.annotation.Nonnull UUID idChemin) {
    this.idChemin = idChemin;
    return this;
  }

  /**
   * Identifiant de l&#39;objet dans la maquette de formation
   * @return idChemin
   */
  @javax.annotation.Nonnull
  public UUID getIdChemin() {
    return idChemin;
  }

  public void setIdChemin(@javax.annotation.Nonnull UUID idChemin) {
    this.idChemin = idChemin;
  }

  public VueCheminCible idPeriode(@javax.annotation.Nonnull UUID idPeriode) {
    this.idPeriode = idPeriode;
    return this;
  }

  /**
   * Identifiant de la periode de mise en œuvre de l&#39;objet dans la maquette de formation
   * @return idPeriode
   */
  @javax.annotation.Nonnull
  public UUID getIdPeriode() {
    return idPeriode;
  }

  public void setIdPeriode(@javax.annotation.Nonnull UUID idPeriode) {
    this.idPeriode = idPeriode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VueCheminCible vueCheminCible = (VueCheminCible) o;
    return Objects.equals(this.code, vueCheminCible.code) &&
        Objects.equals(this.type, vueCheminCible.type) &&
        Objects.equals(this.libelleCourt, vueCheminCible.libelleCourt) &&
        Objects.equals(this.libelleLong, vueCheminCible.libelleLong) &&
        Objects.equals(this.idChemin, vueCheminCible.idChemin) &&
        Objects.equals(this.idPeriode, vueCheminCible.idPeriode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, type, libelleCourt, libelleLong, idChemin, idPeriode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VueCheminCible {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    libelleCourt: ").append(toIndentedString(libelleCourt)).append("\n");
    sb.append("    libelleLong: ").append(toIndentedString(libelleLong)).append("\n");
    sb.append("    idChemin: ").append(toIndentedString(idChemin)).append("\n");
    sb.append("    idPeriode: ").append(toIndentedString(idPeriode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of VueCheminCible to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VueCheminCible.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VueCheminCible' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VueCheminCible> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VueCheminCible.class));

       return (TypeAdapter<T>) new TypeAdapter<VueCheminCible>() {
           @Override
           public void write(JsonWriter out, VueCheminCible value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VueCheminCible read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

