/*
 * INSCRIPTION Externe V2
 *  # Introduction  Liste l'ensemble des services et des opérations Ins (Module Inscription) identifiés pour un usage externe.  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 2.1.0-rc.20250404093138
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.insext;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.insext.OccurrenceNomenclatureType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * une occurrence de nomenclature
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:08:56.114878100+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class OccurrenceNomenclature {
  public static final String SERIALIZED_NAME_NOMENCLATURE = "nomenclature";
  public static final String SERIALIZED_NAME_CODE = "code";
  public static final String SERIALIZED_NAME_LIBELLE = "libelle";
  public static final String SERIALIZED_NAME_CONTEXTE_CONSOMMATION = "contexteConsommation";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nomenclature");
    openapiFields.add("code");
    openapiFields.add("libelle");
    openapiFields.add("contexteConsommation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nomenclature");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("libelle");
    openapiRequiredFields.add("contexteConsommation");
  }

  @SerializedName(SERIALIZED_NAME_NOMENCLATURE)
  @javax.annotation.Nonnull
  private OccurrenceNomenclatureType nomenclature;
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nonnull
  private String code;
  @SerializedName(SERIALIZED_NAME_LIBELLE)
  @javax.annotation.Nonnull
  private String libelle;
  @SerializedName(SERIALIZED_NAME_CONTEXTE_CONSOMMATION)
  @javax.annotation.Nonnull
  private String contexteConsommation;

  public OccurrenceNomenclature() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OccurrenceNomenclature
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OccurrenceNomenclature.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OccurrenceNomenclature is not found in the empty JSON string", OccurrenceNomenclature.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OccurrenceNomenclature.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OccurrenceNomenclature` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OccurrenceNomenclature.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `nomenclature`
      OccurrenceNomenclatureType.validateJsonElement(jsonObj.get("nomenclature"));
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("libelle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `libelle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("libelle").toString()));
      }
      if (!jsonObj.get("contexteConsommation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contexteConsommation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contexteConsommation").toString()));
      }
  }

  /**
   * Create an instance of OccurrenceNomenclature given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OccurrenceNomenclature
   * @throws IOException if the JSON string is invalid with respect to OccurrenceNomenclature
   */
  public static OccurrenceNomenclature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OccurrenceNomenclature.class);
  }

  public OccurrenceNomenclature nomenclature(@javax.annotation.Nonnull OccurrenceNomenclatureType nomenclature) {
    this.nomenclature = nomenclature;
    return this;
  }

  /**
   * Get nomenclature
   * @return nomenclature
   */
  @javax.annotation.Nonnull
  public OccurrenceNomenclatureType getNomenclature() {
    return nomenclature;
  }

  public void setNomenclature(@javax.annotation.Nonnull OccurrenceNomenclatureType nomenclature) {
    this.nomenclature = nomenclature;
  }

  public OccurrenceNomenclature code(@javax.annotation.Nonnull String code) {
    this.code = code;
    return this;
  }

  /**
   * le code de l&#39;occurrence de nomenclature
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nonnull String code) {
    this.code = code;
  }

  public OccurrenceNomenclature libelle(@javax.annotation.Nonnull String libelle) {
    this.libelle = libelle;
    return this;
  }

  /**
   * le libellé d&#39;affichage de l&#39;occurrence de nomenclature
   * @return libelle
   */
  @javax.annotation.Nonnull
  public String getLibelle() {
    return libelle;
  }

  public void setLibelle(@javax.annotation.Nonnull String libelle) {
    this.libelle = libelle;
  }

  public OccurrenceNomenclature contexteConsommation(@javax.annotation.Nonnull String contexteConsommation) {
    this.contexteConsommation = contexteConsommation;
    return this;
  }

  /**
   * La date de consommation de l&#39;occurrence de nomenclature au format AAAA-MM-JJ
   * @return contexteConsommation
   */
  @javax.annotation.Nonnull
  public String getContexteConsommation() {
    return contexteConsommation;
  }

  public void setContexteConsommation(@javax.annotation.Nonnull String contexteConsommation) {
    this.contexteConsommation = contexteConsommation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OccurrenceNomenclature occurrenceNomenclature = (OccurrenceNomenclature) o;
    return Objects.equals(this.nomenclature, occurrenceNomenclature.nomenclature) &&
        Objects.equals(this.code, occurrenceNomenclature.code) &&
        Objects.equals(this.libelle, occurrenceNomenclature.libelle) &&
        Objects.equals(this.contexteConsommation, occurrenceNomenclature.contexteConsommation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nomenclature, code, libelle, contexteConsommation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OccurrenceNomenclature {\n");
    sb.append("    nomenclature: ").append(toIndentedString(nomenclature)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    libelle: ").append(toIndentedString(libelle)).append("\n");
    sb.append("    contexteConsommation: ").append(toIndentedString(contexteConsommation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of OccurrenceNomenclature to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OccurrenceNomenclature.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OccurrenceNomenclature' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OccurrenceNomenclature> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OccurrenceNomenclature.class));

       return (TypeAdapter<T>) new TypeAdapter<OccurrenceNomenclature>() {
           @Override
           public void write(JsonWriter out, OccurrenceNomenclature value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OccurrenceNomenclature read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

