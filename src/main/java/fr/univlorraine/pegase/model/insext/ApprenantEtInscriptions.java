/*
 * INSCRIPTION Externe V2
 *  # Introduction  Liste l'ensemble des services et des opérations Ins (Module Inscription) identifiés pour un usage externe.  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 2.1.0-rc.20250404093138
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.insext;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.insext.Apprenant;
import fr.univlorraine.pegase.model.insext.InscriptionComplete;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * ApprenantEtInscriptions
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:08:56.114878100+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class ApprenantEtInscriptions {
  public static final String SERIALIZED_NAME_APPRENANT = "apprenant";
  public static final String SERIALIZED_NAME_INSCRIPTIONS = "inscriptions";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apprenant");
    openapiFields.add("inscriptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  @SerializedName(SERIALIZED_NAME_APPRENANT)
  @javax.annotation.Nullable
  private Apprenant apprenant;
  @SerializedName(SERIALIZED_NAME_INSCRIPTIONS)
  @javax.annotation.Nullable
  private List<InscriptionComplete> inscriptions = new ArrayList<>();

  public ApprenantEtInscriptions() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApprenantEtInscriptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApprenantEtInscriptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApprenantEtInscriptions is not found in the empty JSON string", ApprenantEtInscriptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApprenantEtInscriptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApprenantEtInscriptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apprenant`
      if (jsonObj.get("apprenant") != null && !jsonObj.get("apprenant").isJsonNull()) {
        Apprenant.validateJsonElement(jsonObj.get("apprenant"));
      }
      if (jsonObj.get("inscriptions") != null && !jsonObj.get("inscriptions").isJsonNull()) {
        JsonArray jsonArrayinscriptions = jsonObj.getAsJsonArray("inscriptions");
        if (jsonArrayinscriptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inscriptions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inscriptions` to be an array in the JSON string but got `%s`", jsonObj.get("inscriptions").toString()));
          }

          // validate the optional field `inscriptions` (array)
          for (int i = 0; i < jsonArrayinscriptions.size(); i++) {
            InscriptionComplete.validateJsonElement(jsonArrayinscriptions.get(i));
          };
        }
      }
  }

  /**
   * Create an instance of ApprenantEtInscriptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApprenantEtInscriptions
   * @throws IOException if the JSON string is invalid with respect to ApprenantEtInscriptions
   */
  public static ApprenantEtInscriptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApprenantEtInscriptions.class);
  }

  public ApprenantEtInscriptions apprenant(@javax.annotation.Nullable Apprenant apprenant) {
    this.apprenant = apprenant;
    return this;
  }

  /**
   * Get apprenant
   * @return apprenant
   */
  @javax.annotation.Nullable
  public Apprenant getApprenant() {
    return apprenant;
  }

  public void setApprenant(@javax.annotation.Nullable Apprenant apprenant) {
    this.apprenant = apprenant;
  }

  public ApprenantEtInscriptions inscriptions(@javax.annotation.Nullable List<InscriptionComplete> inscriptions) {
    this.inscriptions = inscriptions;
    return this;
  }

  public ApprenantEtInscriptions addInscriptionsItem(InscriptionComplete inscriptionsItem) {
    if (this.inscriptions == null) {
      this.inscriptions = new ArrayList<>();
    }
    this.inscriptions.add(inscriptionsItem);
    return this;
  }

  /**
   * les inscriptions
   * @return inscriptions
   */
  @javax.annotation.Nullable
  public List<InscriptionComplete> getInscriptions() {
    return inscriptions;
  }

  public void setInscriptions(@javax.annotation.Nullable List<InscriptionComplete> inscriptions) {
    this.inscriptions = inscriptions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApprenantEtInscriptions apprenantEtInscriptions = (ApprenantEtInscriptions) o;
    return Objects.equals(this.apprenant, apprenantEtInscriptions.apprenant) &&
        Objects.equals(this.inscriptions, apprenantEtInscriptions.inscriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apprenant, inscriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApprenantEtInscriptions {\n");
    sb.append("    apprenant: ").append(toIndentedString(apprenant)).append("\n");
    sb.append("    inscriptions: ").append(toIndentedString(inscriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of ApprenantEtInscriptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApprenantEtInscriptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApprenantEtInscriptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApprenantEtInscriptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApprenantEtInscriptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ApprenantEtInscriptions>() {
           @Override
           public void write(JsonWriter out, ApprenantEtInscriptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApprenantEtInscriptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

