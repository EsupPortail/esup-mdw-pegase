/*
 * INSCRIPTION Externe V2
 *  # Introduction  Liste l'ensemble des services et des opérations Ins (Module Inscription) identifiés pour un usage externe.  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 2.1.0-rc.20250404093138
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.insext;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * DocumentAApprouver
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:08:56.114878100+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class DocumentAApprouver {
  public static final String SERIALIZED_NAME_CODE = "code";
  public static final String SERIALIZED_NAME_CODE_STRUCTURE = "codeStructure";
  public static final String SERIALIZED_NAME_LIBELLE_AFFICHAGE = "libelleAffichage";
  public static final String SERIALIZED_NAME_CONTENU = "contenu";
  public static final String SERIALIZED_NAME_LIBELLE_ACCEPTATION = "libelleAcceptation";
  public static final String SERIALIZED_NAME_LIBELLE_REFUS = "libelleRefus";
  public static final String SERIALIZED_NAME_TEMOIN_BLOQUANT = "temoinBloquant";
  public static final String SERIALIZED_NAME_DATE_DEBUT_VALIDITE = "dateDebutValidite";
  public static final String SERIALIZED_NAME_DATE_FIN_VALIDITE = "dateFinValidite";
  public static final String SERIALIZED_NAME_PRIORITE_AFFICHAGE = "prioriteAffichage";
  public static final String SERIALIZED_NAME_TEMOIN_VISIBLE = "temoinVisible";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("codeStructure");
    openapiFields.add("libelleAffichage");
    openapiFields.add("contenu");
    openapiFields.add("libelleAcceptation");
    openapiFields.add("libelleRefus");
    openapiFields.add("temoinBloquant");
    openapiFields.add("dateDebutValidite");
    openapiFields.add("dateFinValidite");
    openapiFields.add("prioriteAffichage");
    openapiFields.add("temoinVisible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("codeStructure");
    openapiRequiredFields.add("libelleAffichage");
    openapiRequiredFields.add("contenu");
    openapiRequiredFields.add("libelleAcceptation");
    openapiRequiredFields.add("temoinBloquant");
    openapiRequiredFields.add("dateDebutValidite");
    openapiRequiredFields.add("prioriteAffichage");
    openapiRequiredFields.add("temoinVisible");
  }

  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nonnull
  private String code;
  @SerializedName(SERIALIZED_NAME_CODE_STRUCTURE)
  @javax.annotation.Nonnull
  private String codeStructure;
  @SerializedName(SERIALIZED_NAME_LIBELLE_AFFICHAGE)
  @javax.annotation.Nonnull
  private String libelleAffichage;
  @SerializedName(SERIALIZED_NAME_CONTENU)
  @javax.annotation.Nonnull
  private String contenu;
  @SerializedName(SERIALIZED_NAME_LIBELLE_ACCEPTATION)
  @javax.annotation.Nonnull
  private String libelleAcceptation;
  @SerializedName(SERIALIZED_NAME_LIBELLE_REFUS)
  @javax.annotation.Nullable
  private String libelleRefus;
  @SerializedName(SERIALIZED_NAME_TEMOIN_BLOQUANT)
  @javax.annotation.Nonnull
  private Boolean temoinBloquant;
  @SerializedName(SERIALIZED_NAME_DATE_DEBUT_VALIDITE)
  @javax.annotation.Nonnull
  private String dateDebutValidite;
  @SerializedName(SERIALIZED_NAME_DATE_FIN_VALIDITE)
  @javax.annotation.Nullable
  private String dateFinValidite;
  @SerializedName(SERIALIZED_NAME_PRIORITE_AFFICHAGE)
  @javax.annotation.Nonnull
  private Integer prioriteAffichage;
  @SerializedName(SERIALIZED_NAME_TEMOIN_VISIBLE)
  @javax.annotation.Nonnull
  private Boolean temoinVisible;

  public DocumentAApprouver() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentAApprouver
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentAApprouver.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentAApprouver is not found in the empty JSON string", DocumentAApprouver.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentAApprouver.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentAApprouver` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentAApprouver.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("codeStructure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeStructure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeStructure").toString()));
      }
      if (!jsonObj.get("libelleAffichage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `libelleAffichage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("libelleAffichage").toString()));
      }
      if (!jsonObj.get("contenu").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contenu` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contenu").toString()));
      }
      if (!jsonObj.get("libelleAcceptation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `libelleAcceptation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("libelleAcceptation").toString()));
      }
      if ((jsonObj.get("libelleRefus") != null && !jsonObj.get("libelleRefus").isJsonNull()) && !jsonObj.get("libelleRefus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `libelleRefus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("libelleRefus").toString()));
      }
      if (!jsonObj.get("dateDebutValidite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateDebutValidite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateDebutValidite").toString()));
      }
      if ((jsonObj.get("dateFinValidite") != null && !jsonObj.get("dateFinValidite").isJsonNull()) && !jsonObj.get("dateFinValidite").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateFinValidite` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateFinValidite").toString()));
      }
  }

  /**
   * Create an instance of DocumentAApprouver given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentAApprouver
   * @throws IOException if the JSON string is invalid with respect to DocumentAApprouver
   */
  public static DocumentAApprouver fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentAApprouver.class);
  }

  public DocumentAApprouver code(@javax.annotation.Nonnull String code) {
    this.code = code;
    return this;
  }

  /**
   * Le code metier en saisie libre
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nonnull String code) {
    this.code = code;
  }

  public DocumentAApprouver codeStructure(@javax.annotation.Nonnull String codeStructure) {
    this.codeStructure = codeStructure;
    return this;
  }

  /**
   * Le code de l&#39;établissement (structure)
   * @return codeStructure
   */
  @javax.annotation.Nonnull
  public String getCodeStructure() {
    return codeStructure;
  }

  public void setCodeStructure(@javax.annotation.Nonnull String codeStructure) {
    this.codeStructure = codeStructure;
  }

  public DocumentAApprouver libelleAffichage(@javax.annotation.Nonnull String libelleAffichage) {
    this.libelleAffichage = libelleAffichage;
    return this;
  }

  /**
   * Le libellé d&#39;affichage
   * @return libelleAffichage
   */
  @javax.annotation.Nonnull
  public String getLibelleAffichage() {
    return libelleAffichage;
  }

  public void setLibelleAffichage(@javax.annotation.Nonnull String libelleAffichage) {
    this.libelleAffichage = libelleAffichage;
  }

  public DocumentAApprouver contenu(@javax.annotation.Nonnull String contenu) {
    this.contenu = contenu;
    return this;
  }

  /**
   * Le contenu
   * @return contenu
   */
  @javax.annotation.Nonnull
  public String getContenu() {
    return contenu;
  }

  public void setContenu(@javax.annotation.Nonnull String contenu) {
    this.contenu = contenu;
  }

  public DocumentAApprouver libelleAcceptation(@javax.annotation.Nonnull String libelleAcceptation) {
    this.libelleAcceptation = libelleAcceptation;
    return this;
  }

  /**
   * Le libellé d&#39;acceptation
   * @return libelleAcceptation
   */
  @javax.annotation.Nonnull
  public String getLibelleAcceptation() {
    return libelleAcceptation;
  }

  public void setLibelleAcceptation(@javax.annotation.Nonnull String libelleAcceptation) {
    this.libelleAcceptation = libelleAcceptation;
  }

  public DocumentAApprouver libelleRefus(@javax.annotation.Nullable String libelleRefus) {
    this.libelleRefus = libelleRefus;
    return this;
  }

  /**
   * Le libellé de refus
   * @return libelleRefus
   */
  @javax.annotation.Nullable
  public String getLibelleRefus() {
    return libelleRefus;
  }

  public void setLibelleRefus(@javax.annotation.Nullable String libelleRefus) {
    this.libelleRefus = libelleRefus;
  }

  public DocumentAApprouver temoinBloquant(@javax.annotation.Nonnull Boolean temoinBloquant) {
    this.temoinBloquant = temoinBloquant;
    return this;
  }

  /**
   * Si true, impose une réponse pour pouvoir continuer l&#39;inscription
   * @return temoinBloquant
   */
  @javax.annotation.Nonnull
  public Boolean getTemoinBloquant() {
    return temoinBloquant;
  }

  public void setTemoinBloquant(@javax.annotation.Nonnull Boolean temoinBloquant) {
    this.temoinBloquant = temoinBloquant;
  }

  public DocumentAApprouver dateDebutValidite(@javax.annotation.Nonnull String dateDebutValidite) {
    this.dateDebutValidite = dateDebutValidite;
    return this;
  }

  /**
   * La date de début de validité
   * @return dateDebutValidite
   */
  @javax.annotation.Nonnull
  public String getDateDebutValidite() {
    return dateDebutValidite;
  }

  public void setDateDebutValidite(@javax.annotation.Nonnull String dateDebutValidite) {
    this.dateDebutValidite = dateDebutValidite;
  }

  public DocumentAApprouver dateFinValidite(@javax.annotation.Nullable String dateFinValidite) {
    this.dateFinValidite = dateFinValidite;
    return this;
  }

  /**
   * La date de fin de validité
   * @return dateFinValidite
   */
  @javax.annotation.Nullable
  public String getDateFinValidite() {
    return dateFinValidite;
  }

  public void setDateFinValidite(@javax.annotation.Nullable String dateFinValidite) {
    this.dateFinValidite = dateFinValidite;
  }

  public DocumentAApprouver prioriteAffichage(@javax.annotation.Nonnull Integer prioriteAffichage) {
    this.prioriteAffichage = prioriteAffichage;
    return this;
  }

  /**
   * La priorité d&#39;affichage : Plus le nombre est élevé, plus le document apparaît en priorité dans la liste de valeurs.
   * @return prioriteAffichage
   */
  @javax.annotation.Nonnull
  public Integer getPrioriteAffichage() {
    return prioriteAffichage;
  }

  public void setPrioriteAffichage(@javax.annotation.Nonnull Integer prioriteAffichage) {
    this.prioriteAffichage = prioriteAffichage;
  }

  public DocumentAApprouver temoinVisible(@javax.annotation.Nonnull Boolean temoinVisible) {
    this.temoinVisible = temoinVisible;
    return this;
  }

  /**
   * Si le document sera visible par l&#39;étudiant ou non.
   * @return temoinVisible
   */
  @javax.annotation.Nonnull
  public Boolean getTemoinVisible() {
    return temoinVisible;
  }

  public void setTemoinVisible(@javax.annotation.Nonnull Boolean temoinVisible) {
    this.temoinVisible = temoinVisible;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentAApprouver documentAApprouver = (DocumentAApprouver) o;
    return Objects.equals(this.code, documentAApprouver.code) &&
        Objects.equals(this.codeStructure, documentAApprouver.codeStructure) &&
        Objects.equals(this.libelleAffichage, documentAApprouver.libelleAffichage) &&
        Objects.equals(this.contenu, documentAApprouver.contenu) &&
        Objects.equals(this.libelleAcceptation, documentAApprouver.libelleAcceptation) &&
        Objects.equals(this.libelleRefus, documentAApprouver.libelleRefus) &&
        Objects.equals(this.temoinBloquant, documentAApprouver.temoinBloquant) &&
        Objects.equals(this.dateDebutValidite, documentAApprouver.dateDebutValidite) &&
        Objects.equals(this.dateFinValidite, documentAApprouver.dateFinValidite) &&
        Objects.equals(this.prioriteAffichage, documentAApprouver.prioriteAffichage) &&
        Objects.equals(this.temoinVisible, documentAApprouver.temoinVisible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, codeStructure, libelleAffichage, contenu, libelleAcceptation, libelleRefus, temoinBloquant, dateDebutValidite, dateFinValidite, prioriteAffichage, temoinVisible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentAApprouver {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codeStructure: ").append(toIndentedString(codeStructure)).append("\n");
    sb.append("    libelleAffichage: ").append(toIndentedString(libelleAffichage)).append("\n");
    sb.append("    contenu: ").append(toIndentedString(contenu)).append("\n");
    sb.append("    libelleAcceptation: ").append(toIndentedString(libelleAcceptation)).append("\n");
    sb.append("    libelleRefus: ").append(toIndentedString(libelleRefus)).append("\n");
    sb.append("    temoinBloquant: ").append(toIndentedString(temoinBloquant)).append("\n");
    sb.append("    dateDebutValidite: ").append(toIndentedString(dateDebutValidite)).append("\n");
    sb.append("    dateFinValidite: ").append(toIndentedString(dateFinValidite)).append("\n");
    sb.append("    prioriteAffichage: ").append(toIndentedString(prioriteAffichage)).append("\n");
    sb.append("    temoinVisible: ").append(toIndentedString(temoinVisible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of DocumentAApprouver to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentAApprouver.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentAApprouver' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentAApprouver> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentAApprouver.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentAApprouver>() {
           @Override
           public void write(JsonWriter out, DocumentAApprouver value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentAApprouver read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

