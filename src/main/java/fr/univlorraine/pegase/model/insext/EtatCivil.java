/*
 * INSCRIPTION Externe V2
 *  # Introduction  Liste l'ensemble des services et des opérations Ins (Module Inscription) identifiés pour un usage externe.  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 2.1.0-rc.20250404093138
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.insext;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * EtatCivil
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:08:56.114878100+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class EtatCivil {
  public static final String SERIALIZED_NAME_NOM_DE_NAISSANCE = "nomDeNaissance";
  public static final String SERIALIZED_NAME_NOM_USUEL = "nomUsuel";
  public static final String SERIALIZED_NAME_PRENOM = "prenom";
  public static final String SERIALIZED_NAME_DEUXIEME_PRENOM = "deuxiemePrenom";
  public static final String SERIALIZED_NAME_TROISIEME_PRENOM = "troisiemePrenom";
  public static final String SERIALIZED_NAME_GENRE = "genre";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nomDeNaissance");
    openapiFields.add("nomUsuel");
    openapiFields.add("prenom");
    openapiFields.add("deuxiemePrenom");
    openapiFields.add("troisiemePrenom");
    openapiFields.add("genre");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  @SerializedName(SERIALIZED_NAME_NOM_DE_NAISSANCE)
  @javax.annotation.Nullable
  private String nomDeNaissance;
  @SerializedName(SERIALIZED_NAME_NOM_USUEL)
  @javax.annotation.Nullable
  private String nomUsuel;
  @SerializedName(SERIALIZED_NAME_PRENOM)
  @javax.annotation.Nullable
  private String prenom;
  @SerializedName(SERIALIZED_NAME_DEUXIEME_PRENOM)
  @javax.annotation.Nullable
  private String deuxiemePrenom;
  @SerializedName(SERIALIZED_NAME_TROISIEME_PRENOM)
  @javax.annotation.Nullable
  private String troisiemePrenom;
  @SerializedName(SERIALIZED_NAME_GENRE)
  @javax.annotation.Nullable
  private String genre;

  public EtatCivil() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EtatCivil
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EtatCivil.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EtatCivil is not found in the empty JSON string", EtatCivil.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EtatCivil.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EtatCivil` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nomDeNaissance") != null && !jsonObj.get("nomDeNaissance").isJsonNull()) && !jsonObj.get("nomDeNaissance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nomDeNaissance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nomDeNaissance").toString()));
      }
      if ((jsonObj.get("nomUsuel") != null && !jsonObj.get("nomUsuel").isJsonNull()) && !jsonObj.get("nomUsuel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nomUsuel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nomUsuel").toString()));
      }
      if ((jsonObj.get("prenom") != null && !jsonObj.get("prenom").isJsonNull()) && !jsonObj.get("prenom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prenom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prenom").toString()));
      }
      if ((jsonObj.get("deuxiemePrenom") != null && !jsonObj.get("deuxiemePrenom").isJsonNull()) && !jsonObj.get("deuxiemePrenom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deuxiemePrenom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deuxiemePrenom").toString()));
      }
      if ((jsonObj.get("troisiemePrenom") != null && !jsonObj.get("troisiemePrenom").isJsonNull()) && !jsonObj.get("troisiemePrenom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `troisiemePrenom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("troisiemePrenom").toString()));
      }
      if ((jsonObj.get("genre") != null && !jsonObj.get("genre").isJsonNull()) && !jsonObj.get("genre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `genre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("genre").toString()));
      }
  }

  /**
   * Create an instance of EtatCivil given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EtatCivil
   * @throws IOException if the JSON string is invalid with respect to EtatCivil
   */
  public static EtatCivil fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EtatCivil.class);
  }

  public EtatCivil nomDeNaissance(@javax.annotation.Nullable String nomDeNaissance) {
    this.nomDeNaissance = nomDeNaissance;
    return this;
  }

  /**
   * Le nom de naissance
   * @return nomDeNaissance
   */
  @javax.annotation.Nullable
  public String getNomDeNaissance() {
    return nomDeNaissance;
  }

  public void setNomDeNaissance(@javax.annotation.Nullable String nomDeNaissance) {
    this.nomDeNaissance = nomDeNaissance;
  }

  public EtatCivil nomUsuel(@javax.annotation.Nullable String nomUsuel) {
    this.nomUsuel = nomUsuel;
    return this;
  }

  /**
   * Le nom usuel
   * @return nomUsuel
   */
  @javax.annotation.Nullable
  public String getNomUsuel() {
    return nomUsuel;
  }

  public void setNomUsuel(@javax.annotation.Nullable String nomUsuel) {
    this.nomUsuel = nomUsuel;
  }

  public EtatCivil prenom(@javax.annotation.Nullable String prenom) {
    this.prenom = prenom;
    return this;
  }

  /**
   * Le prénom
   * @return prenom
   */
  @javax.annotation.Nullable
  public String getPrenom() {
    return prenom;
  }

  public void setPrenom(@javax.annotation.Nullable String prenom) {
    this.prenom = prenom;
  }

  public EtatCivil deuxiemePrenom(@javax.annotation.Nullable String deuxiemePrenom) {
    this.deuxiemePrenom = deuxiemePrenom;
    return this;
  }

  /**
   * Le deuxième prénom
   * @return deuxiemePrenom
   */
  @javax.annotation.Nullable
  public String getDeuxiemePrenom() {
    return deuxiemePrenom;
  }

  public void setDeuxiemePrenom(@javax.annotation.Nullable String deuxiemePrenom) {
    this.deuxiemePrenom = deuxiemePrenom;
  }

  public EtatCivil troisiemePrenom(@javax.annotation.Nullable String troisiemePrenom) {
    this.troisiemePrenom = troisiemePrenom;
    return this;
  }

  /**
   * Le troisième prénom
   * @return troisiemePrenom
   */
  @javax.annotation.Nullable
  public String getTroisiemePrenom() {
    return troisiemePrenom;
  }

  public void setTroisiemePrenom(@javax.annotation.Nullable String troisiemePrenom) {
    this.troisiemePrenom = troisiemePrenom;
  }

  public EtatCivil genre(@javax.annotation.Nullable String genre) {
    this.genre = genre;
    return this;
  }

  /**
   * Les valeurs &#x60;M&#x60; ou &#x60;F&#x60; sont acceptées
   * @return genre
   */
  @javax.annotation.Nullable
  public String getGenre() {
    return genre;
  }

  public void setGenre(@javax.annotation.Nullable String genre) {
    this.genre = genre;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EtatCivil etatCivil = (EtatCivil) o;
    return Objects.equals(this.nomDeNaissance, etatCivil.nomDeNaissance) &&
        Objects.equals(this.nomUsuel, etatCivil.nomUsuel) &&
        Objects.equals(this.prenom, etatCivil.prenom) &&
        Objects.equals(this.deuxiemePrenom, etatCivil.deuxiemePrenom) &&
        Objects.equals(this.troisiemePrenom, etatCivil.troisiemePrenom) &&
        Objects.equals(this.genre, etatCivil.genre);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nomDeNaissance, nomUsuel, prenom, deuxiemePrenom, troisiemePrenom, genre);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EtatCivil {\n");
    sb.append("    nomDeNaissance: ").append(toIndentedString(nomDeNaissance)).append("\n");
    sb.append("    nomUsuel: ").append(toIndentedString(nomUsuel)).append("\n");
    sb.append("    prenom: ").append(toIndentedString(prenom)).append("\n");
    sb.append("    deuxiemePrenom: ").append(toIndentedString(deuxiemePrenom)).append("\n");
    sb.append("    troisiemePrenom: ").append(toIndentedString(troisiemePrenom)).append("\n");
    sb.append("    genre: ").append(toIndentedString(genre)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of EtatCivil to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EtatCivil.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EtatCivil' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EtatCivil> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EtatCivil.class));

       return (TypeAdapter<T>) new TypeAdapter<EtatCivil>() {
           @Override
           public void write(JsonWriter out, EtatCivil value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EtatCivil read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

