/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.idt;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.idt.DonneesComplementaires;
import fr.univlorraine.pegase.model.idt.DonneesContact;
import fr.univlorraine.pegase.model.idt.EtatCivil;
import fr.univlorraine.pegase.model.idt.Ine;
import fr.univlorraine.pegase.model.idt.ParcoursScolaireEtUniversitaire;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * ProfilApprenant
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:11:42.659557700+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class ProfilApprenant {
  public static final String SERIALIZED_NAME_LISTE_I_N_ES = "listeINEs";
  public static final String SERIALIZED_NAME_ETAT_CIVIL = "etatCivil";
  public static final String SERIALIZED_NAME_DONNEES_CONTACT = "donneesContact";
  public static final String SERIALIZED_NAME_DONNEES_COMPLEMENTAIRES = "donneesComplementaires";
  public static final String SERIALIZED_NAME_PARCOURS_SCOLAIRE_ET_UNIVERSITAIRE = "parcoursScolaireEtUniversitaire";
  public static final String SERIALIZED_NAME_TEMOIN_DOUBLON_POTENTIEL = "temoinDoublonPotentiel";
  public static final String SERIALIZED_NAME_TEMOIN_DECEDE = "temoinDecede";
  public static final String SERIALIZED_NAME_CODE_APPRENANT = "codeApprenant";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("listeINEs");
    openapiFields.add("etatCivil");
    openapiFields.add("donneesContact");
    openapiFields.add("donneesComplementaires");
    openapiFields.add("parcoursScolaireEtUniversitaire");
    openapiFields.add("temoinDoublonPotentiel");
    openapiFields.add("temoinDecede");
    openapiFields.add("codeApprenant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  @SerializedName(SERIALIZED_NAME_LISTE_I_N_ES)
  @javax.annotation.Nullable
  private List<Ine> listeINEs = new ArrayList<>();
  @SerializedName(SERIALIZED_NAME_ETAT_CIVIL)
  @javax.annotation.Nullable
  private EtatCivil etatCivil;
  @SerializedName(SERIALIZED_NAME_DONNEES_CONTACT)
  @javax.annotation.Nullable
  private DonneesContact donneesContact;
  @SerializedName(SERIALIZED_NAME_DONNEES_COMPLEMENTAIRES)
  @javax.annotation.Nullable
  private DonneesComplementaires donneesComplementaires;
  @SerializedName(SERIALIZED_NAME_PARCOURS_SCOLAIRE_ET_UNIVERSITAIRE)
  @javax.annotation.Nullable
  private ParcoursScolaireEtUniversitaire parcoursScolaireEtUniversitaire;
  @SerializedName(SERIALIZED_NAME_TEMOIN_DOUBLON_POTENTIEL)
  @javax.annotation.Nullable
  private Boolean temoinDoublonPotentiel;
  @SerializedName(SERIALIZED_NAME_TEMOIN_DECEDE)
  @javax.annotation.Nullable
  private Boolean temoinDecede;
  @SerializedName(SERIALIZED_NAME_CODE_APPRENANT)
  @javax.annotation.Nullable
  private String codeApprenant;

  public ProfilApprenant() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProfilApprenant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProfilApprenant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProfilApprenant is not found in the empty JSON string", ProfilApprenant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProfilApprenant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProfilApprenant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("listeINEs") != null && !jsonObj.get("listeINEs").isJsonNull()) {
        JsonArray jsonArraylisteINEs = jsonObj.getAsJsonArray("listeINEs");
        if (jsonArraylisteINEs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listeINEs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listeINEs` to be an array in the JSON string but got `%s`", jsonObj.get("listeINEs").toString()));
          }

          // validate the optional field `listeINEs` (array)
          for (int i = 0; i < jsonArraylisteINEs.size(); i++) {
            Ine.validateJsonElement(jsonArraylisteINEs.get(i));
          };
        }
      }
      // validate the optional field `etatCivil`
      if (jsonObj.get("etatCivil") != null && !jsonObj.get("etatCivil").isJsonNull()) {
        EtatCivil.validateJsonElement(jsonObj.get("etatCivil"));
      }
      // validate the optional field `donneesContact`
      if (jsonObj.get("donneesContact") != null && !jsonObj.get("donneesContact").isJsonNull()) {
        DonneesContact.validateJsonElement(jsonObj.get("donneesContact"));
      }
      // validate the optional field `donneesComplementaires`
      if (jsonObj.get("donneesComplementaires") != null && !jsonObj.get("donneesComplementaires").isJsonNull()) {
        DonneesComplementaires.validateJsonElement(jsonObj.get("donneesComplementaires"));
      }
      // validate the optional field `parcoursScolaireEtUniversitaire`
      if (jsonObj.get("parcoursScolaireEtUniversitaire") != null && !jsonObj.get("parcoursScolaireEtUniversitaire").isJsonNull()) {
        ParcoursScolaireEtUniversitaire.validateJsonElement(jsonObj.get("parcoursScolaireEtUniversitaire"));
      }
      if ((jsonObj.get("codeApprenant") != null && !jsonObj.get("codeApprenant").isJsonNull()) && !jsonObj.get("codeApprenant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codeApprenant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codeApprenant").toString()));
      }
  }

  /**
   * Create an instance of ProfilApprenant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProfilApprenant
   * @throws IOException if the JSON string is invalid with respect to ProfilApprenant
   */
  public static ProfilApprenant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProfilApprenant.class);
  }

  public ProfilApprenant listeINEs(@javax.annotation.Nullable List<Ine> listeINEs) {
    this.listeINEs = listeINEs;
    return this;
  }

  public ProfilApprenant addListeINEsItem(Ine listeINEsItem) {
    if (this.listeINEs == null) {
      this.listeINEs = new ArrayList<>();
    }
    this.listeINEs.add(listeINEsItem);
    return this;
  }

  /**
   * Liste des INE
   * @return listeINEs
   */
  @javax.annotation.Nullable
  public List<Ine> getListeINEs() {
    return listeINEs;
  }

  public void setListeINEs(@javax.annotation.Nullable List<Ine> listeINEs) {
    this.listeINEs = listeINEs;
  }

  public ProfilApprenant etatCivil(@javax.annotation.Nullable EtatCivil etatCivil) {
    this.etatCivil = etatCivil;
    return this;
  }

  /**
   * Get etatCivil
   * @return etatCivil
   */
  @javax.annotation.Nullable
  public EtatCivil getEtatCivil() {
    return etatCivil;
  }

  public void setEtatCivil(@javax.annotation.Nullable EtatCivil etatCivil) {
    this.etatCivil = etatCivil;
  }

  public ProfilApprenant donneesContact(@javax.annotation.Nullable DonneesContact donneesContact) {
    this.donneesContact = donneesContact;
    return this;
  }

  /**
   * Get donneesContact
   * @return donneesContact
   */
  @javax.annotation.Nullable
  public DonneesContact getDonneesContact() {
    return donneesContact;
  }

  public void setDonneesContact(@javax.annotation.Nullable DonneesContact donneesContact) {
    this.donneesContact = donneesContact;
  }

  public ProfilApprenant donneesComplementaires(@javax.annotation.Nullable DonneesComplementaires donneesComplementaires) {
    this.donneesComplementaires = donneesComplementaires;
    return this;
  }

  /**
   * Get donneesComplementaires
   * @return donneesComplementaires
   */
  @javax.annotation.Nullable
  public DonneesComplementaires getDonneesComplementaires() {
    return donneesComplementaires;
  }

  public void setDonneesComplementaires(@javax.annotation.Nullable DonneesComplementaires donneesComplementaires) {
    this.donneesComplementaires = donneesComplementaires;
  }

  public ProfilApprenant parcoursScolaireEtUniversitaire(@javax.annotation.Nullable ParcoursScolaireEtUniversitaire parcoursScolaireEtUniversitaire) {
    this.parcoursScolaireEtUniversitaire = parcoursScolaireEtUniversitaire;
    return this;
  }

  /**
   * Get parcoursScolaireEtUniversitaire
   * @return parcoursScolaireEtUniversitaire
   */
  @javax.annotation.Nullable
  public ParcoursScolaireEtUniversitaire getParcoursScolaireEtUniversitaire() {
    return parcoursScolaireEtUniversitaire;
  }

  public void setParcoursScolaireEtUniversitaire(@javax.annotation.Nullable ParcoursScolaireEtUniversitaire parcoursScolaireEtUniversitaire) {
    this.parcoursScolaireEtUniversitaire = parcoursScolaireEtUniversitaire;
  }

  public ProfilApprenant temoinDoublonPotentiel(@javax.annotation.Nullable Boolean temoinDoublonPotentiel) {
    this.temoinDoublonPotentiel = temoinDoublonPotentiel;
    return this;
  }

  /**
   * Temoin d&#39;une identité étant un doublon potentiel
   * @return temoinDoublonPotentiel
   */
  @javax.annotation.Nullable
  public Boolean getTemoinDoublonPotentiel() {
    return temoinDoublonPotentiel;
  }

  public void setTemoinDoublonPotentiel(@javax.annotation.Nullable Boolean temoinDoublonPotentiel) {
    this.temoinDoublonPotentiel = temoinDoublonPotentiel;
  }

  public ProfilApprenant temoinDecede(@javax.annotation.Nullable Boolean temoinDecede) {
    this.temoinDecede = temoinDecede;
    return this;
  }

  /**
   * Témoin définissant comme décédée ou vivante la personne propriétaire de l&#39;identité
   * @return temoinDecede
   */
  @javax.annotation.Nullable
  public Boolean getTemoinDecede() {
    return temoinDecede;
  }

  public void setTemoinDecede(@javax.annotation.Nullable Boolean temoinDecede) {
    this.temoinDecede = temoinDecede;
  }

  public ProfilApprenant codeApprenant(@javax.annotation.Nullable String codeApprenant) {
    this.codeApprenant = codeApprenant;
    return this;
  }

  /**
   * Code apprenant
   * @return codeApprenant
   */
  @javax.annotation.Nullable
  public String getCodeApprenant() {
    return codeApprenant;
  }

  public void setCodeApprenant(@javax.annotation.Nullable String codeApprenant) {
    this.codeApprenant = codeApprenant;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProfilApprenant profilApprenant = (ProfilApprenant) o;
    return Objects.equals(this.listeINEs, profilApprenant.listeINEs) &&
        Objects.equals(this.etatCivil, profilApprenant.etatCivil) &&
        Objects.equals(this.donneesContact, profilApprenant.donneesContact) &&
        Objects.equals(this.donneesComplementaires, profilApprenant.donneesComplementaires) &&
        Objects.equals(this.parcoursScolaireEtUniversitaire, profilApprenant.parcoursScolaireEtUniversitaire) &&
        Objects.equals(this.temoinDoublonPotentiel, profilApprenant.temoinDoublonPotentiel) &&
        Objects.equals(this.temoinDecede, profilApprenant.temoinDecede) &&
        Objects.equals(this.codeApprenant, profilApprenant.codeApprenant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listeINEs, etatCivil, donneesContact, donneesComplementaires, parcoursScolaireEtUniversitaire, temoinDoublonPotentiel, temoinDecede, codeApprenant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProfilApprenant {\n");
    sb.append("    listeINEs: ").append(toIndentedString(listeINEs)).append("\n");
    sb.append("    etatCivil: ").append(toIndentedString(etatCivil)).append("\n");
    sb.append("    donneesContact: ").append(toIndentedString(donneesContact)).append("\n");
    sb.append("    donneesComplementaires: ").append(toIndentedString(donneesComplementaires)).append("\n");
    sb.append("    parcoursScolaireEtUniversitaire: ").append(toIndentedString(parcoursScolaireEtUniversitaire)).append("\n");
    sb.append("    temoinDoublonPotentiel: ").append(toIndentedString(temoinDoublonPotentiel)).append("\n");
    sb.append("    temoinDecede: ").append(toIndentedString(temoinDecede)).append("\n");
    sb.append("    codeApprenant: ").append(toIndentedString(codeApprenant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of ProfilApprenant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProfilApprenant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProfilApprenant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProfilApprenant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProfilApprenant.class));

       return (TypeAdapter<T>) new TypeAdapter<ProfilApprenant>() {
           @Override
           public void write(JsonWriter out, ProfilApprenant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProfilApprenant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

