/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.idt;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * Nomenclature
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:11:42.659557700+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class Nomenclature {
  public static final String SERIALIZED_NAME_TYPE = "type";
  public static final String SERIALIZED_NAME_CODE = "code";
  public static final String SERIALIZED_NAME_DATE_CONSOMMATION = "dateConsommation";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("code");
    openapiFields.add("dateConsommation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("code");
  }

  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nonnull
  protected String type;
  @SerializedName(SERIALIZED_NAME_CODE)
  @javax.annotation.Nonnull
  private String code;
  @SerializedName(SERIALIZED_NAME_DATE_CONSOMMATION)
  @javax.annotation.Nullable
  private Date dateConsommation;

  public Nomenclature() {
    this.type = this.getClass().getSimpleName();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Nomenclature
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Nomenclature.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Nomenclature is not found in the empty JSON string", Nomenclature.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "COMMUNENAISSANCE":
          CommunesNaissance.validateJsonElement(jsonElement);
          break;
        case "DEPARTEMENT":
          Departements.validateJsonElement(jsonElement);
          break;
        case "ETABLISSEMENTFRANCAIS":
          EtablissementsFrancais.validateJsonElement(jsonElement);
          break;
        case "MENTIONBAC":
          MentionsBac.validateJsonElement(jsonElement);
          break;
        case "PAYSETNATIONALITES":
          PaysEtNationalites.validateJsonElement(jsonElement);
          break;
        case "PROFESSIONSETCATEGORIESSOCIOPRO":
          ProfessionsEtCategoriesSocioPro.validateJsonElement(jsonElement);
          break;
        case "QUOTITESACTIVITE":
          QuotitesActivite.validateJsonElement(jsonElement);
          break;
        case "SERIESBACETEQUIVALENT":
          SeriesBacEtEquivalent.validateJsonElement(jsonElement);
          break;
        case "SITUATIONSFAMILIALES":
          SituationsFamiliales.validateJsonElement(jsonElement);
          break;
        case "SITUATIONSMILITAIRES":
          SituationsMilitaires.validateJsonElement(jsonElement);
          break;
        case "SPECIALITESBACGENERAL":
          SpecialitesBacGeneral.validateJsonElement(jsonElement);
          break;
        case "TITRESACCESENSEIGNEMENTSUP":
          TitresAccesEnseignementSup.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }

  /**
   * Create an instance of Nomenclature given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Nomenclature
   * @throws IOException if the JSON string is invalid with respect to Nomenclature
   */
  public static Nomenclature fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Nomenclature.class);
  }

  public Nomenclature type(@javax.annotation.Nonnull String type) {
    this.type = type;
    return this;
  }

  /**
   * Type de la nomenclature dans le module REF. A noter que ce type est obligatoire dans les objets de type response
   * @return type
   */
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nonnull String type) {
    this.type = type;
  }

  public Nomenclature code(@javax.annotation.Nonnull String code) {
    this.code = code;
    return this;
  }

  /**
   * Code de la nomenclature
   * @return code
   */
  @javax.annotation.Nonnull
  public String getCode() {
    return code;
  }

  public void setCode(@javax.annotation.Nonnull String code) {
    this.code = code;
  }

  public Nomenclature dateConsommation(@javax.annotation.Nullable Date dateConsommation) {
    this.dateConsommation = dateConsommation;
    return this;
  }

  /**
   * Date consommation de la nomenclature. A noter que la date de consommation est obligatoire dans les objets de type response
   * @return dateConsommation
   */
  @javax.annotation.Nullable
  public Date getDateConsommation() {
    return dateConsommation;
  }

  public void setDateConsommation(@javax.annotation.Nullable Date dateConsommation) {
    this.dateConsommation = dateConsommation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Nomenclature nomenclature = (Nomenclature) o;
    return Objects.equals(this.type, nomenclature.type) &&
        Objects.equals(this.code, nomenclature.code) &&
        Objects.equals(this.dateConsommation, nomenclature.dateConsommation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, code, dateConsommation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Nomenclature {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    dateConsommation: ").append(toIndentedString(dateConsommation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of Nomenclature to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

