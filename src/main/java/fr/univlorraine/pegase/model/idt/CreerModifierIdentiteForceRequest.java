/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.idt;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.idt.ProfilApprenant;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * CreerModifierIdentiteForceRequest
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:11:42.659557700+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class CreerModifierIdentiteForceRequest {
  public static final String SERIALIZED_NAME_NOM_NAISSANCE = "nomNaissance";
  public static final String SERIALIZED_NAME_PRENOM = "prenom";
  public static final String SERIALIZED_NAME_EMAIL = "email";
  public static final String SERIALIZED_NAME_TELEPHONE_PORTABLE_PERSONNEL = "telephonePortablePersonnel";
  public static final String SERIALIZED_NAME_PROFIL_APPRENANT = "profilApprenant";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nomNaissance");
    openapiFields.add("prenom");
    openapiFields.add("email");
    openapiFields.add("telephonePortablePersonnel");
    openapiFields.add("profilApprenant");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nomNaissance");
    openapiRequiredFields.add("prenom");
  }

  @SerializedName(SERIALIZED_NAME_NOM_NAISSANCE)
  @javax.annotation.Nonnull
  private String nomNaissance;
  @SerializedName(SERIALIZED_NAME_PRENOM)
  @javax.annotation.Nonnull
  private String prenom;
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;
  @SerializedName(SERIALIZED_NAME_TELEPHONE_PORTABLE_PERSONNEL)
  @javax.annotation.Nullable
  private String telephonePortablePersonnel;
  @SerializedName(SERIALIZED_NAME_PROFIL_APPRENANT)
  @javax.annotation.Nullable
  private ProfilApprenant profilApprenant;

  public CreerModifierIdentiteForceRequest() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreerModifierIdentiteForceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreerModifierIdentiteForceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreerModifierIdentiteForceRequest is not found in the empty JSON string", CreerModifierIdentiteForceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreerModifierIdentiteForceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreerModifierIdentiteForceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreerModifierIdentiteForceRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("nomNaissance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nomNaissance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nomNaissance").toString()));
      }
      if (!jsonObj.get("prenom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prenom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prenom").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("telephonePortablePersonnel") != null && !jsonObj.get("telephonePortablePersonnel").isJsonNull()) && !jsonObj.get("telephonePortablePersonnel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telephonePortablePersonnel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telephonePortablePersonnel").toString()));
      }
      // validate the optional field `profilApprenant`
      if (jsonObj.get("profilApprenant") != null && !jsonObj.get("profilApprenant").isJsonNull()) {
        ProfilApprenant.validateJsonElement(jsonObj.get("profilApprenant"));
      }
  }

  /**
   * Create an instance of CreerModifierIdentiteForceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreerModifierIdentiteForceRequest
   * @throws IOException if the JSON string is invalid with respect to CreerModifierIdentiteForceRequest
   */
  public static CreerModifierIdentiteForceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreerModifierIdentiteForceRequest.class);
  }

  public CreerModifierIdentiteForceRequest nomNaissance(@javax.annotation.Nonnull String nomNaissance) {
    this.nomNaissance = nomNaissance;
    return this;
  }

  /**
   * Nom de famille de la personne
   * @return nomNaissance
   */
  @javax.annotation.Nonnull
  public String getNomNaissance() {
    return nomNaissance;
  }

  public void setNomNaissance(@javax.annotation.Nonnull String nomNaissance) {
    this.nomNaissance = nomNaissance;
  }

  public CreerModifierIdentiteForceRequest prenom(@javax.annotation.Nonnull String prenom) {
    this.prenom = prenom;
    return this;
  }

  /**
   * Prénom de la personne
   * @return prenom
   */
  @javax.annotation.Nonnull
  public String getPrenom() {
    return prenom;
  }

  public void setPrenom(@javax.annotation.Nonnull String prenom) {
    this.prenom = prenom;
  }

  public CreerModifierIdentiteForceRequest email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Adresse électronique (Adresse email)
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }

  public CreerModifierIdentiteForceRequest telephonePortablePersonnel(@javax.annotation.Nullable String telephonePortablePersonnel) {
    this.telephonePortablePersonnel = telephonePortablePersonnel;
    return this;
  }

  /**
   * Numéro de téléphone
   * @return telephonePortablePersonnel
   */
  @javax.annotation.Nullable
  public String getTelephonePortablePersonnel() {
    return telephonePortablePersonnel;
  }

  public void setTelephonePortablePersonnel(@javax.annotation.Nullable String telephonePortablePersonnel) {
    this.telephonePortablePersonnel = telephonePortablePersonnel;
  }

  public CreerModifierIdentiteForceRequest profilApprenant(@javax.annotation.Nullable ProfilApprenant profilApprenant) {
    this.profilApprenant = profilApprenant;
    return this;
  }

  /**
   * Get profilApprenant
   * @return profilApprenant
   */
  @javax.annotation.Nullable
  public ProfilApprenant getProfilApprenant() {
    return profilApprenant;
  }

  public void setProfilApprenant(@javax.annotation.Nullable ProfilApprenant profilApprenant) {
    this.profilApprenant = profilApprenant;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreerModifierIdentiteForceRequest creerModifierIdentiteForceRequest = (CreerModifierIdentiteForceRequest) o;
    return Objects.equals(this.nomNaissance, creerModifierIdentiteForceRequest.nomNaissance) &&
        Objects.equals(this.prenom, creerModifierIdentiteForceRequest.prenom) &&
        Objects.equals(this.email, creerModifierIdentiteForceRequest.email) &&
        Objects.equals(this.telephonePortablePersonnel, creerModifierIdentiteForceRequest.telephonePortablePersonnel) &&
        Objects.equals(this.profilApprenant, creerModifierIdentiteForceRequest.profilApprenant);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nomNaissance, prenom, email, telephonePortablePersonnel, profilApprenant);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreerModifierIdentiteForceRequest {\n");
    sb.append("    nomNaissance: ").append(toIndentedString(nomNaissance)).append("\n");
    sb.append("    prenom: ").append(toIndentedString(prenom)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    telephonePortablePersonnel: ").append(toIndentedString(telephonePortablePersonnel)).append("\n");
    sb.append("    profilApprenant: ").append(toIndentedString(profilApprenant)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of CreerModifierIdentiteForceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreerModifierIdentiteForceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreerModifierIdentiteForceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreerModifierIdentiteForceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreerModifierIdentiteForceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CreerModifierIdentiteForceRequest>() {
           @Override
           public void write(JsonWriter out, CreerModifierIdentiteForceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreerModifierIdentiteForceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

