/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.idt;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.idt.ProfilApprenant;
import fr.univlorraine.pegase.model.idt.StatutIneRetour;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * IdentiteImmatriculeeDetail
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:11:42.659557700+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class IdentiteImmatriculeeDetail {
  public static final String SERIALIZED_NAME_ID = "id";
  public static final String SERIALIZED_NAME_IDENTIFIANT_APPRENANT_PEGASE = "identifiantApprenantPegase";
  public static final String SERIALIZED_NAME_NOM_NAISSANCE = "nomNaissance";
  public static final String SERIALIZED_NAME_PRENOM = "prenom";
  public static final String SERIALIZED_NAME_EMAIL = "email";
  public static final String SERIALIZED_NAME_TELEPHONE_PORTABLE_PERSONNEL = "telephonePortablePersonnel";
  public static final String SERIALIZED_NAME_PROFIL_APPRENANT = "profilApprenant";
  public static final String SERIALIZED_NAME_STATUT_INE = "statutIne";
  public static final String SERIALIZED_NAME_TEMOIN_VERROUILLE = "temoinVerrouille";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("identifiantApprenantPegase");
    openapiFields.add("nomNaissance");
    openapiFields.add("prenom");
    openapiFields.add("email");
    openapiFields.add("telephonePortablePersonnel");
    openapiFields.add("profilApprenant");
    openapiFields.add("statutIne");
    openapiFields.add("temoinVerrouille");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("identifiantApprenantPegase");
    openapiRequiredFields.add("nomNaissance");
    openapiRequiredFields.add("prenom");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("statutIne");
    openapiRequiredFields.add("temoinVerrouille");
  }

  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;
  @SerializedName(SERIALIZED_NAME_IDENTIFIANT_APPRENANT_PEGASE)
  @javax.annotation.Nonnull
  private String identifiantApprenantPegase;
  @SerializedName(SERIALIZED_NAME_NOM_NAISSANCE)
  @javax.annotation.Nonnull
  private String nomNaissance;
  @SerializedName(SERIALIZED_NAME_PRENOM)
  @javax.annotation.Nonnull
  private String prenom;
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nonnull
  private String email;
  @SerializedName(SERIALIZED_NAME_TELEPHONE_PORTABLE_PERSONNEL)
  @javax.annotation.Nullable
  private String telephonePortablePersonnel;
  @SerializedName(SERIALIZED_NAME_PROFIL_APPRENANT)
  @javax.annotation.Nullable
  private ProfilApprenant profilApprenant;
  @SerializedName(SERIALIZED_NAME_STATUT_INE)
  @javax.annotation.Nonnull
  private StatutIneRetour statutIne;
  @SerializedName(SERIALIZED_NAME_TEMOIN_VERROUILLE)
  @javax.annotation.Nonnull
  private Boolean temoinVerrouille;

  public IdentiteImmatriculeeDetail() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentiteImmatriculeeDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentiteImmatriculeeDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentiteImmatriculeeDetail is not found in the empty JSON string", IdentiteImmatriculeeDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentiteImmatriculeeDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentiteImmatriculeeDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IdentiteImmatriculeeDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("identifiantApprenantPegase").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identifiantApprenantPegase` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identifiantApprenantPegase").toString()));
      }
      if (!jsonObj.get("nomNaissance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nomNaissance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nomNaissance").toString()));
      }
      if (!jsonObj.get("prenom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prenom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prenom").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("telephonePortablePersonnel") != null && !jsonObj.get("telephonePortablePersonnel").isJsonNull()) && !jsonObj.get("telephonePortablePersonnel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telephonePortablePersonnel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telephonePortablePersonnel").toString()));
      }
      // validate the optional field `profilApprenant`
      if (jsonObj.get("profilApprenant") != null && !jsonObj.get("profilApprenant").isJsonNull()) {
        ProfilApprenant.validateJsonElement(jsonObj.get("profilApprenant"));
      }
      // validate the required field `statutIne`
      StatutIneRetour.validateJsonElement(jsonObj.get("statutIne"));
  }

  /**
   * Create an instance of IdentiteImmatriculeeDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentiteImmatriculeeDetail
   * @throws IOException if the JSON string is invalid with respect to IdentiteImmatriculeeDetail
   */
  public static IdentiteImmatriculeeDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentiteImmatriculeeDetail.class);
  }

  public IdentiteImmatriculeeDetail id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Identifiant de ressource
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }

  public IdentiteImmatriculeeDetail identifiantApprenantPegase(@javax.annotation.Nonnull String identifiantApprenantPegase) {
    this.identifiantApprenantPegase = identifiantApprenantPegase;
    return this;
  }

  /**
   * Identifiant Pégase d&#39;un apprenant
   * @return identifiantApprenantPegase
   */
  @javax.annotation.Nonnull
  public String getIdentifiantApprenantPegase() {
    return identifiantApprenantPegase;
  }

  public void setIdentifiantApprenantPegase(@javax.annotation.Nonnull String identifiantApprenantPegase) {
    this.identifiantApprenantPegase = identifiantApprenantPegase;
  }

  public IdentiteImmatriculeeDetail nomNaissance(@javax.annotation.Nonnull String nomNaissance) {
    this.nomNaissance = nomNaissance;
    return this;
  }

  /**
   * Nom de naissance de la personne
   * @return nomNaissance
   */
  @javax.annotation.Nonnull
  public String getNomNaissance() {
    return nomNaissance;
  }

  public void setNomNaissance(@javax.annotation.Nonnull String nomNaissance) {
    this.nomNaissance = nomNaissance;
  }

  public IdentiteImmatriculeeDetail prenom(@javax.annotation.Nonnull String prenom) {
    this.prenom = prenom;
    return this;
  }

  /**
   * Prénom de la personne
   * @return prenom
   */
  @javax.annotation.Nonnull
  public String getPrenom() {
    return prenom;
  }

  public void setPrenom(@javax.annotation.Nonnull String prenom) {
    this.prenom = prenom;
  }

  public IdentiteImmatriculeeDetail email(@javax.annotation.Nonnull String email) {
    this.email = email;
    return this;
  }

  /**
   * Adresse électronique (Adresse email)
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nonnull String email) {
    this.email = email;
  }

  public IdentiteImmatriculeeDetail telephonePortablePersonnel(@javax.annotation.Nullable String telephonePortablePersonnel) {
    this.telephonePortablePersonnel = telephonePortablePersonnel;
    return this;
  }

  /**
   * Numéro de téléphone
   * @return telephonePortablePersonnel
   */
  @javax.annotation.Nullable
  public String getTelephonePortablePersonnel() {
    return telephonePortablePersonnel;
  }

  public void setTelephonePortablePersonnel(@javax.annotation.Nullable String telephonePortablePersonnel) {
    this.telephonePortablePersonnel = telephonePortablePersonnel;
  }

  public IdentiteImmatriculeeDetail profilApprenant(@javax.annotation.Nullable ProfilApprenant profilApprenant) {
    this.profilApprenant = profilApprenant;
    return this;
  }

  /**
   * Get profilApprenant
   * @return profilApprenant
   */
  @javax.annotation.Nullable
  public ProfilApprenant getProfilApprenant() {
    return profilApprenant;
  }

  public void setProfilApprenant(@javax.annotation.Nullable ProfilApprenant profilApprenant) {
    this.profilApprenant = profilApprenant;
  }

  public IdentiteImmatriculeeDetail statutIne(@javax.annotation.Nonnull StatutIneRetour statutIne) {
    this.statutIne = statutIne;
    return this;
  }

  /**
   * Get statutIne
   * @return statutIne
   */
  @javax.annotation.Nonnull
  public StatutIneRetour getStatutIne() {
    return statutIne;
  }

  public void setStatutIne(@javax.annotation.Nonnull StatutIneRetour statutIne) {
    this.statutIne = statutIne;
  }

  public IdentiteImmatriculeeDetail temoinVerrouille(@javax.annotation.Nonnull Boolean temoinVerrouille) {
    this.temoinVerrouille = temoinVerrouille;
    return this;
  }

  /**
   * Témoin indiquant si l&#39;identité est verrouillée. Si l&#39;identité est verrouillée, les modifications ne sont pas possibles car un dossier d&#39;inscription est en cours pour cette identité
   * @return temoinVerrouille
   */
  @javax.annotation.Nonnull
  public Boolean getTemoinVerrouille() {
    return temoinVerrouille;
  }

  public void setTemoinVerrouille(@javax.annotation.Nonnull Boolean temoinVerrouille) {
    this.temoinVerrouille = temoinVerrouille;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentiteImmatriculeeDetail identiteImmatriculeeDetail = (IdentiteImmatriculeeDetail) o;
    return Objects.equals(this.id, identiteImmatriculeeDetail.id) &&
        Objects.equals(this.identifiantApprenantPegase, identiteImmatriculeeDetail.identifiantApprenantPegase) &&
        Objects.equals(this.nomNaissance, identiteImmatriculeeDetail.nomNaissance) &&
        Objects.equals(this.prenom, identiteImmatriculeeDetail.prenom) &&
        Objects.equals(this.email, identiteImmatriculeeDetail.email) &&
        Objects.equals(this.telephonePortablePersonnel, identiteImmatriculeeDetail.telephonePortablePersonnel) &&
        Objects.equals(this.profilApprenant, identiteImmatriculeeDetail.profilApprenant) &&
        Objects.equals(this.statutIne, identiteImmatriculeeDetail.statutIne) &&
        Objects.equals(this.temoinVerrouille, identiteImmatriculeeDetail.temoinVerrouille);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, identifiantApprenantPegase, nomNaissance, prenom, email, telephonePortablePersonnel, profilApprenant, statutIne, temoinVerrouille);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentiteImmatriculeeDetail {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    identifiantApprenantPegase: ").append(toIndentedString(identifiantApprenantPegase)).append("\n");
    sb.append("    nomNaissance: ").append(toIndentedString(nomNaissance)).append("\n");
    sb.append("    prenom: ").append(toIndentedString(prenom)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    telephonePortablePersonnel: ").append(toIndentedString(telephonePortablePersonnel)).append("\n");
    sb.append("    profilApprenant: ").append(toIndentedString(profilApprenant)).append("\n");
    sb.append("    statutIne: ").append(toIndentedString(statutIne)).append("\n");
    sb.append("    temoinVerrouille: ").append(toIndentedString(temoinVerrouille)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of IdentiteImmatriculeeDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentiteImmatriculeeDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentiteImmatriculeeDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentiteImmatriculeeDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentiteImmatriculeeDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentiteImmatriculeeDetail>() {
           @Override
           public void write(JsonWriter out, IdentiteImmatriculeeDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentiteImmatriculeeDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

