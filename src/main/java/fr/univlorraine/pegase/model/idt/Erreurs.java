/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.idt;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.idt.Erreur;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * Erreurs
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:11:42.659557700+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class Erreurs {
  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  public static final String SERIALIZED_NAME_VERSION = "version";
  public static final String SERIALIZED_NAME_PATH = "path";
  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  public static final String SERIALIZED_NAME_ERRORS = "errors";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correlationId");
    openapiFields.add("timestamp");
    openapiFields.add("version");
    openapiFields.add("path");
    openapiFields.add("statusCode");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("correlationId");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("path");
    openapiRequiredFields.add("statusCode");
    openapiRequiredFields.add("errors");
  }

  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  @javax.annotation.Nonnull
  private String correlationId;
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  @javax.annotation.Nonnull
  private Date timestamp;
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private String version;
  @SerializedName(SERIALIZED_NAME_PATH)
  @javax.annotation.Nonnull
  private String path;
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  @javax.annotation.Nonnull
  private String statusCode;
  @SerializedName(SERIALIZED_NAME_ERRORS)
  @javax.annotation.Nonnull
  private List<Erreur> errors = new ArrayList<>();

  public Erreurs() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Erreurs
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Erreurs.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Erreurs is not found in the empty JSON string", Erreurs.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Erreurs.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Erreurs` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Erreurs.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if (!jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("statusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusCode").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }

      JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
      // validate the required field `errors` (array)
      for (int i = 0; i < jsonArrayerrors.size(); i++) {
        Erreur.validateJsonElement(jsonArrayerrors.get(i));
      };
  }

  /**
   * Create an instance of Erreurs given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Erreurs
   * @throws IOException if the JSON string is invalid with respect to Erreurs
   */
  public static Erreurs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Erreurs.class);
  }

  public Erreurs correlationId(@javax.annotation.Nonnull String correlationId) {
    this.correlationId = correlationId;
    return this;
  }

  /**
   * Permet d&#39;identifier de manière unique l&#39;erreur côté serveur.  A titre de debugging.
   * @return correlationId
   */
  @javax.annotation.Nonnull
  public String getCorrelationId() {
    return correlationId;
  }

  public void setCorrelationId(@javax.annotation.Nonnull String correlationId) {
    this.correlationId = correlationId;
  }

  public Erreurs timestamp(@javax.annotation.Nonnull Date timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp auque à lieu l&#39;erreur.  A titre de debugging.
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public Date getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(@javax.annotation.Nonnull Date timestamp) {
    this.timestamp = timestamp;
  }

  public Erreurs version(@javax.annotation.Nonnull String version) {
    this.version = version;
    return this;
  }

  /**
   * Version de l&#39;application.  A titre de debugging.
   * @return version
   */
  @javax.annotation.Nonnull
  public String getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull String version) {
    this.version = version;
  }

  public Erreurs path(@javax.annotation.Nonnull String path) {
    this.path = path;
    return this;
  }

  /**
   * URI sur lequel le service a été applelé (i.e /api/monservice).  A titre de debugging.
   * @return path
   */
  @javax.annotation.Nonnull
  public String getPath() {
    return path;
  }

  public void setPath(@javax.annotation.Nonnull String path) {
    this.path = path;
  }

  public Erreurs statusCode(@javax.annotation.Nonnull String statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Statuscode HTTP.  A titre de debugging
   * @return statusCode
   */
  @javax.annotation.Nonnull
  public String getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(@javax.annotation.Nonnull String statusCode) {
    this.statusCode = statusCode;
  }

  public Erreurs errors(@javax.annotation.Nonnull List<Erreur> errors) {
    this.errors = errors;
    return this;
  }

  public Erreurs addErrorsItem(Erreur errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nonnull
  public List<Erreur> getErrors() {
    return errors;
  }

  public void setErrors(@javax.annotation.Nonnull List<Erreur> errors) {
    this.errors = errors;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Erreurs erreurs = (Erreurs) o;
    return Objects.equals(this.correlationId, erreurs.correlationId) &&
        Objects.equals(this.timestamp, erreurs.timestamp) &&
        Objects.equals(this.version, erreurs.version) &&
        Objects.equals(this.path, erreurs.path) &&
        Objects.equals(this.statusCode, erreurs.statusCode) &&
        Objects.equals(this.errors, erreurs.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correlationId, timestamp, version, path, statusCode, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Erreurs {\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of Erreurs to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Erreurs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Erreurs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Erreurs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Erreurs.class));

       return (TypeAdapter<T>) new TypeAdapter<Erreurs>() {
           @Override
           public void write(JsonWriter out, Erreurs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Erreurs read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

