/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.idt;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.idt.CommunesNaissance;
import fr.univlorraine.pegase.model.idt.PaysEtNationalites;
import fr.univlorraine.pegase.model.idt.TypeSexe;
import java.io.IOException;
import java.util.Arrays;
import java.util.Date;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * EtatCivil
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:11:42.659557700+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class EtatCivil {
  public static final String SERIALIZED_NAME_SEXE = "sexe";
  public static final String SERIALIZED_NAME_DATE_NAISSANCE = "dateNaissance";
  public static final String SERIALIZED_NAME_NOM_USAGE = "nomUsage";
  public static final String SERIALIZED_NAME_PRENOM2 = "prenom2";
  public static final String SERIALIZED_NAME_PRENOM3 = "prenom3";
  public static final String SERIALIZED_NAME_COMMUNE_NAISSANCE = "communeNaissance";
  public static final String SERIALIZED_NAME_LIBELLE_COMMUNE_NAISSANCE_ETRANGER = "libelleCommuneNaissanceEtranger";
  public static final String SERIALIZED_NAME_PAYS_NAISSANCE = "paysNaissance";
  public static final String SERIALIZED_NAME_NATIONALITE = "nationalite";
  public static final String SERIALIZED_NAME_NATIONALITE2 = "nationalite2";
  public static final String SERIALIZED_NAME_DATE_OBTENTION_NATIONALITE2 = "dateObtentionNationalite2";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sexe");
    openapiFields.add("dateNaissance");
    openapiFields.add("nomUsage");
    openapiFields.add("prenom2");
    openapiFields.add("prenom3");
    openapiFields.add("communeNaissance");
    openapiFields.add("libelleCommuneNaissanceEtranger");
    openapiFields.add("paysNaissance");
    openapiFields.add("nationalite");
    openapiFields.add("nationalite2");
    openapiFields.add("dateObtentionNationalite2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sexe");
    openapiRequiredFields.add("dateNaissance");
  }

  @SerializedName(SERIALIZED_NAME_SEXE)
  @javax.annotation.Nonnull
  private TypeSexe sexe;
  @SerializedName(SERIALIZED_NAME_DATE_NAISSANCE)
  @javax.annotation.Nonnull
  private Date dateNaissance;
  @SerializedName(SERIALIZED_NAME_NOM_USAGE)
  @javax.annotation.Nullable
  private String nomUsage;
  @SerializedName(SERIALIZED_NAME_PRENOM2)
  @javax.annotation.Nullable
  private String prenom2;
  @SerializedName(SERIALIZED_NAME_PRENOM3)
  @javax.annotation.Nullable
  private String prenom3;
  @SerializedName(SERIALIZED_NAME_COMMUNE_NAISSANCE)
  @javax.annotation.Nullable
  private CommunesNaissance communeNaissance;
  @SerializedName(SERIALIZED_NAME_LIBELLE_COMMUNE_NAISSANCE_ETRANGER)
  @javax.annotation.Nullable
  private String libelleCommuneNaissanceEtranger;
  @SerializedName(SERIALIZED_NAME_PAYS_NAISSANCE)
  @javax.annotation.Nullable
  private PaysEtNationalites paysNaissance;
  @SerializedName(SERIALIZED_NAME_NATIONALITE)
  @javax.annotation.Nullable
  private PaysEtNationalites nationalite;
  @SerializedName(SERIALIZED_NAME_NATIONALITE2)
  @javax.annotation.Nullable
  private PaysEtNationalites nationalite2;
  @SerializedName(SERIALIZED_NAME_DATE_OBTENTION_NATIONALITE2)
  @javax.annotation.Nullable
  private Date dateObtentionNationalite2;

  public EtatCivil() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EtatCivil
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EtatCivil.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EtatCivil is not found in the empty JSON string", EtatCivil.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EtatCivil.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EtatCivil` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EtatCivil.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `sexe`
      TypeSexe.validateJsonElement(jsonObj.get("sexe"));
      if ((jsonObj.get("nomUsage") != null && !jsonObj.get("nomUsage").isJsonNull()) && !jsonObj.get("nomUsage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nomUsage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nomUsage").toString()));
      }
      if ((jsonObj.get("prenom2") != null && !jsonObj.get("prenom2").isJsonNull()) && !jsonObj.get("prenom2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prenom2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prenom2").toString()));
      }
      if ((jsonObj.get("prenom3") != null && !jsonObj.get("prenom3").isJsonNull()) && !jsonObj.get("prenom3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prenom3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prenom3").toString()));
      }
      // validate the optional field `communeNaissance`
      if (jsonObj.get("communeNaissance") != null && !jsonObj.get("communeNaissance").isJsonNull()) {
        CommunesNaissance.validateJsonElement(jsonObj.get("communeNaissance"));
      }
      if ((jsonObj.get("libelleCommuneNaissanceEtranger") != null && !jsonObj.get("libelleCommuneNaissanceEtranger").isJsonNull()) && !jsonObj.get("libelleCommuneNaissanceEtranger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `libelleCommuneNaissanceEtranger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("libelleCommuneNaissanceEtranger").toString()));
      }
      // validate the optional field `paysNaissance`
      if (jsonObj.get("paysNaissance") != null && !jsonObj.get("paysNaissance").isJsonNull()) {
        PaysEtNationalites.validateJsonElement(jsonObj.get("paysNaissance"));
      }
      // validate the optional field `nationalite`
      if (jsonObj.get("nationalite") != null && !jsonObj.get("nationalite").isJsonNull()) {
        PaysEtNationalites.validateJsonElement(jsonObj.get("nationalite"));
      }
      // validate the optional field `nationalite2`
      if (jsonObj.get("nationalite2") != null && !jsonObj.get("nationalite2").isJsonNull()) {
        PaysEtNationalites.validateJsonElement(jsonObj.get("nationalite2"));
      }
  }

  /**
   * Create an instance of EtatCivil given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EtatCivil
   * @throws IOException if the JSON string is invalid with respect to EtatCivil
   */
  public static EtatCivil fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EtatCivil.class);
  }

  public EtatCivil sexe(@javax.annotation.Nonnull TypeSexe sexe) {
    this.sexe = sexe;
    return this;
  }

  /**
   * Get sexe
   * @return sexe
   */
  @javax.annotation.Nonnull
  public TypeSexe getSexe() {
    return sexe;
  }

  public void setSexe(@javax.annotation.Nonnull TypeSexe sexe) {
    this.sexe = sexe;
  }

  public EtatCivil dateNaissance(@javax.annotation.Nonnull Date dateNaissance) {
    this.dateNaissance = dateNaissance;
    return this;
  }

  /**
   * Date de naissance
   * @return dateNaissance
   */
  @javax.annotation.Nonnull
  public Date getDateNaissance() {
    return dateNaissance;
  }

  public void setDateNaissance(@javax.annotation.Nonnull Date dateNaissance) {
    this.dateNaissance = dateNaissance;
  }

  public EtatCivil nomUsage(@javax.annotation.Nullable String nomUsage) {
    this.nomUsage = nomUsage;
    return this;
  }

  /**
   * Nom d&#39;usage
   * @return nomUsage
   */
  @javax.annotation.Nullable
  public String getNomUsage() {
    return nomUsage;
  }

  public void setNomUsage(@javax.annotation.Nullable String nomUsage) {
    this.nomUsage = nomUsage;
  }

  public EtatCivil prenom2(@javax.annotation.Nullable String prenom2) {
    this.prenom2 = prenom2;
    return this;
  }

  /**
   * Deuxième prénom
   * @return prenom2
   */
  @javax.annotation.Nullable
  public String getPrenom2() {
    return prenom2;
  }

  public void setPrenom2(@javax.annotation.Nullable String prenom2) {
    this.prenom2 = prenom2;
  }

  public EtatCivil prenom3(@javax.annotation.Nullable String prenom3) {
    this.prenom3 = prenom3;
    return this;
  }

  /**
   * Troisième prénom
   * @return prenom3
   */
  @javax.annotation.Nullable
  public String getPrenom3() {
    return prenom3;
  }

  public void setPrenom3(@javax.annotation.Nullable String prenom3) {
    this.prenom3 = prenom3;
  }

  public EtatCivil communeNaissance(@javax.annotation.Nullable CommunesNaissance communeNaissance) {
    this.communeNaissance = communeNaissance;
    return this;
  }

  /**
   * Get communeNaissance
   * @return communeNaissance
   */
  @javax.annotation.Nullable
  public CommunesNaissance getCommuneNaissance() {
    return communeNaissance;
  }

  public void setCommuneNaissance(@javax.annotation.Nullable CommunesNaissance communeNaissance) {
    this.communeNaissance = communeNaissance;
  }

  public EtatCivil libelleCommuneNaissanceEtranger(@javax.annotation.Nullable String libelleCommuneNaissanceEtranger) {
    this.libelleCommuneNaissanceEtranger = libelleCommuneNaissanceEtranger;
    return this;
  }

  /**
   * Libellé de la commune de naissance à l&#39;étranger
   * @return libelleCommuneNaissanceEtranger
   */
  @javax.annotation.Nullable
  public String getLibelleCommuneNaissanceEtranger() {
    return libelleCommuneNaissanceEtranger;
  }

  public void setLibelleCommuneNaissanceEtranger(@javax.annotation.Nullable String libelleCommuneNaissanceEtranger) {
    this.libelleCommuneNaissanceEtranger = libelleCommuneNaissanceEtranger;
  }

  public EtatCivil paysNaissance(@javax.annotation.Nullable PaysEtNationalites paysNaissance) {
    this.paysNaissance = paysNaissance;
    return this;
  }

  /**
   * Get paysNaissance
   * @return paysNaissance
   */
  @javax.annotation.Nullable
  public PaysEtNationalites getPaysNaissance() {
    return paysNaissance;
  }

  public void setPaysNaissance(@javax.annotation.Nullable PaysEtNationalites paysNaissance) {
    this.paysNaissance = paysNaissance;
  }

  public EtatCivil nationalite(@javax.annotation.Nullable PaysEtNationalites nationalite) {
    this.nationalite = nationalite;
    return this;
  }

  /**
   * Get nationalite
   * @return nationalite
   */
  @javax.annotation.Nullable
  public PaysEtNationalites getNationalite() {
    return nationalite;
  }

  public void setNationalite(@javax.annotation.Nullable PaysEtNationalites nationalite) {
    this.nationalite = nationalite;
  }

  public EtatCivil nationalite2(@javax.annotation.Nullable PaysEtNationalites nationalite2) {
    this.nationalite2 = nationalite2;
    return this;
  }

  /**
   * Get nationalite2
   * @return nationalite2
   */
  @javax.annotation.Nullable
  public PaysEtNationalites getNationalite2() {
    return nationalite2;
  }

  public void setNationalite2(@javax.annotation.Nullable PaysEtNationalites nationalite2) {
    this.nationalite2 = nationalite2;
  }

  public EtatCivil dateObtentionNationalite2(@javax.annotation.Nullable Date dateObtentionNationalite2) {
    this.dateObtentionNationalite2 = dateObtentionNationalite2;
    return this;
  }

  /**
   * Date d&#39;obtention de la deuxième nationalité
   * @return dateObtentionNationalite2
   */
  @javax.annotation.Nullable
  public Date getDateObtentionNationalite2() {
    return dateObtentionNationalite2;
  }

  public void setDateObtentionNationalite2(@javax.annotation.Nullable Date dateObtentionNationalite2) {
    this.dateObtentionNationalite2 = dateObtentionNationalite2;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EtatCivil etatCivil = (EtatCivil) o;
    return Objects.equals(this.sexe, etatCivil.sexe) &&
        Objects.equals(this.dateNaissance, etatCivil.dateNaissance) &&
        Objects.equals(this.nomUsage, etatCivil.nomUsage) &&
        Objects.equals(this.prenom2, etatCivil.prenom2) &&
        Objects.equals(this.prenom3, etatCivil.prenom3) &&
        Objects.equals(this.communeNaissance, etatCivil.communeNaissance) &&
        Objects.equals(this.libelleCommuneNaissanceEtranger, etatCivil.libelleCommuneNaissanceEtranger) &&
        Objects.equals(this.paysNaissance, etatCivil.paysNaissance) &&
        Objects.equals(this.nationalite, etatCivil.nationalite) &&
        Objects.equals(this.nationalite2, etatCivil.nationalite2) &&
        Objects.equals(this.dateObtentionNationalite2, etatCivil.dateObtentionNationalite2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sexe, dateNaissance, nomUsage, prenom2, prenom3, communeNaissance, libelleCommuneNaissanceEtranger, paysNaissance, nationalite, nationalite2, dateObtentionNationalite2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EtatCivil {\n");
    sb.append("    sexe: ").append(toIndentedString(sexe)).append("\n");
    sb.append("    dateNaissance: ").append(toIndentedString(dateNaissance)).append("\n");
    sb.append("    nomUsage: ").append(toIndentedString(nomUsage)).append("\n");
    sb.append("    prenom2: ").append(toIndentedString(prenom2)).append("\n");
    sb.append("    prenom3: ").append(toIndentedString(prenom3)).append("\n");
    sb.append("    communeNaissance: ").append(toIndentedString(communeNaissance)).append("\n");
    sb.append("    libelleCommuneNaissanceEtranger: ").append(toIndentedString(libelleCommuneNaissanceEtranger)).append("\n");
    sb.append("    paysNaissance: ").append(toIndentedString(paysNaissance)).append("\n");
    sb.append("    nationalite: ").append(toIndentedString(nationalite)).append("\n");
    sb.append("    nationalite2: ").append(toIndentedString(nationalite2)).append("\n");
    sb.append("    dateObtentionNationalite2: ").append(toIndentedString(dateObtentionNationalite2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of EtatCivil to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EtatCivil.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EtatCivil' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EtatCivil> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EtatCivil.class));

       return (TypeAdapter<T>) new TypeAdapter<EtatCivil>() {
           @Override
           public void write(JsonWriter out, EtatCivil value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EtatCivil read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

