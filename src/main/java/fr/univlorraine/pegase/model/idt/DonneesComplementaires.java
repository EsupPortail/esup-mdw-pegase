/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.model.idt;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.model.idt.CategorieSocioProfessionnelle;
import fr.univlorraine.pegase.model.idt.SituationsFamiliales;
import fr.univlorraine.pegase.model.idt.SituationsMilitaires;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import fr.univlorraine.pegase.api.JSON;

/**
 * DonneesComplementaires
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-24T16:11:42.659557700+02:00[Europe/Paris]", comments = "Generator version: 7.11.0")
public class DonneesComplementaires {
  public static final String SERIALIZED_NAME_SITUATION_MILITAIRE = "situationMilitaire";
  public static final String SERIALIZED_NAME_SITUATION_FAMILIALE = "situationFamiliale";
  public static final String SERIALIZED_NAME_NOMBRE_ENFANTS = "nombreEnfants";
  public static final String SERIALIZED_NAME_CATEGORIE_SOCIO_PROFESSIONNELLE = "categorieSocioProfessionnelle";
  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("situationMilitaire");
    openapiFields.add("situationFamiliale");
    openapiFields.add("nombreEnfants");
    openapiFields.add("categorieSocioProfessionnelle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  @SerializedName(SERIALIZED_NAME_SITUATION_MILITAIRE)
  @javax.annotation.Nullable
  private SituationsMilitaires situationMilitaire;
  @SerializedName(SERIALIZED_NAME_SITUATION_FAMILIALE)
  @javax.annotation.Nullable
  private SituationsFamiliales situationFamiliale;
  @SerializedName(SERIALIZED_NAME_NOMBRE_ENFANTS)
  @javax.annotation.Nullable
  private BigDecimal nombreEnfants;
  @SerializedName(SERIALIZED_NAME_CATEGORIE_SOCIO_PROFESSIONNELLE)
  @javax.annotation.Nullable
  private CategorieSocioProfessionnelle categorieSocioProfessionnelle;

  public DonneesComplementaires() {
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DonneesComplementaires
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DonneesComplementaires.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DonneesComplementaires is not found in the empty JSON string", DonneesComplementaires.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DonneesComplementaires.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DonneesComplementaires` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `situationMilitaire`
      if (jsonObj.get("situationMilitaire") != null && !jsonObj.get("situationMilitaire").isJsonNull()) {
        SituationsMilitaires.validateJsonElement(jsonObj.get("situationMilitaire"));
      }
      // validate the optional field `situationFamiliale`
      if (jsonObj.get("situationFamiliale") != null && !jsonObj.get("situationFamiliale").isJsonNull()) {
        SituationsFamiliales.validateJsonElement(jsonObj.get("situationFamiliale"));
      }
      // validate the optional field `categorieSocioProfessionnelle`
      if (jsonObj.get("categorieSocioProfessionnelle") != null && !jsonObj.get("categorieSocioProfessionnelle").isJsonNull()) {
        CategorieSocioProfessionnelle.validateJsonElement(jsonObj.get("categorieSocioProfessionnelle"));
      }
  }

  /**
   * Create an instance of DonneesComplementaires given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DonneesComplementaires
   * @throws IOException if the JSON string is invalid with respect to DonneesComplementaires
   */
  public static DonneesComplementaires fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DonneesComplementaires.class);
  }

  public DonneesComplementaires situationMilitaire(@javax.annotation.Nullable SituationsMilitaires situationMilitaire) {
    this.situationMilitaire = situationMilitaire;
    return this;
  }

  /**
   * Get situationMilitaire
   * @return situationMilitaire
   */
  @javax.annotation.Nullable
  public SituationsMilitaires getSituationMilitaire() {
    return situationMilitaire;
  }

  public void setSituationMilitaire(@javax.annotation.Nullable SituationsMilitaires situationMilitaire) {
    this.situationMilitaire = situationMilitaire;
  }

  public DonneesComplementaires situationFamiliale(@javax.annotation.Nullable SituationsFamiliales situationFamiliale) {
    this.situationFamiliale = situationFamiliale;
    return this;
  }

  /**
   * Get situationFamiliale
   * @return situationFamiliale
   */
  @javax.annotation.Nullable
  public SituationsFamiliales getSituationFamiliale() {
    return situationFamiliale;
  }

  public void setSituationFamiliale(@javax.annotation.Nullable SituationsFamiliales situationFamiliale) {
    this.situationFamiliale = situationFamiliale;
  }

  public DonneesComplementaires nombreEnfants(@javax.annotation.Nullable BigDecimal nombreEnfants) {
    this.nombreEnfants = nombreEnfants;
    return this;
  }

  /**
   * Nombre d&#39;enfants de la personne
   * @return nombreEnfants
   */
  @javax.annotation.Nullable
  public BigDecimal getNombreEnfants() {
    return nombreEnfants;
  }

  public void setNombreEnfants(@javax.annotation.Nullable BigDecimal nombreEnfants) {
    this.nombreEnfants = nombreEnfants;
  }

  public DonneesComplementaires categorieSocioProfessionnelle(@javax.annotation.Nullable CategorieSocioProfessionnelle categorieSocioProfessionnelle) {
    this.categorieSocioProfessionnelle = categorieSocioProfessionnelle;
    return this;
  }

  /**
   * Get categorieSocioProfessionnelle
   * @return categorieSocioProfessionnelle
   */
  @javax.annotation.Nullable
  public CategorieSocioProfessionnelle getCategorieSocioProfessionnelle() {
    return categorieSocioProfessionnelle;
  }

  public void setCategorieSocioProfessionnelle(@javax.annotation.Nullable CategorieSocioProfessionnelle categorieSocioProfessionnelle) {
    this.categorieSocioProfessionnelle = categorieSocioProfessionnelle;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DonneesComplementaires donneesComplementaires = (DonneesComplementaires) o;
    return Objects.equals(this.situationMilitaire, donneesComplementaires.situationMilitaire) &&
        Objects.equals(this.situationFamiliale, donneesComplementaires.situationFamiliale) &&
        Objects.equals(this.nombreEnfants, donneesComplementaires.nombreEnfants) &&
        Objects.equals(this.categorieSocioProfessionnelle, donneesComplementaires.categorieSocioProfessionnelle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(situationMilitaire, situationFamiliale, nombreEnfants, categorieSocioProfessionnelle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DonneesComplementaires {\n");
    sb.append("    situationMilitaire: ").append(toIndentedString(situationMilitaire)).append("\n");
    sb.append("    situationFamiliale: ").append(toIndentedString(situationFamiliale)).append("\n");
    sb.append("    nombreEnfants: ").append(toIndentedString(nombreEnfants)).append("\n");
    sb.append("    categorieSocioProfessionnelle: ").append(toIndentedString(categorieSocioProfessionnelle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert an instance of DonneesComplementaires to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DonneesComplementaires.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DonneesComplementaires' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DonneesComplementaires> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DonneesComplementaires.class));

       return (TypeAdapter<T>) new TypeAdapter<DonneesComplementaires>() {
           @Override
           public void write(JsonWriter out, DonneesComplementaires value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DonneesComplementaires read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }
}

