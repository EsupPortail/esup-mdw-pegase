/*
 * PIECE Externe V1
 *  # Introduction  Liste l'ensemble des services et des opérations externes disponibles dans le module Piece  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.pieceext.api;

import fr.univlorraine.pegase.pieceext.invoker.ApiCallback;
import fr.univlorraine.pegase.pieceext.invoker.ApiClient;
import fr.univlorraine.pegase.pieceext.invoker.ApiException;
import fr.univlorraine.pegase.pieceext.invoker.ApiResponse;
import fr.univlorraine.pegase.pieceext.invoker.Configuration;
import fr.univlorraine.pegase.pieceext.invoker.Pair;
import fr.univlorraine.pegase.pieceext.invoker.ProgressRequestBody;
import fr.univlorraine.pegase.pieceext.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.pieceext.model.Cursus;
import fr.univlorraine.pegase.pieceext.model.DemandePieceElementResume;
import fr.univlorraine.pegase.pieceext.model.DepotsPieceElementsEpochResume;
import fr.univlorraine.pegase.pieceext.model.Erreurs;
import java.io.File;
import fr.univlorraine.pegase.pieceext.model.Pageable;
import fr.univlorraine.pegase.pieceext.model.StatutGlobalPieceParInscription;
import fr.univlorraine.pegase.pieceext.model.StatutGlobalPieceParInscriptionCommand;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PiecesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PiecesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PiecesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listerStatutGlobalPieceParInscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param statutGlobalPieceParInscriptionCommand La liste des inscriptions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> la liste des statut facture par inscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerStatutGlobalPieceParInscriptionCall(String codeStructure, List<StatutGlobalPieceParInscriptionCommand> statutGlobalPieceParInscriptionCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = statutGlobalPieceParInscriptionCommand;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/depotPiece/statutGlobalPieceParInscription"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerStatutGlobalPieceParInscriptionValidateBeforeCall(String codeStructure, List<StatutGlobalPieceParInscriptionCommand> statutGlobalPieceParInscriptionCommand, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerStatutGlobalPieceParInscription(Async)");
        }
        
        // verify the required parameter 'statutGlobalPieceParInscriptionCommand' is set
        if (statutGlobalPieceParInscriptionCommand == null) {
            throw new ApiException("Missing the required parameter 'statutGlobalPieceParInscriptionCommand' when calling listerStatutGlobalPieceParInscription(Async)");
        }
        

        okhttp3.Call localVarCall = listerStatutGlobalPieceParInscriptionCall(codeStructure, statutGlobalPieceParInscriptionCommand, _callback);
        return localVarCall;

    }

    /**
     * Liste le statut global des dépots de pièce par inscription
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param statutGlobalPieceParInscriptionCommand La liste des inscriptions (required)
     * @return List&lt;StatutGlobalPieceParInscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> la liste des statut facture par inscription </td><td>  -  </td></tr>
     </table>
     */
    public List<StatutGlobalPieceParInscription> listerStatutGlobalPieceParInscription(String codeStructure, List<StatutGlobalPieceParInscriptionCommand> statutGlobalPieceParInscriptionCommand) throws ApiException {
        ApiResponse<List<StatutGlobalPieceParInscription>> localVarResp = listerStatutGlobalPieceParInscriptionWithHttpInfo(codeStructure, statutGlobalPieceParInscriptionCommand);
        return localVarResp.getData();
    }

    /**
     * Liste le statut global des dépots de pièce par inscription
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param statutGlobalPieceParInscriptionCommand La liste des inscriptions (required)
     * @return ApiResponse&lt;List&lt;StatutGlobalPieceParInscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> la liste des statut facture par inscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StatutGlobalPieceParInscription>> listerStatutGlobalPieceParInscriptionWithHttpInfo(String codeStructure, List<StatutGlobalPieceParInscriptionCommand> statutGlobalPieceParInscriptionCommand) throws ApiException {
        okhttp3.Call localVarCall = listerStatutGlobalPieceParInscriptionValidateBeforeCall(codeStructure, statutGlobalPieceParInscriptionCommand, null);
        Type localVarReturnType = new TypeToken<List<StatutGlobalPieceParInscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste le statut global des dépots de pièce par inscription (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param statutGlobalPieceParInscriptionCommand La liste des inscriptions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> la liste des statut facture par inscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerStatutGlobalPieceParInscriptionAsync(String codeStructure, List<StatutGlobalPieceParInscriptionCommand> statutGlobalPieceParInscriptionCommand, final ApiCallback<List<StatutGlobalPieceParInscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerStatutGlobalPieceParInscriptionValidateBeforeCall(codeStructure, statutGlobalPieceParInscriptionCommand, _callback);
        Type localVarReturnType = new TypeToken<List<StatutGlobalPieceParInscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rechercherDemandesPieces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param recherche texte recherché dans le libellé ou le code de la pièce justificative (optional)
     * @param periodeId id de la période (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des résumés de demandes de pièces </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rechercherDemandesPiecesCall(String codeStructure, Pageable pageable, String recherche, String periodeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/pieces-justificatives"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        if (recherche != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recherche", recherche));
        }

        if (periodeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodeId", periodeId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rechercherDemandesPiecesValidateBeforeCall(String codeStructure, Pageable pageable, String recherche, String periodeId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling rechercherDemandesPieces(Async)");
        }
        

        okhttp3.Call localVarCall = rechercherDemandesPiecesCall(codeStructure, pageable, recherche, periodeId, _callback);
        return localVarCall;

    }

    /**
     * Rechercher les résumés de demandes de pièces d&#39;un établissement
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param recherche texte recherché dans le libellé ou le code de la pièce justificative (optional)
     * @param periodeId id de la période (optional)
     * @return List&lt;DemandePieceElementResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des résumés de demandes de pièces </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public List<DemandePieceElementResume> rechercherDemandesPieces(String codeStructure, Pageable pageable, String recherche, String periodeId) throws ApiException {
        ApiResponse<List<DemandePieceElementResume>> localVarResp = rechercherDemandesPiecesWithHttpInfo(codeStructure, pageable, recherche, periodeId);
        return localVarResp.getData();
    }

    /**
     * Rechercher les résumés de demandes de pièces d&#39;un établissement
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param recherche texte recherché dans le libellé ou le code de la pièce justificative (optional)
     * @param periodeId id de la période (optional)
     * @return ApiResponse&lt;List&lt;DemandePieceElementResume&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des résumés de demandes de pièces </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DemandePieceElementResume>> rechercherDemandesPiecesWithHttpInfo(String codeStructure, Pageable pageable, String recherche, String periodeId) throws ApiException {
        okhttp3.Call localVarCall = rechercherDemandesPiecesValidateBeforeCall(codeStructure, pageable, recherche, periodeId, null);
        Type localVarReturnType = new TypeToken<List<DemandePieceElementResume>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rechercher les résumés de demandes de pièces d&#39;un établissement (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param recherche texte recherché dans le libellé ou le code de la pièce justificative (optional)
     * @param periodeId id de la période (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des résumés de demandes de pièces </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rechercherDemandesPiecesAsync(String codeStructure, Pageable pageable, String recherche, String periodeId, final ApiCallback<List<DemandePieceElementResume>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rechercherDemandesPiecesValidateBeforeCall(codeStructure, pageable, recherche, periodeId, _callback);
        Type localVarReturnType = new TypeToken<List<DemandePieceElementResume>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recupererPiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant code de l&#39;apprenant (required)
     * @param codePiece code de la pièce justificative (required)
     * @param codeChemin code du chemin de l&#39;inscription (required)
     * @param codePeriode code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contenu du dépôt de pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererPieceCall(String codeStructure, String codeApprenant, String codePiece, String codeChemin, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/codeApprenant/{codeApprenant}/depotPiece/{codePiece}/codePeriode/{codePeriode}/codeChemin/{codeChemin}/contenu"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()))
            .replaceAll("\\{" + "codeChemin" + "\\}", localVarApiClient.escapeString(codeChemin.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png", "image/jpg", "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recupererPieceValidateBeforeCall(String codeStructure, String codeApprenant, String codePiece, String codeChemin, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling recupererPiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling recupererPiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling recupererPiece(Async)");
        }
        
        // verify the required parameter 'codeChemin' is set
        if (codeChemin == null) {
            throw new ApiException("Missing the required parameter 'codeChemin' when calling recupererPiece(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling recupererPiece(Async)");
        }
        

        okhttp3.Call localVarCall = recupererPieceCall(codeStructure, codeApprenant, codePiece, codeChemin, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Récuperer un dépôt
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant code de l&#39;apprenant (required)
     * @param codePiece code de la pièce justificative (required)
     * @param codeChemin code du chemin de l&#39;inscription (required)
     * @param codePeriode code de la période (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contenu du dépôt de pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File recupererPiece(String codeStructure, String codeApprenant, String codePiece, String codeChemin, String codePeriode) throws ApiException {
        ApiResponse<File> localVarResp = recupererPieceWithHttpInfo(codeStructure, codeApprenant, codePiece, codeChemin, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Récuperer un dépôt
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant code de l&#39;apprenant (required)
     * @param codePiece code de la pièce justificative (required)
     * @param codeChemin code du chemin de l&#39;inscription (required)
     * @param codePeriode code de la période (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contenu du dépôt de pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> recupererPieceWithHttpInfo(String codeStructure, String codeApprenant, String codePiece, String codeChemin, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = recupererPieceValidateBeforeCall(codeStructure, codeApprenant, codePiece, codeChemin, codePeriode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récuperer un dépôt (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant code de l&#39;apprenant (required)
     * @param codePiece code de la pièce justificative (required)
     * @param codeChemin code du chemin de l&#39;inscription (required)
     * @param codePeriode code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Contenu du dépôt de pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererPieceAsync(String codeStructure, String codeApprenant, String codePiece, String codeChemin, String codePeriode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = recupererPieceValidateBeforeCall(codeStructure, codeApprenant, codePiece, codeChemin, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recupererPiecesEtDepots
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param cursus Le profil de l&#39;apprenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des pièces demandées à l&#39;apprenant avec leur statut </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererPiecesEtDepotsCall(String codeStructure, String codeApprenant, List<Cursus> cursus, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cursus;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/depotPiece/apprenant/{codeApprenant}/recupererDepots"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "json/application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recupererPiecesEtDepotsValidateBeforeCall(String codeStructure, String codeApprenant, List<Cursus> cursus, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling recupererPiecesEtDepots(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling recupererPiecesEtDepots(Async)");
        }
        
        // verify the required parameter 'cursus' is set
        if (cursus == null) {
            throw new ApiException("Missing the required parameter 'cursus' when calling recupererPiecesEtDepots(Async)");
        }
        

        okhttp3.Call localVarCall = recupererPiecesEtDepotsCall(codeStructure, codeApprenant, cursus, _callback);
        return localVarCall;

    }

    /**
     * Récupérer les pièces demandées à un apprenant avec leur statut de dépôt
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param cursus Le profil de l&#39;apprenant (required)
     * @return DepotsPieceElementsEpochResume
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des pièces demandées à l&#39;apprenant avec leur statut </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public DepotsPieceElementsEpochResume recupererPiecesEtDepots(String codeStructure, String codeApprenant, List<Cursus> cursus) throws ApiException {
        ApiResponse<DepotsPieceElementsEpochResume> localVarResp = recupererPiecesEtDepotsWithHttpInfo(codeStructure, codeApprenant, cursus);
        return localVarResp.getData();
    }

    /**
     * Récupérer les pièces demandées à un apprenant avec leur statut de dépôt
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param cursus Le profil de l&#39;apprenant (required)
     * @return ApiResponse&lt;DepotsPieceElementsEpochResume&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des pièces demandées à l&#39;apprenant avec leur statut </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DepotsPieceElementsEpochResume> recupererPiecesEtDepotsWithHttpInfo(String codeStructure, String codeApprenant, List<Cursus> cursus) throws ApiException {
        okhttp3.Call localVarCall = recupererPiecesEtDepotsValidateBeforeCall(codeStructure, codeApprenant, cursus, null);
        Type localVarReturnType = new TypeToken<DepotsPieceElementsEpochResume>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupérer les pièces demandées à un apprenant avec leur statut de dépôt (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param cursus Le profil de l&#39;apprenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des pièces demandées à l&#39;apprenant avec leur statut </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererPiecesEtDepotsAsync(String codeStructure, String codeApprenant, List<Cursus> cursus, final ApiCallback<DepotsPieceElementsEpochResume> _callback) throws ApiException {

        okhttp3.Call localVarCall = recupererPiecesEtDepotsValidateBeforeCall(codeStructure, codeApprenant, cursus, _callback);
        Type localVarReturnType = new TypeToken<DepotsPieceElementsEpochResume>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for visualiserPhoto
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant code de la pièce justificative (required)
     * @param codePeriode code de la période (required)
     * @param codeChemin code du chemin de l&#39;inscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Photo introuvable pour cet apprenant et ce CodePeriode </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call visualiserPhotoCall(String codeStructure, String codeApprenant, String codePeriode, String codeChemin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/codeApprenant/{codeApprenant}/codePeriode/{codePeriode}/codeChemin/{codeChemin}/photo"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()))
            .replaceAll("\\{" + "codeChemin" + "\\}", localVarApiClient.escapeString(codeChemin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "image/png", "image/jpg", "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call visualiserPhotoValidateBeforeCall(String codeStructure, String codeApprenant, String codePeriode, String codeChemin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling visualiserPhoto(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling visualiserPhoto(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling visualiserPhoto(Async)");
        }
        
        // verify the required parameter 'codeChemin' is set
        if (codeChemin == null) {
            throw new ApiException("Missing the required parameter 'codeChemin' when calling visualiserPhoto(Async)");
        }
        

        okhttp3.Call localVarCall = visualiserPhotoCall(codeStructure, codeApprenant, codePeriode, codeChemin, _callback);
        return localVarCall;

    }

    /**
     * Visualiser la photo d&#39;un apprenant pour une période donnée
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant code de la pièce justificative (required)
     * @param codePeriode code de la période (required)
     * @param codeChemin code du chemin de l&#39;inscription (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Photo introuvable pour cet apprenant et ce CodePeriode </td><td>  -  </td></tr>
     </table>
     */
    public File visualiserPhoto(String codeStructure, String codeApprenant, String codePeriode, String codeChemin) throws ApiException {
        ApiResponse<File> localVarResp = visualiserPhotoWithHttpInfo(codeStructure, codeApprenant, codePeriode, codeChemin);
        return localVarResp.getData();
    }

    /**
     * Visualiser la photo d&#39;un apprenant pour une période donnée
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant code de la pièce justificative (required)
     * @param codePeriode code de la période (required)
     * @param codeChemin code du chemin de l&#39;inscription (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Photo introuvable pour cet apprenant et ce CodePeriode </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> visualiserPhotoWithHttpInfo(String codeStructure, String codeApprenant, String codePeriode, String codeChemin) throws ApiException {
        okhttp3.Call localVarCall = visualiserPhotoValidateBeforeCall(codeStructure, codeApprenant, codePeriode, codeChemin, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visualiser la photo d&#39;un apprenant pour une période donnée (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant code de la pièce justificative (required)
     * @param codePeriode code de la période (required)
     * @param codeChemin code du chemin de l&#39;inscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Photo introuvable pour cet apprenant et ce CodePeriode </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call visualiserPhotoAsync(String codeStructure, String codeApprenant, String codePeriode, String codeChemin, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = visualiserPhotoValidateBeforeCall(codeStructure, codeApprenant, codePeriode, codeChemin, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
