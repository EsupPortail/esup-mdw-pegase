/*
 * PIECE Externe V1
 *  # Introduction  Liste l'ensemble des services et des opérations externes disponibles dans le module Piece  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.pieceext.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import fr.univlorraine.pegase.pieceext.model.Erreur;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Erreurs
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T10:26:33.202134700+02:00[Europe/Paris]")
public class Erreurs {
  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  public static final String SERIALIZED_NAME_VERSION = "version";
  public static final String SERIALIZED_NAME_PATH = "path";
  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private Date timestamp;
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private String statusCode;
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Erreur> errors = new ArrayList<Erreur>();

  public Erreurs() { 
  }

  public Erreurs correlationId(String correlationId) {
    
    this.correlationId = correlationId;
    return this;
  }

   /**
   * Permet d&#39;identifier de manière unique l&#39;erreur côté serveur.  A titre de debugging. 
   * @return correlationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Permet d'identifier de manière unique l'erreur côté serveur.  A titre de debugging. ")

  public String getCorrelationId() {
    return correlationId;
  }


  public void setCorrelationId(String correlationId) {
    this.correlationId = correlationId;
  }


  public Erreurs timestamp(Date timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Timestamp auque à lieu l&#39;erreur.  A titre de debugging. 
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Timestamp auque à lieu l'erreur.  A titre de debugging. ")

  public Date getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(Date timestamp) {
    this.timestamp = timestamp;
  }


  public Erreurs version(String version) {
    
    this.version = version;
    return this;
  }

   /**
   * Version de l&#39;application.  A titre de debugging. 
   * @return version
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Version de l'application.  A titre de debugging. ")

  public String getVersion() {
    return version;
  }


  public void setVersion(String version) {
    this.version = version;
  }


  public Erreurs path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * URI sur lequel le service a été applelé (i.e /api/monservice).  A titre de debugging. 
   * @return path
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "URI sur lequel le service a été applelé (i.e /api/monservice).  A titre de debugging. ")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public Erreurs statusCode(String statusCode) {
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Statuscode HTTP.  A titre de debugging 
   * @return statusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Statuscode HTTP.  A titre de debugging ")

  public String getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(String statusCode) {
    this.statusCode = statusCode;
  }


  public Erreurs errors(List<Erreur> errors) {
    
    this.errors = errors;
    return this;
  }

  public Erreurs addErrorsItem(Erreur errorsItem) {
    this.errors.add(errorsItem);
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<Erreur> getErrors() {
    return errors;
  }


  public void setErrors(List<Erreur> errors) {
    this.errors = errors;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Erreurs erreurs = (Erreurs) o;
    return Objects.equals(this.correlationId, erreurs.correlationId) &&
        Objects.equals(this.timestamp, erreurs.timestamp) &&
        Objects.equals(this.version, erreurs.version) &&
        Objects.equals(this.path, erreurs.path) &&
        Objects.equals(this.statusCode, erreurs.statusCode) &&
        Objects.equals(this.errors, erreurs.errors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correlationId, timestamp, version, path, statusCode, errors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Erreurs {\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

