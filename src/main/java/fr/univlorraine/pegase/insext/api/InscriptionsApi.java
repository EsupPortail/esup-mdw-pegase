/*
 * INSCRIPTION Externe V2
 *  # Introduction  Liste l'ensemble des services et des opérations Ins (Module Inscription) identifiés pour un usage externe.  La documentation d'intégration de Pégase est publiée par version dans  [ce répertoire](https://share.pc-scol.fr/d/d98bdddb6485406b9422/).  Vous y retrouverez notamment des informations sur le modèle objet métier,  le versionning des APIs, les cas d'usage des APIs externes.  # Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé à l'aide d'un [token jwt](https://jwt.io/). Pour cela, chaque requête HTTP doit contenir un token valide dans le header HTTP `Authorization`.  Le format est `Authorization: Bearer <token-jwt>`. Par exemple `Authorization: Bearer xxxx.yyyy.zzzz`.  Lien vers [la documentation](https://share.pc-scol.fr/f/4487c726ade84022ae16/?dl=1) qui décrit l'authentification aux APIs de Pegase.  # Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :   * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)     * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés     * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)   * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))   * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)   * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)   * boolean - Un booléen représenté par `true` ou `false`  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 2.2.0-dev.20250424143750
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.insext.api;

import fr.univlorraine.pegase.insext.invoker.ApiCallback;
import fr.univlorraine.pegase.insext.invoker.ApiClient;
import fr.univlorraine.pegase.insext.invoker.ApiException;
import fr.univlorraine.pegase.insext.invoker.ApiResponse;
import fr.univlorraine.pegase.insext.invoker.Configuration;
import fr.univlorraine.pegase.insext.invoker.Pair;
import fr.univlorraine.pegase.insext.invoker.ProgressRequestBody;
import fr.univlorraine.pegase.insext.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.insext.model.ApprenantEtInscriptions;
import fr.univlorraine.pegase.insext.model.Pageable;
import fr.univlorraine.pegase.insext.model.VueInscriptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lireInscriptions
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireInscriptionsValidateBeforeCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireInscriptions(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling lireInscriptions(Async)");
        }
        

        okhttp3.Call localVarCall = lireInscriptionsCall(codeStructure, codeApprenant, _callback);
        return localVarCall;

    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant
     * Récupérer le dossier complet d&#39;un apprenant 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @return ApprenantEtInscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApprenantEtInscriptions lireInscriptions(String codeStructure, String codeApprenant) throws ApiException {
        ApiResponse<ApprenantEtInscriptions> localVarResp = lireInscriptionsWithHttpInfo(codeStructure, codeApprenant);
        return localVarResp.getData();
    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant
     * Récupérer le dossier complet d&#39;un apprenant 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @return ApiResponse&lt;ApprenantEtInscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApprenantEtInscriptions> lireInscriptionsWithHttpInfo(String codeStructure, String codeApprenant) throws ApiException {
        okhttp3.Call localVarCall = lireInscriptionsValidateBeforeCall(codeStructure, codeApprenant, null);
        Type localVarReturnType = new TypeToken<ApprenantEtInscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant (asynchronously)
     * Récupérer le dossier complet d&#39;un apprenant 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsAsync(String codeStructure, String codeApprenant, final ApiCallback<ApprenantEtInscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireInscriptionsValidateBeforeCall(codeStructure, codeApprenant, _callback);
        Type localVarReturnType = new TypeToken<ApprenantEtInscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerFluxInscriptionsPagine
     * @param depuis L&#39;horodatage de la dernière extraction (exprimé en nombre de secondes depuis le 01/01/1970). Les entrées modifiées ou créées depuis seront remontées. (optional)
     * @param jusqua L&#39;horodatage à partir duquel les entrées sont exclues (exprimé en nombre de secondes depuis le 01/01/1970). Si absent ou 0, toutes les entrées seront remontées depuis l&#39;horodatage depuis. (optional, default to 0)
     * @param photo Inclure la photo d&#39;identité binaire dans les réponses. (optional, default to false)
     * @param codePeriode Code de la période (optional)
     * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page, strictement positif, défaut 50, limité à 500 sans photo, 50 avec photo (optional)
     * @param codeApprenant Code apprenant (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de la carte multi-services récupérées </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La pagination est invalide. Une pagination est obligatoire, taille limitée à 500 sans photo, 50 avec photo. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flux introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerFluxInscriptionsPagineCall(Long depuis, Long jusqua, Boolean photo, String codePeriode, Pageable pageable, String codeApprenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/flux-inscriptions/pagine";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (depuis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depuis", depuis));
        }

        if (jusqua != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jusqua", jusqua));
        }

        if (photo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("photo", photo));
        }

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        if (codeApprenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeApprenant", codeApprenant));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerFluxInscriptionsPagineValidateBeforeCall(Long depuis, Long jusqua, Boolean photo, String codePeriode, Pageable pageable, String codeApprenant, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listerFluxInscriptionsPagineCall(depuis, jusqua, photo, codePeriode, pageable, codeApprenant, _callback);
        return localVarCall;

    }

    /**
     * Chercher les données de la carte multi-services permettant également de répondre au besoin du flux des comptes
     * Les données renvoyées correspondent aux inscriptions validées, annulées ou ayant fait l&#39;objet d&#39;une actualisation
     * @param depuis L&#39;horodatage de la dernière extraction (exprimé en nombre de secondes depuis le 01/01/1970). Les entrées modifiées ou créées depuis seront remontées. (optional)
     * @param jusqua L&#39;horodatage à partir duquel les entrées sont exclues (exprimé en nombre de secondes depuis le 01/01/1970). Si absent ou 0, toutes les entrées seront remontées depuis l&#39;horodatage depuis. (optional, default to 0)
     * @param photo Inclure la photo d&#39;identité binaire dans les réponses. (optional, default to false)
     * @param codePeriode Code de la période (optional)
     * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page, strictement positif, défaut 50, limité à 500 sans photo, 50 avec photo (optional)
     * @param codeApprenant Code apprenant (optional)
     * @return VueInscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de la carte multi-services récupérées </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La pagination est invalide. Une pagination est obligatoire, taille limitée à 500 sans photo, 50 avec photo. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flux introuvable </td><td>  -  </td></tr>
     </table>
     */
    public VueInscriptions listerFluxInscriptionsPagine(Long depuis, Long jusqua, Boolean photo, String codePeriode, Pageable pageable, String codeApprenant) throws ApiException {
        ApiResponse<VueInscriptions> localVarResp = listerFluxInscriptionsPagineWithHttpInfo(depuis, jusqua, photo, codePeriode, pageable, codeApprenant);
        return localVarResp.getData();
    }

    /**
     * Chercher les données de la carte multi-services permettant également de répondre au besoin du flux des comptes
     * Les données renvoyées correspondent aux inscriptions validées, annulées ou ayant fait l&#39;objet d&#39;une actualisation
     * @param depuis L&#39;horodatage de la dernière extraction (exprimé en nombre de secondes depuis le 01/01/1970). Les entrées modifiées ou créées depuis seront remontées. (optional)
     * @param jusqua L&#39;horodatage à partir duquel les entrées sont exclues (exprimé en nombre de secondes depuis le 01/01/1970). Si absent ou 0, toutes les entrées seront remontées depuis l&#39;horodatage depuis. (optional, default to 0)
     * @param photo Inclure la photo d&#39;identité binaire dans les réponses. (optional, default to false)
     * @param codePeriode Code de la période (optional)
     * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page, strictement positif, défaut 50, limité à 500 sans photo, 50 avec photo (optional)
     * @param codeApprenant Code apprenant (optional)
     * @return ApiResponse&lt;VueInscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de la carte multi-services récupérées </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La pagination est invalide. Une pagination est obligatoire, taille limitée à 500 sans photo, 50 avec photo. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flux introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VueInscriptions> listerFluxInscriptionsPagineWithHttpInfo(Long depuis, Long jusqua, Boolean photo, String codePeriode, Pageable pageable, String codeApprenant) throws ApiException {
        okhttp3.Call localVarCall = listerFluxInscriptionsPagineValidateBeforeCall(depuis, jusqua, photo, codePeriode, pageable, codeApprenant, null);
        Type localVarReturnType = new TypeToken<VueInscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Chercher les données de la carte multi-services permettant également de répondre au besoin du flux des comptes (asynchronously)
     * Les données renvoyées correspondent aux inscriptions validées, annulées ou ayant fait l&#39;objet d&#39;une actualisation
     * @param depuis L&#39;horodatage de la dernière extraction (exprimé en nombre de secondes depuis le 01/01/1970). Les entrées modifiées ou créées depuis seront remontées. (optional)
     * @param jusqua L&#39;horodatage à partir duquel les entrées sont exclues (exprimé en nombre de secondes depuis le 01/01/1970). Si absent ou 0, toutes les entrées seront remontées depuis l&#39;horodatage depuis. (optional, default to 0)
     * @param photo Inclure la photo d&#39;identité binaire dans les réponses. (optional, default to false)
     * @param codePeriode Code de la période (optional)
     * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page, strictement positif, défaut 50, limité à 500 sans photo, 50 avec photo (optional)
     * @param codeApprenant Code apprenant (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de la carte multi-services récupérées </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La pagination est invalide. Une pagination est obligatoire, taille limitée à 500 sans photo, 50 avec photo. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Flux introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerFluxInscriptionsPagineAsync(Long depuis, Long jusqua, Boolean photo, String codePeriode, Pageable pageable, String codeApprenant, final ApiCallback<VueInscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerFluxInscriptionsPagineValidateBeforeCall(depuis, jusqua, photo, codePeriode, pageable, codeApprenant, _callback);
        Type localVarReturnType = new TypeToken<VueInscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
