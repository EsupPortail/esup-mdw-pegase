/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.idt.api;

import fr.univlorraine.pegase.idt.invoker.ApiCallback;
import fr.univlorraine.pegase.idt.invoker.ApiClient;
import fr.univlorraine.pegase.idt.invoker.ApiException;
import fr.univlorraine.pegase.idt.invoker.ApiResponse;
import fr.univlorraine.pegase.idt.invoker.Configuration;
import fr.univlorraine.pegase.idt.invoker.Pair;
import fr.univlorraine.pegase.idt.invoker.ProgressRequestBody;
import fr.univlorraine.pegase.idt.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.idt.model.CreerModifierIdentiteForceRequest;
import fr.univlorraine.pegase.idt.model.CreerModifierIdentiteRequest;
import fr.univlorraine.pegase.idt.model.Erreur;
import fr.univlorraine.pegase.idt.model.Erreurs;
import fr.univlorraine.pegase.idt.model.IdentiteDetail;
import fr.univlorraine.pegase.idt.model.IdentiteImmatriculeeDetail;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IdentiteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IdentiteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IdentiteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for creerIdentiteSansVerification
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerModifierIdentiteForceRequest L&#39;identité à créer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;identité est créée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> L&#39;identité est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerIdentiteSansVerificationCall(String codeStructure, CreerModifierIdentiteForceRequest creerModifierIdentiteForceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creerModifierIdentiteForceRequest;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/force"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creerIdentiteSansVerificationValidateBeforeCall(String codeStructure, CreerModifierIdentiteForceRequest creerModifierIdentiteForceRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling creerIdentiteSansVerification(Async)");
        }
        
        // verify the required parameter 'creerModifierIdentiteForceRequest' is set
        if (creerModifierIdentiteForceRequest == null) {
            throw new ApiException("Missing the required parameter 'creerModifierIdentiteForceRequest' when calling creerIdentiteSansVerification(Async)");
        }
        

        okhttp3.Call localVarCall = creerIdentiteSansVerificationCall(codeStructure, creerModifierIdentiteForceRequest, _callback);
        return localVarCall;

    }

    /**
     * Créer une identité sans processus d&#39;identification
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerModifierIdentiteForceRequest L&#39;identité à créer (required)
     * @return IdentiteDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;identité est créée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> L&#39;identité est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public IdentiteDetail creerIdentiteSansVerification(String codeStructure, CreerModifierIdentiteForceRequest creerModifierIdentiteForceRequest) throws ApiException {
        ApiResponse<IdentiteDetail> localVarResp = creerIdentiteSansVerificationWithHttpInfo(codeStructure, creerModifierIdentiteForceRequest);
        return localVarResp.getData();
    }

    /**
     * Créer une identité sans processus d&#39;identification
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerModifierIdentiteForceRequest L&#39;identité à créer (required)
     * @return ApiResponse&lt;IdentiteDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;identité est créée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> L&#39;identité est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentiteDetail> creerIdentiteSansVerificationWithHttpInfo(String codeStructure, CreerModifierIdentiteForceRequest creerModifierIdentiteForceRequest) throws ApiException {
        okhttp3.Call localVarCall = creerIdentiteSansVerificationValidateBeforeCall(codeStructure, creerModifierIdentiteForceRequest, null);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Créer une identité sans processus d&#39;identification (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerModifierIdentiteForceRequest L&#39;identité à créer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;identité est créée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> L&#39;identité est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerIdentiteSansVerificationAsync(String codeStructure, CreerModifierIdentiteForceRequest creerModifierIdentiteForceRequest, final ApiCallback<IdentiteDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = creerIdentiteSansVerificationValidateBeforeCall(codeStructure, creerModifierIdentiteForceRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for identifierEtCreerIdentite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerModifierIdentiteRequest L&#39;identite à créer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;identite est créée </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> L&#39;identite a été rapprochée d&#39;une autre qui est renvoyée à la place </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Le identite est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierEtCreerIdentiteCall(String codeStructure, CreerModifierIdentiteRequest creerModifierIdentiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creerModifierIdentiteRequest;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call identifierEtCreerIdentiteValidateBeforeCall(String codeStructure, CreerModifierIdentiteRequest creerModifierIdentiteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling identifierEtCreerIdentite(Async)");
        }
        
        // verify the required parameter 'creerModifierIdentiteRequest' is set
        if (creerModifierIdentiteRequest == null) {
            throw new ApiException("Missing the required parameter 'creerModifierIdentiteRequest' when calling identifierEtCreerIdentite(Async)");
        }
        

        okhttp3.Call localVarCall = identifierEtCreerIdentiteCall(codeStructure, creerModifierIdentiteRequest, _callback);
        return localVarCall;

    }

    /**
     * Identifier une identité et la créer si necessaire
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerModifierIdentiteRequest L&#39;identite à créer (required)
     * @return IdentiteDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;identite est créée </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> L&#39;identite a été rapprochée d&#39;une autre qui est renvoyée à la place </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Le identite est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public IdentiteDetail identifierEtCreerIdentite(String codeStructure, CreerModifierIdentiteRequest creerModifierIdentiteRequest) throws ApiException {
        ApiResponse<IdentiteDetail> localVarResp = identifierEtCreerIdentiteWithHttpInfo(codeStructure, creerModifierIdentiteRequest);
        return localVarResp.getData();
    }

    /**
     * Identifier une identité et la créer si necessaire
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerModifierIdentiteRequest L&#39;identite à créer (required)
     * @return ApiResponse&lt;IdentiteDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;identite est créée </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> L&#39;identite a été rapprochée d&#39;une autre qui est renvoyée à la place </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Le identite est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentiteDetail> identifierEtCreerIdentiteWithHttpInfo(String codeStructure, CreerModifierIdentiteRequest creerModifierIdentiteRequest) throws ApiException {
        okhttp3.Call localVarCall = identifierEtCreerIdentiteValidateBeforeCall(codeStructure, creerModifierIdentiteRequest, null);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identifier une identité et la créer si necessaire (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param creerModifierIdentiteRequest L&#39;identite à créer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;identite est créée </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> L&#39;identite a été rapprochée d&#39;une autre qui est renvoyée à la place </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Le identite est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call identifierEtCreerIdentiteAsync(String codeStructure, CreerModifierIdentiteRequest creerModifierIdentiteRequest, final ApiCallback<IdentiteDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = identifierEtCreerIdentiteValidateBeforeCall(codeStructure, creerModifierIdentiteRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireIdentite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été trouvée </td><td>  * ETag - Tag HTTP ETag de la réponse <br>  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur interne du serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireIdentiteCall(String codeStructure, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/{id}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireIdentiteValidateBeforeCall(String codeStructure, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireIdentite(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lireIdentite(Async)");
        }
        

        okhttp3.Call localVarCall = lireIdentiteCall(codeStructure, id, _callback);
        return localVarCall;

    }

    /**
     * Lire une identite
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return IdentiteImmatriculeeDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été trouvée </td><td>  * ETag - Tag HTTP ETag de la réponse <br>  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur interne du serveur </td><td>  -  </td></tr>
     </table>
     */
    public IdentiteImmatriculeeDetail lireIdentite(String codeStructure, UUID id) throws ApiException {
        ApiResponse<IdentiteImmatriculeeDetail> localVarResp = lireIdentiteWithHttpInfo(codeStructure, id);
        return localVarResp.getData();
    }

    /**
     * Lire une identite
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;IdentiteImmatriculeeDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été trouvée </td><td>  * ETag - Tag HTTP ETag de la réponse <br>  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur interne du serveur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentiteImmatriculeeDetail> lireIdentiteWithHttpInfo(String codeStructure, UUID id) throws ApiException {
        okhttp3.Call localVarCall = lireIdentiteValidateBeforeCall(codeStructure, id, null);
        Type localVarReturnType = new TypeToken<IdentiteImmatriculeeDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lire une identite (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été trouvée </td><td>  * ETag - Tag HTTP ETag de la réponse <br>  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur interne du serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireIdentiteAsync(String codeStructure, UUID id, final ApiCallback<IdentiteImmatriculeeDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireIdentiteValidateBeforeCall(codeStructure, id, _callback);
        Type localVarReturnType = new TypeToken<IdentiteImmatriculeeDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireIdentiteByCodeIdentite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param identifiantApprenantPegase Code Identité Pegase de la personne (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été trouvée </td><td>  * ETag - Tag HTTP ETag de la réponse <br>  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur interne du serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireIdentiteByCodeIdentiteCall(String codeStructure, String identifiantApprenantPegase, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/pegase/{identifiantApprenantPegase}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "identifiantApprenantPegase" + "\\}", localVarApiClient.escapeString(identifiantApprenantPegase.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireIdentiteByCodeIdentiteValidateBeforeCall(String codeStructure, String identifiantApprenantPegase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireIdentiteByCodeIdentite(Async)");
        }
        
        // verify the required parameter 'identifiantApprenantPegase' is set
        if (identifiantApprenantPegase == null) {
            throw new ApiException("Missing the required parameter 'identifiantApprenantPegase' when calling lireIdentiteByCodeIdentite(Async)");
        }
        

        okhttp3.Call localVarCall = lireIdentiteByCodeIdentiteCall(codeStructure, identifiantApprenantPegase, _callback);
        return localVarCall;

    }

    /**
     * Lire une identite
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param identifiantApprenantPegase Code Identité Pegase de la personne (required)
     * @return IdentiteImmatriculeeDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été trouvée </td><td>  * ETag - Tag HTTP ETag de la réponse <br>  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur interne du serveur </td><td>  -  </td></tr>
     </table>
     */
    public IdentiteImmatriculeeDetail lireIdentiteByCodeIdentite(String codeStructure, String identifiantApprenantPegase) throws ApiException {
        ApiResponse<IdentiteImmatriculeeDetail> localVarResp = lireIdentiteByCodeIdentiteWithHttpInfo(codeStructure, identifiantApprenantPegase);
        return localVarResp.getData();
    }

    /**
     * Lire une identite
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param identifiantApprenantPegase Code Identité Pegase de la personne (required)
     * @return ApiResponse&lt;IdentiteImmatriculeeDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été trouvée </td><td>  * ETag - Tag HTTP ETag de la réponse <br>  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur interne du serveur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentiteImmatriculeeDetail> lireIdentiteByCodeIdentiteWithHttpInfo(String codeStructure, String identifiantApprenantPegase) throws ApiException {
        okhttp3.Call localVarCall = lireIdentiteByCodeIdentiteValidateBeforeCall(codeStructure, identifiantApprenantPegase, null);
        Type localVarReturnType = new TypeToken<IdentiteImmatriculeeDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lire une identite (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param identifiantApprenantPegase Code Identité Pegase de la personne (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été trouvée </td><td>  * ETag - Tag HTTP ETag de la réponse <br>  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur interne du serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireIdentiteByCodeIdentiteAsync(String codeStructure, String identifiantApprenantPegase, final ApiCallback<IdentiteImmatriculeeDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireIdentiteByCodeIdentiteValidateBeforeCall(codeStructure, identifiantApprenantPegase, _callback);
        Type localVarReturnType = new TypeToken<IdentiteImmatriculeeDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifierDescripteursIdentite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param creerModifierIdentiteRequest Commande pour modifier une identité (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été modifiée </td><td>  * schema -  <br>  </td></tr>
        <tr><td> 400 </td><td> L&#39;identité est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierDescripteursIdentiteCall(String codeStructure, UUID id, CreerModifierIdentiteRequest creerModifierIdentiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = creerModifierIdentiteRequest;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/{id}/descripteurs-identite"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifierDescripteursIdentiteValidateBeforeCall(String codeStructure, UUID id, CreerModifierIdentiteRequest creerModifierIdentiteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling modifierDescripteursIdentite(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modifierDescripteursIdentite(Async)");
        }
        
        // verify the required parameter 'creerModifierIdentiteRequest' is set
        if (creerModifierIdentiteRequest == null) {
            throw new ApiException("Missing the required parameter 'creerModifierIdentiteRequest' when calling modifierDescripteursIdentite(Async)");
        }
        

        okhttp3.Call localVarCall = modifierDescripteursIdentiteCall(codeStructure, id, creerModifierIdentiteRequest, _callback);
        return localVarCall;

    }

    /**
     * Modifier descripteurs identite
     * Modifier les descripteurs d&#39;une identité 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param creerModifierIdentiteRequest Commande pour modifier une identité (required)
     * @return IdentiteDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été modifiée </td><td>  * schema -  <br>  </td></tr>
        <tr><td> 400 </td><td> L&#39;identité est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public IdentiteDetail modifierDescripteursIdentite(String codeStructure, UUID id, CreerModifierIdentiteRequest creerModifierIdentiteRequest) throws ApiException {
        ApiResponse<IdentiteDetail> localVarResp = modifierDescripteursIdentiteWithHttpInfo(codeStructure, id, creerModifierIdentiteRequest);
        return localVarResp.getData();
    }

    /**
     * Modifier descripteurs identite
     * Modifier les descripteurs d&#39;une identité 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param creerModifierIdentiteRequest Commande pour modifier une identité (required)
     * @return ApiResponse&lt;IdentiteDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été modifiée </td><td>  * schema -  <br>  </td></tr>
        <tr><td> 400 </td><td> L&#39;identité est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentiteDetail> modifierDescripteursIdentiteWithHttpInfo(String codeStructure, UUID id, CreerModifierIdentiteRequest creerModifierIdentiteRequest) throws ApiException {
        okhttp3.Call localVarCall = modifierDescripteursIdentiteValidateBeforeCall(codeStructure, id, creerModifierIdentiteRequest, null);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modifier descripteurs identite (asynchronously)
     * Modifier les descripteurs d&#39;une identité 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param creerModifierIdentiteRequest Commande pour modifier une identité (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;identité a été modifiée </td><td>  * schema -  <br>  </td></tr>
        <tr><td> 400 </td><td> L&#39;identité est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierDescripteursIdentiteAsync(String codeStructure, UUID id, CreerModifierIdentiteRequest creerModifierIdentiteRequest, final ApiCallback<IdentiteDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifierDescripteursIdentiteValidateBeforeCall(codeStructure, id, creerModifierIdentiteRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerIdentite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> L&#39;opération a réussi </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> L&#39;opération a échoué </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Le identite n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerIdentiteCall(String codeStructure, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/{id}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerIdentiteValidateBeforeCall(String codeStructure, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling supprimerIdentite(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling supprimerIdentite(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerIdentiteCall(codeStructure, id, _callback);
        return localVarCall;

    }

    /**
     * Supprimer une identite
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> L&#39;opération a réussi </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> L&#39;opération a échoué </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Le identite n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public void supprimerIdentite(String codeStructure, UUID id) throws ApiException {
        supprimerIdentiteWithHttpInfo(codeStructure, id);
    }

    /**
     * Supprimer une identite
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> L&#39;opération a réussi </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> L&#39;opération a échoué </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Le identite n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerIdentiteWithHttpInfo(String codeStructure, UUID id) throws ApiException {
        okhttp3.Call localVarCall = supprimerIdentiteValidateBeforeCall(codeStructure, id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Supprimer une identite (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> L&#39;opération a réussi </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> L&#39;opération a échoué </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Le identite n&#39;existe pas </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerIdentiteAsync(String codeStructure, UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerIdentiteValidateBeforeCall(codeStructure, id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
