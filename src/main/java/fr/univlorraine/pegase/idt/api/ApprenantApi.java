/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.idt.api;

import fr.univlorraine.pegase.idt.invoker.ApiCallback;
import fr.univlorraine.pegase.idt.invoker.ApiClient;
import fr.univlorraine.pegase.idt.invoker.ApiException;
import fr.univlorraine.pegase.idt.invoker.ApiResponse;
import fr.univlorraine.pegase.idt.invoker.Configuration;
import fr.univlorraine.pegase.idt.invoker.Pair;
import fr.univlorraine.pegase.idt.invoker.ProgressRequestBody;
import fr.univlorraine.pegase.idt.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.idt.model.Erreur;
import fr.univlorraine.pegase.idt.model.Erreurs;
import fr.univlorraine.pegase.idt.model.FusionnerIdentiteRequest;
import fr.univlorraine.pegase.idt.model.IdentiteApprenantSimilaireSummary;
import fr.univlorraine.pegase.idt.model.IdentiteDetail;
import fr.univlorraine.pegase.idt.model.IdentiteImmatriculeeDetail;
import fr.univlorraine.pegase.idt.model.InformationsPersonnellesRequest;
import fr.univlorraine.pegase.idt.model.Pageable;
import fr.univlorraine.pegase.idt.model.PagedIdentiteApprenantSummaries;
import fr.univlorraine.pegase.idt.model.StatutIne;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApprenantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApprenantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApprenantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for confirmerIdentite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identite confirmee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La requete est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmerIdentiteCall(String codeStructure, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/apprenants/{id}/confirmer"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "json/application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmerIdentiteValidateBeforeCall(String codeStructure, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling confirmerIdentite(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling confirmerIdentite(Async)");
        }
        

        okhttp3.Call localVarCall = confirmerIdentiteCall(codeStructure, id, _callback);
        return localVarCall;

    }

    /**
     * Confirmer l&#39;identité
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return IdentiteDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identite confirmee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La requete est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public IdentiteDetail confirmerIdentite(String codeStructure, UUID id) throws ApiException {
        ApiResponse<IdentiteDetail> localVarResp = confirmerIdentiteWithHttpInfo(codeStructure, id);
        return localVarResp.getData();
    }

    /**
     * Confirmer l&#39;identité
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;IdentiteDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identite confirmee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La requete est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentiteDetail> confirmerIdentiteWithHttpInfo(String codeStructure, UUID id) throws ApiException {
        okhttp3.Call localVarCall = confirmerIdentiteValidateBeforeCall(codeStructure, id, null);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirmer l&#39;identité (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identite confirmee </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La requete est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmerIdentiteAsync(String codeStructure, UUID id, final ApiCallback<IdentiteDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmerIdentiteValidateBeforeCall(codeStructure, id, _callback);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for evaluerAmbiguites
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identités étant des doublons potentiels </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas&#39; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluerAmbiguitesCall(String codeStructure, UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/apprenants/{id}/doublonPotentiel"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call evaluerAmbiguitesValidateBeforeCall(String codeStructure, UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling evaluerAmbiguites(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling evaluerAmbiguites(Async)");
        }
        

        okhttp3.Call localVarCall = evaluerAmbiguitesCall(codeStructure, id, _callback);
        return localVarCall;

    }

    /**
     * Evaluer le potentiel doublon d&#39;une identité
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return List&lt;IdentiteApprenantSimilaireSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identités étant des doublons potentiels </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas&#39; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public List<IdentiteApprenantSimilaireSummary> evaluerAmbiguites(String codeStructure, UUID id) throws ApiException {
        ApiResponse<List<IdentiteApprenantSimilaireSummary>> localVarResp = evaluerAmbiguitesWithHttpInfo(codeStructure, id);
        return localVarResp.getData();
    }

    /**
     * Evaluer le potentiel doublon d&#39;une identité
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @return ApiResponse&lt;List&lt;IdentiteApprenantSimilaireSummary&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identités étant des doublons potentiels </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas&#39; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IdentiteApprenantSimilaireSummary>> evaluerAmbiguitesWithHttpInfo(String codeStructure, UUID id) throws ApiException {
        okhttp3.Call localVarCall = evaluerAmbiguitesValidateBeforeCall(codeStructure, id, null);
        Type localVarReturnType = new TypeToken<List<IdentiteApprenantSimilaireSummary>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Evaluer le potentiel doublon d&#39;une identité (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identités étant des doublons potentiels </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> L&#39;identité n&#39;existe pas&#39; </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call evaluerAmbiguitesAsync(String codeStructure, UUID id, final ApiCallback<List<IdentiteApprenantSimilaireSummary>> _callback) throws ApiException {

        okhttp3.Call localVarCall = evaluerAmbiguitesValidateBeforeCall(codeStructure, id, _callback);
        Type localVarReturnType = new TypeToken<List<IdentiteApprenantSimilaireSummary>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fusionnerIdentites
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param fusionnerIdentiteRequest Commande pour fusionner deux identités (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identites fusionnees </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La requete est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fusionnerIdentitesCall(String codeStructure, UUID id, FusionnerIdentiteRequest fusionnerIdentiteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = fusionnerIdentiteRequest;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/apprenants/{id}/fusionner"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "json/application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fusionnerIdentitesValidateBeforeCall(String codeStructure, UUID id, FusionnerIdentiteRequest fusionnerIdentiteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling fusionnerIdentites(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fusionnerIdentites(Async)");
        }
        
        // verify the required parameter 'fusionnerIdentiteRequest' is set
        if (fusionnerIdentiteRequest == null) {
            throw new ApiException("Missing the required parameter 'fusionnerIdentiteRequest' when calling fusionnerIdentites(Async)");
        }
        

        okhttp3.Call localVarCall = fusionnerIdentitesCall(codeStructure, id, fusionnerIdentiteRequest, _callback);
        return localVarCall;

    }

    /**
     * Fusionner deux identités
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param fusionnerIdentiteRequest Commande pour fusionner deux identités (required)
     * @return IdentiteDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identites fusionnees </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La requete est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public IdentiteDetail fusionnerIdentites(String codeStructure, UUID id, FusionnerIdentiteRequest fusionnerIdentiteRequest) throws ApiException {
        ApiResponse<IdentiteDetail> localVarResp = fusionnerIdentitesWithHttpInfo(codeStructure, id, fusionnerIdentiteRequest);
        return localVarResp.getData();
    }

    /**
     * Fusionner deux identités
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param fusionnerIdentiteRequest Commande pour fusionner deux identités (required)
     * @return ApiResponse&lt;IdentiteDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identites fusionnees </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La requete est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentiteDetail> fusionnerIdentitesWithHttpInfo(String codeStructure, UUID id, FusionnerIdentiteRequest fusionnerIdentiteRequest) throws ApiException {
        okhttp3.Call localVarCall = fusionnerIdentitesValidateBeforeCall(codeStructure, id, fusionnerIdentiteRequest, null);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fusionner deux identités (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param fusionnerIdentiteRequest Commande pour fusionner deux identités (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Identites fusionnees </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> La requete est invalide </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fusionnerIdentitesAsync(String codeStructure, UUID id, FusionnerIdentiteRequest fusionnerIdentiteRequest, final ApiCallback<IdentiteDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = fusionnerIdentitesValidateBeforeCall(codeStructure, id, fusionnerIdentiteRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentiteDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifierInfosPersonnellesPourImmatriculer
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param informationsPersonnellesRequest Les données personnelles nécessaires à l&#39;immatriculation à modifier  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Apprenant récupéré </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erreur fonctionnelle  Exemple: lorsque l&#39;INE est confirmé sur un apprenant, il n&#39;est plus  permis de modifier les données personnelles de l&#39;apprenant  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès interdit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant non trouvé </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierInfosPersonnellesPourImmatriculerCall(String codeStructure, UUID id, InformationsPersonnellesRequest informationsPersonnellesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = informationsPersonnellesRequest;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/apprenant/{id}/infos-personnelles"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "json/application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifierInfosPersonnellesPourImmatriculerValidateBeforeCall(String codeStructure, UUID id, InformationsPersonnellesRequest informationsPersonnellesRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling modifierInfosPersonnellesPourImmatriculer(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling modifierInfosPersonnellesPourImmatriculer(Async)");
        }
        

        okhttp3.Call localVarCall = modifierInfosPersonnellesPourImmatriculerCall(codeStructure, id, informationsPersonnellesRequest, _callback);
        return localVarCall;

    }

    /**
     * Modifier les informations personnelles d&#39;un apprenant nécessaires à l&#39;immatriculation
     * Cette API permet de mettre à jour ou compléter certaines informations personnelles d&#39;un apprenant.  Une fois la mise à jour effectuée l&#39;API tente d&#39;obtenir le numéro INE de l&#39;étudiant.  A noter, la modification des informations personnes d&#39;un apprenant est interdite dès que sont numéro INE est confirmé 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param informationsPersonnellesRequest Les données personnelles nécessaires à l&#39;immatriculation à modifier  (optional)
     * @return IdentiteImmatriculeeDetail
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Apprenant récupéré </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erreur fonctionnelle  Exemple: lorsque l&#39;INE est confirmé sur un apprenant, il n&#39;est plus  permis de modifier les données personnelles de l&#39;apprenant  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès interdit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant non trouvé </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public IdentiteImmatriculeeDetail modifierInfosPersonnellesPourImmatriculer(String codeStructure, UUID id, InformationsPersonnellesRequest informationsPersonnellesRequest) throws ApiException {
        ApiResponse<IdentiteImmatriculeeDetail> localVarResp = modifierInfosPersonnellesPourImmatriculerWithHttpInfo(codeStructure, id, informationsPersonnellesRequest);
        return localVarResp.getData();
    }

    /**
     * Modifier les informations personnelles d&#39;un apprenant nécessaires à l&#39;immatriculation
     * Cette API permet de mettre à jour ou compléter certaines informations personnelles d&#39;un apprenant.  Une fois la mise à jour effectuée l&#39;API tente d&#39;obtenir le numéro INE de l&#39;étudiant.  A noter, la modification des informations personnes d&#39;un apprenant est interdite dès que sont numéro INE est confirmé 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param informationsPersonnellesRequest Les données personnelles nécessaires à l&#39;immatriculation à modifier  (optional)
     * @return ApiResponse&lt;IdentiteImmatriculeeDetail&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Apprenant récupéré </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erreur fonctionnelle  Exemple: lorsque l&#39;INE est confirmé sur un apprenant, il n&#39;est plus  permis de modifier les données personnelles de l&#39;apprenant  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès interdit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant non trouvé </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IdentiteImmatriculeeDetail> modifierInfosPersonnellesPourImmatriculerWithHttpInfo(String codeStructure, UUID id, InformationsPersonnellesRequest informationsPersonnellesRequest) throws ApiException {
        okhttp3.Call localVarCall = modifierInfosPersonnellesPourImmatriculerValidateBeforeCall(codeStructure, id, informationsPersonnellesRequest, null);
        Type localVarReturnType = new TypeToken<IdentiteImmatriculeeDetail>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modifier les informations personnelles d&#39;un apprenant nécessaires à l&#39;immatriculation (asynchronously)
     * Cette API permet de mettre à jour ou compléter certaines informations personnelles d&#39;un apprenant.  Une fois la mise à jour effectuée l&#39;API tente d&#39;obtenir le numéro INE de l&#39;étudiant.  A noter, la modification des informations personnes d&#39;un apprenant est interdite dès que sont numéro INE est confirmé 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param id Identifiant d&#39;une ressource (required)
     * @param informationsPersonnellesRequest Les données personnelles nécessaires à l&#39;immatriculation à modifier  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Apprenant récupéré </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erreur fonctionnelle  Exemple: lorsque l&#39;INE est confirmé sur un apprenant, il n&#39;est plus  permis de modifier les données personnelles de l&#39;apprenant  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès interdit </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant non trouvé </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierInfosPersonnellesPourImmatriculerAsync(String codeStructure, UUID id, InformationsPersonnellesRequest informationsPersonnellesRequest, final ApiCallback<IdentiteImmatriculeeDetail> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifierInfosPersonnellesPourImmatriculerValidateBeforeCall(codeStructure, id, informationsPersonnellesRequest, _callback);
        Type localVarReturnType = new TypeToken<IdentiteImmatriculeeDetail>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rechercherIdentiteApprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param prenom Filtre sur le prénom. Ce critère sera utilisé pour retourner des identités dont le prénom est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param nom Filtre sur le nom. Ce critère sera utilisé pour retourner des identités dont le nom usuel est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param codeApprenant Filtre sur le code apprenant. Ce critère sera utilisé pour retourner des identités dont le code apprenant est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param ine Filtre sur les INE de l&#39;apprenant. Ce critère sera utilisé pour retourner des identités dont au moins un INE est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param actif Filtre sur les personnes. Ce critère sera utilisé pour retourner des identités dont au moins un INE est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param exact Si false, désactive la recherche exacte. Et une recherche partielle est effectuée. Par défaut à true.  (optional)
     * @param doublonPotentiel Filtre sur les apprenants ayant le témoin doublone potentiel.  (optional)
     * @param etatIneMaitre Filtre sur l&#39;état de l&#39;ine maître  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identite correspondant aux critères de recherche </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Les paramètres de recherche sont invalides </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rechercherIdentiteApprenantCall(String codeStructure, Pageable pageable, String prenom, String nom, String codeApprenant, String ine, Boolean actif, Boolean exact, Boolean doublonPotentiel, StatutIne etatIneMaitre, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/identites/apprenants"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        if (prenom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prenom", prenom));
        }

        if (nom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nom", nom));
        }

        if (codeApprenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeApprenant", codeApprenant));
        }

        if (ine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ine", ine));
        }

        if (actif != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actif", actif));
        }

        if (exact != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exact", exact));
        }

        if (doublonPotentiel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("doublonPotentiel", doublonPotentiel));
        }

        if (etatIneMaitre != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etatIneMaitre", etatIneMaitre));
        }

        final String[] localVarAccepts = {
            "application/json", "json/application"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rechercherIdentiteApprenantValidateBeforeCall(String codeStructure, Pageable pageable, String prenom, String nom, String codeApprenant, String ine, Boolean actif, Boolean exact, Boolean doublonPotentiel, StatutIne etatIneMaitre, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling rechercherIdentiteApprenant(Async)");
        }
        

        okhttp3.Call localVarCall = rechercherIdentiteApprenantCall(codeStructure, pageable, prenom, nom, codeApprenant, ine, actif, exact, doublonPotentiel, etatIneMaitre, _callback);
        return localVarCall;

    }

    /**
     * Rechercher des identites d&#39;apprenants
     * Rechercher des identites d&#39;apprenants 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param prenom Filtre sur le prénom. Ce critère sera utilisé pour retourner des identités dont le prénom est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param nom Filtre sur le nom. Ce critère sera utilisé pour retourner des identités dont le nom usuel est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param codeApprenant Filtre sur le code apprenant. Ce critère sera utilisé pour retourner des identités dont le code apprenant est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param ine Filtre sur les INE de l&#39;apprenant. Ce critère sera utilisé pour retourner des identités dont au moins un INE est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param actif Filtre sur les personnes. Ce critère sera utilisé pour retourner des identités dont au moins un INE est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param exact Si false, désactive la recherche exacte. Et une recherche partielle est effectuée. Par défaut à true.  (optional)
     * @param doublonPotentiel Filtre sur les apprenants ayant le témoin doublone potentiel.  (optional)
     * @param etatIneMaitre Filtre sur l&#39;état de l&#39;ine maître  (optional)
     * @return PagedIdentiteApprenantSummaries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identite correspondant aux critères de recherche </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Les paramètres de recherche sont invalides </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public PagedIdentiteApprenantSummaries rechercherIdentiteApprenant(String codeStructure, Pageable pageable, String prenom, String nom, String codeApprenant, String ine, Boolean actif, Boolean exact, Boolean doublonPotentiel, StatutIne etatIneMaitre) throws ApiException {
        ApiResponse<PagedIdentiteApprenantSummaries> localVarResp = rechercherIdentiteApprenantWithHttpInfo(codeStructure, pageable, prenom, nom, codeApprenant, ine, actif, exact, doublonPotentiel, etatIneMaitre);
        return localVarResp.getData();
    }

    /**
     * Rechercher des identites d&#39;apprenants
     * Rechercher des identites d&#39;apprenants 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param prenom Filtre sur le prénom. Ce critère sera utilisé pour retourner des identités dont le prénom est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param nom Filtre sur le nom. Ce critère sera utilisé pour retourner des identités dont le nom usuel est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param codeApprenant Filtre sur le code apprenant. Ce critère sera utilisé pour retourner des identités dont le code apprenant est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param ine Filtre sur les INE de l&#39;apprenant. Ce critère sera utilisé pour retourner des identités dont au moins un INE est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param actif Filtre sur les personnes. Ce critère sera utilisé pour retourner des identités dont au moins un INE est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param exact Si false, désactive la recherche exacte. Et une recherche partielle est effectuée. Par défaut à true.  (optional)
     * @param doublonPotentiel Filtre sur les apprenants ayant le témoin doublone potentiel.  (optional)
     * @param etatIneMaitre Filtre sur l&#39;état de l&#39;ine maître  (optional)
     * @return ApiResponse&lt;PagedIdentiteApprenantSummaries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identite correspondant aux critères de recherche </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Les paramètres de recherche sont invalides </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedIdentiteApprenantSummaries> rechercherIdentiteApprenantWithHttpInfo(String codeStructure, Pageable pageable, String prenom, String nom, String codeApprenant, String ine, Boolean actif, Boolean exact, Boolean doublonPotentiel, StatutIne etatIneMaitre) throws ApiException {
        okhttp3.Call localVarCall = rechercherIdentiteApprenantValidateBeforeCall(codeStructure, pageable, prenom, nom, codeApprenant, ine, actif, exact, doublonPotentiel, etatIneMaitre, null);
        Type localVarReturnType = new TypeToken<PagedIdentiteApprenantSummaries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rechercher des identites d&#39;apprenants (asynchronously)
     * Rechercher des identites d&#39;apprenants 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param prenom Filtre sur le prénom. Ce critère sera utilisé pour retourner des identités dont le prénom est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param nom Filtre sur le nom. Ce critère sera utilisé pour retourner des identités dont le nom usuel est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param codeApprenant Filtre sur le code apprenant. Ce critère sera utilisé pour retourner des identités dont le code apprenant est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param ine Filtre sur les INE de l&#39;apprenant. Ce critère sera utilisé pour retourner des identités dont au moins un INE est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param actif Filtre sur les personnes. Ce critère sera utilisé pour retourner des identités dont au moins un INE est ou contient | cette valeur suivant le positionnement du paramètre de recherche exacte.  (optional)
     * @param exact Si false, désactive la recherche exacte. Et une recherche partielle est effectuée. Par défaut à true.  (optional)
     * @param doublonPotentiel Filtre sur les apprenants ayant le témoin doublone potentiel.  (optional)
     * @param etatIneMaitre Filtre sur l&#39;état de l&#39;ine maître  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identite correspondant aux critères de recherche </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Les paramètres de recherche sont invalides </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Erreur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rechercherIdentiteApprenantAsync(String codeStructure, Pageable pageable, String prenom, String nom, String codeApprenant, String ine, Boolean actif, Boolean exact, Boolean doublonPotentiel, StatutIne etatIneMaitre, final ApiCallback<PagedIdentiteApprenantSummaries> _callback) throws ApiException {

        okhttp3.Call localVarCall = rechercherIdentiteApprenantValidateBeforeCall(codeStructure, pageable, prenom, nom, codeApprenant, ine, actif, exact, doublonPotentiel, etatIneMaitre, _callback);
        Type localVarReturnType = new TypeToken<PagedIdentiteApprenantSummaries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
