/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.idt.model;

import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModelProperty;

import java.util.Objects;

/**
 * Ine
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T10:08:07.402704300+02:00[Europe/Paris]")
public class Ine {
  public static final String SERIALIZED_NAME_INE = "ine";
  public static final String SERIALIZED_NAME_CONFIRME = "confirme";
  public static final String SERIALIZED_NAME_MAITRE = "maitre";
  @SerializedName(SERIALIZED_NAME_INE)
  private String ine;
  @SerializedName(SERIALIZED_NAME_CONFIRME)
  private Boolean confirme;
  @SerializedName(SERIALIZED_NAME_MAITRE)
  private Boolean maitre;

  public Ine() { 
  }

  public Ine ine(String ine) {
    
    this.ine = ine;
    return this;
  }

   /**
   * INE de l&#39;apprenant
   * @return ine
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "INE de l'apprenant")

  public String getIne() {
    return ine;
  }


  public void setIne(String ine) {
    this.ine = ine;
  }


  public Ine confirme(Boolean confirme) {
    
    this.confirme = confirme;
    return this;
  }

   /**
   * Statut de confirmation de l&#39;INE
   * @return confirme
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Statut de confirmation de l'INE")

  public Boolean getConfirme() {
    return confirme;
  }


  public void setConfirme(Boolean confirme) {
    this.confirme = confirme;
  }


  public Ine maitre(Boolean maitre) {
    
    this.maitre = maitre;
    return this;
  }

   /**
   * Statut maître pour l&#39;INE
   * @return maitre
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Statut maître pour l'INE")

  public Boolean getMaitre() {
    return maitre;
  }


  public void setMaitre(Boolean maitre) {
    this.maitre = maitre;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ine ine = (Ine) o;
    return Objects.equals(this.ine, ine.ine) &&
        Objects.equals(this.confirme, ine.confirme) &&
        Objects.equals(this.maitre, ine.maitre);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ine, confirme, maitre);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ine {\n");
    sb.append("    ine: ").append(toIndentedString(ine)).append("\n");
    sb.append("    confirme: ").append(toIndentedString(confirme)).append("\n");
    sb.append("    maitre: ").append(toIndentedString(maitre)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

