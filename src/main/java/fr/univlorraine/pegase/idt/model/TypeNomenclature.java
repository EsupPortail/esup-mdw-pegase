/*
 * IDT V1 
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.idt.model;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * Liste des codes de nomenclatures utilisables dans le champ type de chaque champ de nomenclature
 */
@JsonAdapter(TypeNomenclature.Adapter.class)
public enum TypeNomenclature {
  
  COMMUNENAISSANCE("COMMUNENAISSANCE"),
  
  DEPARTEMENT("DEPARTEMENT"),
  
  ETABLISSEMENTFRANCAIS("ETABLISSEMENTFRANCAIS"),
  
  MENTIONBAC("MENTIONBAC"),
  
  PAYSETNATIONALITES("PAYSETNATIONALITES"),
  
  PROFESSIONSETCATEGORIESSOCIOPRO("PROFESSIONSETCATEGORIESSOCIOPRO"),
  
  QUOTITESACTIVITE("QUOTITESACTIVITE"),
  
  SERIESBACETEQUIVALENT("SERIESBACETEQUIVALENT"),
  
  SITUATIONSFAMILIALES("SITUATIONSFAMILIALES"),
  
  SITUATIONSMILITAIRES("SITUATIONSMILITAIRES"),
  
  SPECIALITESBACGENERAL("SPECIALITESBACGENERAL"),
  
  TITRESACCESENSEIGNEMENTSUP("TITRESACCESENSEIGNEMENTSUP");

  private String value;

  TypeNomenclature(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TypeNomenclature fromValue(String value) {
    for (TypeNomenclature b : TypeNomenclature.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TypeNomenclature> {
    @Override
    public void write(final JsonWriter jsonWriter, final TypeNomenclature enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TypeNomenclature read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TypeNomenclature.fromValue(value);
    }
  }
}

