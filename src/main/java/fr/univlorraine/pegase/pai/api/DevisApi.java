/*
 * PAI v1 - Paiement
 * API pour la gestion des paiements
 *
 * The version of the OpenAPI document: 27.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.pai.api;

import fr.univlorraine.pegase.pai.invoker.ApiCallback;
import fr.univlorraine.pegase.pai.invoker.ApiClient;
import fr.univlorraine.pegase.pai.invoker.ApiException;
import fr.univlorraine.pegase.pai.invoker.ApiResponse;
import fr.univlorraine.pegase.pai.invoker.Configuration;
import fr.univlorraine.pegase.pai.invoker.Pair;
import fr.univlorraine.pegase.pai.invoker.ProgressRequestBody;
import fr.univlorraine.pegase.pai.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.pai.model.DevisView;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DevisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DevisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DevisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for devisAnnulationInscriptionApprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @param avecRemboursement témoin de remboursement (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devisAnnulationInscriptionApprenantCall(String codeStructure, String codeApprenant, String codePeriode, String codeFormation, String codeChemin, Boolean avecRemboursement, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/devis/annulation/{codeStructure}/{codeApprenant}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeFormation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeFormation", codeFormation));
        }

        if (codeChemin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeChemin", codeChemin));
        }

        if (avecRemboursement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avecRemboursement", avecRemboursement));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devisAnnulationInscriptionApprenantValidateBeforeCall(String codeStructure, String codeApprenant, String codePeriode, String codeFormation, String codeChemin, Boolean avecRemboursement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling devisAnnulationInscriptionApprenant(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling devisAnnulationInscriptionApprenant(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling devisAnnulationInscriptionApprenant(Async)");
        }
        

        okhttp3.Call localVarCall = devisAnnulationInscriptionApprenantCall(codeStructure, codeApprenant, codePeriode, codeFormation, codeChemin, avecRemboursement, _callback);
        return localVarCall;

    }

    /**
     * Devis annulation inscription apprenant
     * Récupère le devis de l&#39;annulation d&#39;inscription d&#39;un apprenant.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @param avecRemboursement témoin de remboursement (optional)
     * @return DevisView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public DevisView devisAnnulationInscriptionApprenant(String codeStructure, String codeApprenant, String codePeriode, String codeFormation, String codeChemin, Boolean avecRemboursement) throws ApiException {
        ApiResponse<DevisView> localVarResp = devisAnnulationInscriptionApprenantWithHttpInfo(codeStructure, codeApprenant, codePeriode, codeFormation, codeChemin, avecRemboursement);
        return localVarResp.getData();
    }

    /**
     * Devis annulation inscription apprenant
     * Récupère le devis de l&#39;annulation d&#39;inscription d&#39;un apprenant.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @param avecRemboursement témoin de remboursement (optional)
     * @return ApiResponse&lt;DevisView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DevisView> devisAnnulationInscriptionApprenantWithHttpInfo(String codeStructure, String codeApprenant, String codePeriode, String codeFormation, String codeChemin, Boolean avecRemboursement) throws ApiException {
        okhttp3.Call localVarCall = devisAnnulationInscriptionApprenantValidateBeforeCall(codeStructure, codeApprenant, codePeriode, codeFormation, codeChemin, avecRemboursement, null);
        Type localVarReturnType = new TypeToken<DevisView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Devis annulation inscription apprenant (asynchronously)
     * Récupère le devis de l&#39;annulation d&#39;inscription d&#39;un apprenant.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @param avecRemboursement témoin de remboursement (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devisAnnulationInscriptionApprenantAsync(String codeStructure, String codeApprenant, String codePeriode, String codeFormation, String codeChemin, Boolean avecRemboursement, final ApiCallback<DevisView> _callback) throws ApiException {

        okhttp3.Call localVarCall = devisAnnulationInscriptionApprenantValidateBeforeCall(codeStructure, codeApprenant, codePeriode, codeFormation, codeChemin, avecRemboursement, _callback);
        Type localVarReturnType = new TypeToken<DevisView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devisInscriptionApprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param clientNationaliteTemoinAccords témoin de l&#39;accord client nationalité (required)
     * @param principale témoin inscription principale (required)
     * @param codeProfilsSpecifiques liste des codes profils spécifiques (optional)
     * @param codeBoursesOuAidesFinancieres liste des codes bourses ou aides financières (optional)
     * @param codeRegimeInscription code du régime d&#39;inscription (optional)
     * @param cesure type de la césure (optional)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devisInscriptionApprenantCall(String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/devis/{codeStructure}/{codeApprenant}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (clientNationaliteTemoinAccords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientNationaliteTemoinAccords", clientNationaliteTemoinAccords));
        }

        if (principale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("principale", principale));
        }

        if (codeProfilsSpecifiques != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "codeProfilsSpecifiques", codeProfilsSpecifiques));
        }

        if (codeBoursesOuAidesFinancieres != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "codeBoursesOuAidesFinancieres", codeBoursesOuAidesFinancieres));
        }

        if (codeRegimeInscription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeRegimeInscription", codeRegimeInscription));
        }

        if (cesure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cesure", cesure));
        }

        if (codeFormation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeFormation", codeFormation));
        }

        if (codeChemin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeChemin", codeChemin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devisInscriptionApprenantValidateBeforeCall(String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling devisInscriptionApprenant(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling devisInscriptionApprenant(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling devisInscriptionApprenant(Async)");
        }
        
        // verify the required parameter 'clientNationaliteTemoinAccords' is set
        if (clientNationaliteTemoinAccords == null) {
            throw new ApiException("Missing the required parameter 'clientNationaliteTemoinAccords' when calling devisInscriptionApprenant(Async)");
        }
        
        // verify the required parameter 'principale' is set
        if (principale == null) {
            throw new ApiException("Missing the required parameter 'principale' when calling devisInscriptionApprenant(Async)");
        }
        

        okhttp3.Call localVarCall = devisInscriptionApprenantCall(codeStructure, codeApprenant, codePeriode, clientNationaliteTemoinAccords, principale, codeProfilsSpecifiques, codeBoursesOuAidesFinancieres, codeRegimeInscription, cesure, codeFormation, codeChemin, _callback);
        return localVarCall;

    }

    /**
     * Devis inscription apprenant
     * Récupère le devis d&#39;une inscription d&#39;un apprenant.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param clientNationaliteTemoinAccords témoin de l&#39;accord client nationalité (required)
     * @param principale témoin inscription principale (required)
     * @param codeProfilsSpecifiques liste des codes profils spécifiques (optional)
     * @param codeBoursesOuAidesFinancieres liste des codes bourses ou aides financières (optional)
     * @param codeRegimeInscription code du régime d&#39;inscription (optional)
     * @param cesure type de la césure (optional)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @return DevisView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public DevisView devisInscriptionApprenant(String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin) throws ApiException {
        ApiResponse<DevisView> localVarResp = devisInscriptionApprenantWithHttpInfo(codeStructure, codeApprenant, codePeriode, clientNationaliteTemoinAccords, principale, codeProfilsSpecifiques, codeBoursesOuAidesFinancieres, codeRegimeInscription, cesure, codeFormation, codeChemin);
        return localVarResp.getData();
    }

    /**
     * Devis inscription apprenant
     * Récupère le devis d&#39;une inscription d&#39;un apprenant.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param clientNationaliteTemoinAccords témoin de l&#39;accord client nationalité (required)
     * @param principale témoin inscription principale (required)
     * @param codeProfilsSpecifiques liste des codes profils spécifiques (optional)
     * @param codeBoursesOuAidesFinancieres liste des codes bourses ou aides financières (optional)
     * @param codeRegimeInscription code du régime d&#39;inscription (optional)
     * @param cesure type de la césure (optional)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @return ApiResponse&lt;DevisView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DevisView> devisInscriptionApprenantWithHttpInfo(String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin) throws ApiException {
        okhttp3.Call localVarCall = devisInscriptionApprenantValidateBeforeCall(codeStructure, codeApprenant, codePeriode, clientNationaliteTemoinAccords, principale, codeProfilsSpecifiques, codeBoursesOuAidesFinancieres, codeRegimeInscription, cesure, codeFormation, codeChemin, null);
        Type localVarReturnType = new TypeToken<DevisView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Devis inscription apprenant (asynchronously)
     * Récupère le devis d&#39;une inscription d&#39;un apprenant.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param clientNationaliteTemoinAccords témoin de l&#39;accord client nationalité (required)
     * @param principale témoin inscription principale (required)
     * @param codeProfilsSpecifiques liste des codes profils spécifiques (optional)
     * @param codeBoursesOuAidesFinancieres liste des codes bourses ou aides financières (optional)
     * @param codeRegimeInscription code du régime d&#39;inscription (optional)
     * @param cesure type de la césure (optional)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devisInscriptionApprenantAsync(String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin, final ApiCallback<DevisView> _callback) throws ApiException {

        okhttp3.Call localVarCall = devisInscriptionApprenantValidateBeforeCall(codeStructure, codeApprenant, codePeriode, clientNationaliteTemoinAccords, principale, codeProfilsSpecifiques, codeBoursesOuAidesFinancieres, codeRegimeInscription, cesure, codeFormation, codeChemin, _callback);
        Type localVarReturnType = new TypeToken<DevisView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for devisInscriptionApprenantRetourPaybox
     * @param ref Référence commande : espace URL encodé (required)
     * @param reponse Code réponse de la transaction (required)
     * @param signature Signature sur les variables de l’URL. Format : url-encodé (required)
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param clientNationaliteTemoinAccords témoin de l&#39;accord client nationalité (required)
     * @param principale témoin inscription principale (required)
     * @param identifiantComptePaybox l&#39;identifiant du compte PayBox (required)
     * @param autorisation Numéro d’Autorisation (numéro remis par le centre d’autorisation) : URL encodé (optional)
     * @param date Date de fin de validité de la carte du porteur. Format : JJMMAAAA (optional)
     * @param etat Etat de l’authentification du porteur vis-à-vis du programme 3-D Secure:Y:Porteur authentifiéA:Authentification du porteur forcée par la banque de l’acheteur U:L’authentification du porteur n’a pas pu s’effectuerN:Porteur non authentifié (optional)
     * @param heure Heure de traitement de la transaction. Format : HH:MM:SS (24h) (optional)
     * @param montant Montant de la transaction en centimes. (optional)
     * @param transaction Numéro de transaction Paybox (optional)
     * @param version 3D-Secure version (optional)
     * @param type 3D-Secure authentication type: FR: For a Frictionless authentication, CH: For an authentication with Challenge. (optional)
     * @param codeProfilsSpecifiques liste des codes profils spécifiques (optional)
     * @param codeBoursesOuAidesFinancieres liste des codes bourses ou aides financières (optional)
     * @param codeRegimeInscription code du régime d&#39;inscription (optional)
     * @param cesure type de la césure (optional)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devisInscriptionApprenantRetourPayboxCall(String ref, String reponse, String signature, String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, String identifiantComptePaybox, String autorisation, String date, String etat, String heure, String montant, String transaction, String version, String type, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/devis/{codeStructure}/{codeApprenant}/{codePeriode}/retourPaybox"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (autorisation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autorisation", autorisation));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (etat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("etat", etat));
        }

        if (heure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heure", heure));
        }

        if (montant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("montant", montant));
        }

        if (ref != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ref", ref));
        }

        if (reponse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("reponse", reponse));
        }

        if (signature != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("signature", signature));
        }

        if (transaction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transaction", transaction));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (clientNationaliteTemoinAccords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("clientNationaliteTemoinAccords", clientNationaliteTemoinAccords));
        }

        if (principale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("principale", principale));
        }

        if (codeProfilsSpecifiques != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "codeProfilsSpecifiques", codeProfilsSpecifiques));
        }

        if (codeBoursesOuAidesFinancieres != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "codeBoursesOuAidesFinancieres", codeBoursesOuAidesFinancieres));
        }

        if (codeRegimeInscription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeRegimeInscription", codeRegimeInscription));
        }

        if (cesure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cesure", cesure));
        }

        if (codeFormation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeFormation", codeFormation));
        }

        if (codeChemin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeChemin", codeChemin));
        }

        if (identifiantComptePaybox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifiantComptePaybox", identifiantComptePaybox));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call devisInscriptionApprenantRetourPayboxValidateBeforeCall(String ref, String reponse, String signature, String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, String identifiantComptePaybox, String autorisation, String date, String etat, String heure, String montant, String transaction, String version, String type, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'ref' is set
        if (ref == null) {
            throw new ApiException("Missing the required parameter 'ref' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        
        // verify the required parameter 'reponse' is set
        if (reponse == null) {
            throw new ApiException("Missing the required parameter 'reponse' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        
        // verify the required parameter 'signature' is set
        if (signature == null) {
            throw new ApiException("Missing the required parameter 'signature' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        
        // verify the required parameter 'clientNationaliteTemoinAccords' is set
        if (clientNationaliteTemoinAccords == null) {
            throw new ApiException("Missing the required parameter 'clientNationaliteTemoinAccords' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        
        // verify the required parameter 'principale' is set
        if (principale == null) {
            throw new ApiException("Missing the required parameter 'principale' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        
        // verify the required parameter 'identifiantComptePaybox' is set
        if (identifiantComptePaybox == null) {
            throw new ApiException("Missing the required parameter 'identifiantComptePaybox' when calling devisInscriptionApprenantRetourPaybox(Async)");
        }
        

        okhttp3.Call localVarCall = devisInscriptionApprenantRetourPayboxCall(ref, reponse, signature, codeStructure, codeApprenant, codePeriode, clientNationaliteTemoinAccords, principale, identifiantComptePaybox, autorisation, date, etat, heure, montant, transaction, version, type, codeProfilsSpecifiques, codeBoursesOuAidesFinancieres, codeRegimeInscription, cesure, codeFormation, codeChemin, _callback);
        return localVarCall;

    }

    /**
     * Devis inscription apprenant retour PayBox
     * Récupère le devis d&#39;une inscription d&#39;un apprenant après un retour PayBox.
     * @param ref Référence commande : espace URL encodé (required)
     * @param reponse Code réponse de la transaction (required)
     * @param signature Signature sur les variables de l’URL. Format : url-encodé (required)
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param clientNationaliteTemoinAccords témoin de l&#39;accord client nationalité (required)
     * @param principale témoin inscription principale (required)
     * @param identifiantComptePaybox l&#39;identifiant du compte PayBox (required)
     * @param autorisation Numéro d’Autorisation (numéro remis par le centre d’autorisation) : URL encodé (optional)
     * @param date Date de fin de validité de la carte du porteur. Format : JJMMAAAA (optional)
     * @param etat Etat de l’authentification du porteur vis-à-vis du programme 3-D Secure:Y:Porteur authentifiéA:Authentification du porteur forcée par la banque de l’acheteur U:L’authentification du porteur n’a pas pu s’effectuerN:Porteur non authentifié (optional)
     * @param heure Heure de traitement de la transaction. Format : HH:MM:SS (24h) (optional)
     * @param montant Montant de la transaction en centimes. (optional)
     * @param transaction Numéro de transaction Paybox (optional)
     * @param version 3D-Secure version (optional)
     * @param type 3D-Secure authentication type: FR: For a Frictionless authentication, CH: For an authentication with Challenge. (optional)
     * @param codeProfilsSpecifiques liste des codes profils spécifiques (optional)
     * @param codeBoursesOuAidesFinancieres liste des codes bourses ou aides financières (optional)
     * @param codeRegimeInscription code du régime d&#39;inscription (optional)
     * @param cesure type de la césure (optional)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @return DevisView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public DevisView devisInscriptionApprenantRetourPaybox(String ref, String reponse, String signature, String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, String identifiantComptePaybox, String autorisation, String date, String etat, String heure, String montant, String transaction, String version, String type, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin) throws ApiException {
        ApiResponse<DevisView> localVarResp = devisInscriptionApprenantRetourPayboxWithHttpInfo(ref, reponse, signature, codeStructure, codeApprenant, codePeriode, clientNationaliteTemoinAccords, principale, identifiantComptePaybox, autorisation, date, etat, heure, montant, transaction, version, type, codeProfilsSpecifiques, codeBoursesOuAidesFinancieres, codeRegimeInscription, cesure, codeFormation, codeChemin);
        return localVarResp.getData();
    }

    /**
     * Devis inscription apprenant retour PayBox
     * Récupère le devis d&#39;une inscription d&#39;un apprenant après un retour PayBox.
     * @param ref Référence commande : espace URL encodé (required)
     * @param reponse Code réponse de la transaction (required)
     * @param signature Signature sur les variables de l’URL. Format : url-encodé (required)
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param clientNationaliteTemoinAccords témoin de l&#39;accord client nationalité (required)
     * @param principale témoin inscription principale (required)
     * @param identifiantComptePaybox l&#39;identifiant du compte PayBox (required)
     * @param autorisation Numéro d’Autorisation (numéro remis par le centre d’autorisation) : URL encodé (optional)
     * @param date Date de fin de validité de la carte du porteur. Format : JJMMAAAA (optional)
     * @param etat Etat de l’authentification du porteur vis-à-vis du programme 3-D Secure:Y:Porteur authentifiéA:Authentification du porteur forcée par la banque de l’acheteur U:L’authentification du porteur n’a pas pu s’effectuerN:Porteur non authentifié (optional)
     * @param heure Heure de traitement de la transaction. Format : HH:MM:SS (24h) (optional)
     * @param montant Montant de la transaction en centimes. (optional)
     * @param transaction Numéro de transaction Paybox (optional)
     * @param version 3D-Secure version (optional)
     * @param type 3D-Secure authentication type: FR: For a Frictionless authentication, CH: For an authentication with Challenge. (optional)
     * @param codeProfilsSpecifiques liste des codes profils spécifiques (optional)
     * @param codeBoursesOuAidesFinancieres liste des codes bourses ou aides financières (optional)
     * @param codeRegimeInscription code du régime d&#39;inscription (optional)
     * @param cesure type de la césure (optional)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @return ApiResponse&lt;DevisView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DevisView> devisInscriptionApprenantRetourPayboxWithHttpInfo(String ref, String reponse, String signature, String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, String identifiantComptePaybox, String autorisation, String date, String etat, String heure, String montant, String transaction, String version, String type, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin) throws ApiException {
        okhttp3.Call localVarCall = devisInscriptionApprenantRetourPayboxValidateBeforeCall(ref, reponse, signature, codeStructure, codeApprenant, codePeriode, clientNationaliteTemoinAccords, principale, identifiantComptePaybox, autorisation, date, etat, heure, montant, transaction, version, type, codeProfilsSpecifiques, codeBoursesOuAidesFinancieres, codeRegimeInscription, cesure, codeFormation, codeChemin, null);
        Type localVarReturnType = new TypeToken<DevisView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Devis inscription apprenant retour PayBox (asynchronously)
     * Récupère le devis d&#39;une inscription d&#39;un apprenant après un retour PayBox.
     * @param ref Référence commande : espace URL encodé (required)
     * @param reponse Code réponse de la transaction (required)
     * @param signature Signature sur les variables de l’URL. Format : url-encodé (required)
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param clientNationaliteTemoinAccords témoin de l&#39;accord client nationalité (required)
     * @param principale témoin inscription principale (required)
     * @param identifiantComptePaybox l&#39;identifiant du compte PayBox (required)
     * @param autorisation Numéro d’Autorisation (numéro remis par le centre d’autorisation) : URL encodé (optional)
     * @param date Date de fin de validité de la carte du porteur. Format : JJMMAAAA (optional)
     * @param etat Etat de l’authentification du porteur vis-à-vis du programme 3-D Secure:Y:Porteur authentifiéA:Authentification du porteur forcée par la banque de l’acheteur U:L’authentification du porteur n’a pas pu s’effectuerN:Porteur non authentifié (optional)
     * @param heure Heure de traitement de la transaction. Format : HH:MM:SS (24h) (optional)
     * @param montant Montant de la transaction en centimes. (optional)
     * @param transaction Numéro de transaction Paybox (optional)
     * @param version 3D-Secure version (optional)
     * @param type 3D-Secure authentication type: FR: For a Frictionless authentication, CH: For an authentication with Challenge. (optional)
     * @param codeProfilsSpecifiques liste des codes profils spécifiques (optional)
     * @param codeBoursesOuAidesFinancieres liste des codes bourses ou aides financières (optional)
     * @param codeRegimeInscription code du régime d&#39;inscription (optional)
     * @param cesure type de la césure (optional)
     * @param codeFormation code de la formation de la cible d&#39;inscription (optional)
     * @param codeChemin chemin de la cible d&#39;inscription (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le devis correspondant à cette inscription pour cet apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call devisInscriptionApprenantRetourPayboxAsync(String ref, String reponse, String signature, String codeStructure, String codeApprenant, String codePeriode, Boolean clientNationaliteTemoinAccords, Boolean principale, String identifiantComptePaybox, String autorisation, String date, String etat, String heure, String montant, String transaction, String version, String type, List<String> codeProfilsSpecifiques, List<String> codeBoursesOuAidesFinancieres, String codeRegimeInscription, String cesure, String codeFormation, String codeChemin, final ApiCallback<DevisView> _callback) throws ApiException {

        okhttp3.Call localVarCall = devisInscriptionApprenantRetourPayboxValidateBeforeCall(ref, reponse, signature, codeStructure, codeApprenant, codePeriode, clientNationaliteTemoinAccords, principale, identifiantComptePaybox, autorisation, date, etat, heure, montant, transaction, version, type, codeProfilsSpecifiques, codeBoursesOuAidesFinancieres, codeRegimeInscription, cesure, codeFormation, codeChemin, _callback);
        Type localVarReturnType = new TypeToken<DevisView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
