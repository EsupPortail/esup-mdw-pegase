/*
 * PAI v1 - Paiement
 * API pour la gestion des paiements
 *
 * The version of the OpenAPI document: 27.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.pai.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * DroitCombinaisonCritere
 */
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-28T10:28:00.271684800+02:00[Europe/Paris]")
public class DroitCombinaisonCritere {
  public static final String SERIALIZED_NAME_CODE_CRITERE = "codeCritere";
  public static final String SERIALIZED_NAME_OPERATEUR = "operateur";
  public static final String SERIALIZED_NAME_LISTE_VALEUR = "listeValeur";
  @SerializedName(SERIALIZED_NAME_CODE_CRITERE)
  private String codeCritere;
  @SerializedName(SERIALIZED_NAME_OPERATEUR)
  private OperateurEnum operateur;
  @SerializedName(SERIALIZED_NAME_LISTE_VALEUR)
  private List<String> listeValeur = new ArrayList<String>();
  public DroitCombinaisonCritere() {
  }

  public DroitCombinaisonCritere codeCritere(String codeCritere) {

    this.codeCritere = codeCritere;
    return this;
  }

   /**
   * La code du critères
   * @return codeCritere
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "La code du critères")

  public String getCodeCritere() {
    return codeCritere;
  }

  public void setCodeCritere(String codeCritere) {
    this.codeCritere = codeCritere;
  }

  public DroitCombinaisonCritere operateur(OperateurEnum operateur) {

    this.operateur = operateur;
    return this;
  }

   /**
   * L&#39;opérateur de comparaison
   * @return operateur
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "L'opérateur de comparaison")

  public OperateurEnum getOperateur() {
    return operateur;
  }

  public void setOperateur(OperateurEnum operateur) {
    this.operateur = operateur;
  }

  public DroitCombinaisonCritere listeValeur(List<String> listeValeur) {

    this.listeValeur = listeValeur;
    return this;
  }

  public DroitCombinaisonCritere addListeValeurItem(String listeValeurItem) {
    this.listeValeur.add(listeValeurItem);
    return this;
  }

   /**
   * La liste des valeurs à comparer
   * @return listeValeur
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "La liste des valeurs à comparer")

  public List<String> getListeValeur() {
    return listeValeur;
  }

  public void setListeValeur(List<String> listeValeur) {
    this.listeValeur = listeValeur;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DroitCombinaisonCritere droitCombinaisonCritere = (DroitCombinaisonCritere) o;
    return Objects.equals(this.codeCritere, droitCombinaisonCritere.codeCritere) &&
        Objects.equals(this.operateur, droitCombinaisonCritere.operateur) &&
        Objects.equals(this.listeValeur, droitCombinaisonCritere.listeValeur);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeCritere, operateur, listeValeur);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DroitCombinaisonCritere {\n");
    sb.append("    codeCritere: ").append(toIndentedString(codeCritere)).append("\n");
    sb.append("    operateur: ").append(toIndentedString(operateur)).append("\n");
    sb.append("    listeValeur: ").append(toIndentedString(listeValeur)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * L&#39;opérateur de comparaison
   */
  @JsonAdapter(OperateurEnum.Adapter.class)
  public enum OperateurEnum {
    EGAL("EGAL"),

    DIFFERENT("DIFFERENT");

    private String value;

    OperateurEnum(String value) {
      this.value = value;
    }

    public static OperateurEnum fromValue(String value) {
      for (OperateurEnum b : OperateurEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static class Adapter extends TypeAdapter<OperateurEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperateurEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperateurEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperateurEnum.fromValue(value);
      }
    }
  }

}

