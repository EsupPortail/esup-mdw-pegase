/*
 * PAI v1 - Paiement
 * API pour la gestion des paiements
 *
 * The version of the OpenAPI document: 21.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.pai;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.Date;
import java.io.File;
import fr.univlorraine.pegase.model.pai.LigneVentilationDeDroits;
import fr.univlorraine.pegase.model.pai.Pageable;
import fr.univlorraine.pegase.model.pai.PagedVentilations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VentilationDeDroitsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VentilationDeDroitsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VentilationDeDroitsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for annulerCloturerVentilationDeDroits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param id L&#39;id de la ventilation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été annulée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annulerCloturerVentilationDeDroitsCall(String codeStructure, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/annulation-cloture/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annulerCloturerVentilationDeDroitsValidateBeforeCall(String codeStructure, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling annulerCloturerVentilationDeDroits(Async)");
        }
        

        okhttp3.Call localVarCall = annulerCloturerVentilationDeDroitsCall(codeStructure, id, _callback);
        return localVarCall;

    }

    /**
     * Annulation de la clôture de la ventilation de droits
     * Annulation de la clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param id L&#39;id de la ventilation (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été annulée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public String annulerCloturerVentilationDeDroits(String codeStructure, Long id) throws ApiException {
        ApiResponse<String> localVarResp = annulerCloturerVentilationDeDroitsWithHttpInfo(codeStructure, id);
        return localVarResp.getData();
    }

    /**
     * Annulation de la clôture de la ventilation de droits
     * Annulation de la clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param id L&#39;id de la ventilation (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été annulée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> annulerCloturerVentilationDeDroitsWithHttpInfo(String codeStructure, Long id) throws ApiException {
        okhttp3.Call localVarCall = annulerCloturerVentilationDeDroitsValidateBeforeCall(codeStructure, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Annulation de la clôture de la ventilation de droits (asynchronously)
     * Annulation de la clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param id L&#39;id de la ventilation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été annulée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annulerCloturerVentilationDeDroitsAsync(String codeStructure, Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = annulerCloturerVentilationDeDroitsValidateBeforeCall(codeStructure, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cloturerVentilationDeDroits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param id L&#39;id de la ventilation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloturerVentilationDeDroitsCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/cloture/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        if (dateDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateDebut", dateDebut));
        }

        if (dateTimeDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeDebut", dateTimeDebut));
        }

        if (dateFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFin", dateFin));
        }

        if (dateTimeFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeFin", dateTimeFin));
        }

        if (numeroQuittanceDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceDebut", numeroQuittanceDebut));
        }

        if (numeroQuittanceFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceFin", numeroQuittanceFin));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloturerVentilationDeDroitsValidateBeforeCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling cloturerVentilationDeDroits(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling cloturerVentilationDeDroits(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling cloturerVentilationDeDroits(Async)");
        }
        

        okhttp3.Call localVarCall = cloturerVentilationDeDroitsCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, id, _callback);
        return localVarCall;

    }

    /**
     * Clôture de la ventilation de droits
     * Clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param id L&#39;id de la ventilation (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public String cloturerVentilationDeDroits(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id) throws ApiException {
        ApiResponse<String> localVarResp = cloturerVentilationDeDroitsWithHttpInfo(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, id);
        return localVarResp.getData();
    }

    /**
     * Clôture de la ventilation de droits
     * Clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param id L&#39;id de la ventilation (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> cloturerVentilationDeDroitsWithHttpInfo(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id) throws ApiException {
        okhttp3.Call localVarCall = cloturerVentilationDeDroitsValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clôture de la ventilation de droits (asynchronously)
     * Clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param id L&#39;id de la ventilation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloturerVentilationDeDroitsAsync(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloturerVentilationDeDroitsValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genererVentilationDeDroits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La génération de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genererVentilationDeDroitsCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateTimeDebut, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/generer/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        if (dateTimeDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeDebut", dateTimeDebut));
        }

        if (dateTimeFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeFin", dateTimeFin));
        }

        if (numeroQuittanceDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceDebut", numeroQuittanceDebut));
        }

        if (numeroQuittanceFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceFin", numeroQuittanceFin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genererVentilationDeDroitsValidateBeforeCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateTimeDebut, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling genererVentilationDeDroits(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling genererVentilationDeDroits(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling genererVentilationDeDroits(Async)");
        }
        

        okhttp3.Call localVarCall = genererVentilationDeDroitsCall(codeStructure, codePeriode, codeStructureBudgetaire, dateTimeDebut, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        return localVarCall;

    }

    /**
     * Génération de la ventilation de droits
     * Génération de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La génération de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public String genererVentilationDeDroits(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateTimeDebut, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        ApiResponse<String> localVarResp = genererVentilationDeDroitsWithHttpInfo(codeStructure, codePeriode, codeStructureBudgetaire, dateTimeDebut, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin);
        return localVarResp.getData();
    }

    /**
     * Génération de la ventilation de droits
     * Génération de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La génération de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> genererVentilationDeDroitsWithHttpInfo(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateTimeDebut, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        okhttp3.Call localVarCall = genererVentilationDeDroitsValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateTimeDebut, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Génération de la ventilation de droits (asynchronously)
     * Génération de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La génération de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genererVentilationDeDroitsAsync(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateTimeDebut, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = genererVentilationDeDroitsValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateTimeDebut, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireVentilationDeDroitsCsv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param id L&#39;id de la ventilation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireVentilationDeDroitsCsvCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/{codeStructure}/csv"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        if (dateDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateDebut", dateDebut));
        }

        if (dateTimeDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeDebut", dateTimeDebut));
        }

        if (dateFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFin", dateFin));
        }

        if (dateTimeFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeFin", dateTimeFin));
        }

        if (numeroQuittanceDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceDebut", numeroQuittanceDebut));
        }

        if (numeroQuittanceFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceFin", numeroQuittanceFin));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireVentilationDeDroitsCsvValidateBeforeCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireVentilationDeDroitsCsv(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireVentilationDeDroitsCsv(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling lireVentilationDeDroitsCsv(Async)");
        }
        

        okhttp3.Call localVarCall = lireVentilationDeDroitsCsvCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, id, _callback);
        return localVarCall;

    }

    /**
     * Récupération de la ventilation de droits au format csv
     * Récupération de la ventilation de droits au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param id L&#39;id de la ventilation (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File lireVentilationDeDroitsCsv(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id) throws ApiException {
        ApiResponse<File> localVarResp = lireVentilationDeDroitsCsvWithHttpInfo(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, id);
        return localVarResp.getData();
    }

    /**
     * Récupération de la ventilation de droits au format csv
     * Récupération de la ventilation de droits au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param id L&#39;id de la ventilation (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> lireVentilationDeDroitsCsvWithHttpInfo(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id) throws ApiException {
        okhttp3.Call localVarCall = lireVentilationDeDroitsCsvValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, id, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération de la ventilation de droits au format csv (asynchronously)
     * Récupération de la ventilation de droits au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param id L&#39;id de la ventilation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireVentilationDeDroitsCsvAsync(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, Long id, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireVentilationDeDroitsCsvValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, id, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireVentilationDeDroitsJson
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireVentilationDeDroitsJsonCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/{codeStructure}/json"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        if (dateDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateDebut", dateDebut));
        }

        if (dateTimeDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeDebut", dateTimeDebut));
        }

        if (dateFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFin", dateFin));
        }

        if (dateTimeFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeFin", dateTimeFin));
        }

        if (numeroQuittanceDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceDebut", numeroQuittanceDebut));
        }

        if (numeroQuittanceFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceFin", numeroQuittanceFin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireVentilationDeDroitsJsonValidateBeforeCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireVentilationDeDroitsJson(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireVentilationDeDroitsJson(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling lireVentilationDeDroitsJson(Async)");
        }
        

        okhttp3.Call localVarCall = lireVentilationDeDroitsJsonCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        return localVarCall;

    }

    /**
     * Récupération de la ventilation de droits au format json
     * Récupération de la ventilation de droits au format json
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return List&lt;LigneVentilationDeDroits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<LigneVentilationDeDroits> lireVentilationDeDroitsJson(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        ApiResponse<List<LigneVentilationDeDroits>> localVarResp = lireVentilationDeDroitsJsonWithHttpInfo(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin);
        return localVarResp.getData();
    }

    /**
     * Récupération de la ventilation de droits au format json
     * Récupération de la ventilation de droits au format json
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return ApiResponse&lt;List&lt;LigneVentilationDeDroits&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LigneVentilationDeDroits>> lireVentilationDeDroitsJsonWithHttpInfo(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        okhttp3.Call localVarCall = lireVentilationDeDroitsJsonValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, null);
        Type localVarReturnType = new TypeToken<List<LigneVentilationDeDroits>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération de la ventilation de droits au format json (asynchronously)
     * Récupération de la ventilation de droits au format json
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeDebut La date de début au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param dateTimeFin La date de fin au format \&quot;2018-01-31T05:20:30Z\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireVentilationDeDroitsJsonAsync(String codeStructure, String codePeriode, String codeStructureBudgetaire, Date dateDebut, Date dateTimeDebut, Date dateFin, Date dateTimeFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback<List<LigneVentilationDeDroits>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireVentilationDeDroitsJsonValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateTimeDebut, dateFin, dateTimeFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        Type localVarReturnType = new TypeToken<List<LigneVentilationDeDroits>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerVentilationDeDroits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des ventilations de droits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerVentilationDeDroitsCall(String codeStructure, Pageable pageable, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerVentilationDeDroitsValidateBeforeCall(String codeStructure, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerVentilationDeDroits(Async)");
        }
        

        okhttp3.Call localVarCall = listerVentilationDeDroitsCall(codeStructure, pageable, _callback);
        return localVarCall;

    }

    /**
     * Liste des ventilations de droits
     * Liste des ventilations de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @return PagedVentilations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des ventilations de droits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public PagedVentilations listerVentilationDeDroits(String codeStructure, Pageable pageable) throws ApiException {
        ApiResponse<PagedVentilations> localVarResp = listerVentilationDeDroitsWithHttpInfo(codeStructure, pageable);
        return localVarResp.getData();
    }

    /**
     * Liste des ventilations de droits
     * Liste des ventilations de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @return ApiResponse&lt;PagedVentilations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des ventilations de droits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedVentilations> listerVentilationDeDroitsWithHttpInfo(String codeStructure, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listerVentilationDeDroitsValidateBeforeCall(codeStructure, pageable, null);
        Type localVarReturnType = new TypeToken<PagedVentilations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des ventilations de droits (asynchronously)
     * Liste des ventilations de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des ventilations de droits </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerVentilationDeDroitsAsync(String codeStructure, Pageable pageable, final ApiCallback<PagedVentilations> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerVentilationDeDroitsValidateBeforeCall(codeStructure, pageable, _callback);
        Type localVarReturnType = new TypeToken<PagedVentilations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
