/*
 * PAI v1 - Paiement
 * API pour la gestion des paiements
 *
 * The version of the OpenAPI document: 21.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.pai;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.util.Date;
import fr.univlorraine.pegase.model.pai.DroitElement;
import fr.univlorraine.pegase.model.pai.DroitElementCreation;
import fr.univlorraine.pegase.model.pai.DroitElementPeriode;
import fr.univlorraine.pegase.model.pai.DroitElementPourListe;
import fr.univlorraine.pegase.model.pai.DroitElementPourModification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DroitsElementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DroitsElementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DroitsElementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for copier
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitElementPeriode La liste des elements de droits à copier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les éléments de droits ont été créés sur la nouvelle periode </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copierCall(String codeStructure, String codePeriode, List<DroitElementPeriode> droitElementPeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = droitElementPeriode;

        // create path and map variables
        String localVarPath = "/pai/droits-elements/periodes/{codePeriode}"
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copierValidateBeforeCall(String codeStructure, String codePeriode, List<DroitElementPeriode> droitElementPeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling copier(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling copier(Async)");
        }
        
        // verify the required parameter 'droitElementPeriode' is set
        if (droitElementPeriode == null) {
            throw new ApiException("Missing the required parameter 'droitElementPeriode' when calling copier(Async)");
        }
        

        okhttp3.Call localVarCall = copierCall(codeStructure, codePeriode, droitElementPeriode, _callback);
        return localVarCall;

    }

    /**
     * Copier les élément de droit d&#39;une période sur une autre
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitElementPeriode La liste des elements de droits à copier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les éléments de droits ont été créés sur la nouvelle periode </td><td>  -  </td></tr>
     </table>
     */
    public void copier(String codeStructure, String codePeriode, List<DroitElementPeriode> droitElementPeriode) throws ApiException {
        copierWithHttpInfo(codeStructure, codePeriode, droitElementPeriode);
    }

    /**
     * Copier les élément de droit d&#39;une période sur une autre
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitElementPeriode La liste des elements de droits à copier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les éléments de droits ont été créés sur la nouvelle periode </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> copierWithHttpInfo(String codeStructure, String codePeriode, List<DroitElementPeriode> droitElementPeriode) throws ApiException {
        okhttp3.Call localVarCall = copierValidateBeforeCall(codeStructure, codePeriode, droitElementPeriode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Copier les élément de droit d&#39;une période sur une autre (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitElementPeriode La liste des elements de droits à copier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les éléments de droits ont été créés sur la nouvelle periode </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copierAsync(String codeStructure, String codePeriode, List<DroitElementPeriode> droitElementPeriode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = copierValidateBeforeCall(codeStructure, codePeriode, droitElementPeriode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for creer
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param forcerCreation rendre inactif l&#39;élément existant (required)
     * @param droitElementCreation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;élément de droit est créée </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerCall(String codeStructure, String codePeriode, Boolean forcerCreation, DroitElementCreation droitElementCreation, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = droitElementCreation;

        // create path and map variables
        String localVarPath = "/pai/droits-elements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (forcerCreation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forcerCreation", forcerCreation));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creerValidateBeforeCall(String codeStructure, String codePeriode, Boolean forcerCreation, DroitElementCreation droitElementCreation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling creer(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling creer(Async)");
        }
        
        // verify the required parameter 'forcerCreation' is set
        if (forcerCreation == null) {
            throw new ApiException("Missing the required parameter 'forcerCreation' when calling creer(Async)");
        }
        

        okhttp3.Call localVarCall = creerCall(codeStructure, codePeriode, forcerCreation, droitElementCreation, _callback);
        return localVarCall;

    }

    /**
     * Créer un élément de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param forcerCreation rendre inactif l&#39;élément existant (required)
     * @param droitElementCreation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;élément de droit est créée </td><td>  -  </td></tr>
     </table>
     */
    public void creer(String codeStructure, String codePeriode, Boolean forcerCreation, DroitElementCreation droitElementCreation) throws ApiException {
        creerWithHttpInfo(codeStructure, codePeriode, forcerCreation, droitElementCreation);
    }

    /**
     * Créer un élément de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param forcerCreation rendre inactif l&#39;élément existant (required)
     * @param droitElementCreation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;élément de droit est créée </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> creerWithHttpInfo(String codeStructure, String codePeriode, Boolean forcerCreation, DroitElementCreation droitElementCreation) throws ApiException {
        okhttp3.Call localVarCall = creerValidateBeforeCall(codeStructure, codePeriode, forcerCreation, droitElementCreation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Créer un élément de droit (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param forcerCreation rendre inactif l&#39;élément existant (required)
     * @param droitElementCreation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> L&#39;élément de droit est créée </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerAsync(String codeStructure, String codePeriode, Boolean forcerCreation, DroitElementCreation droitElementCreation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = creerValidateBeforeCall(codeStructure, codePeriode, forcerCreation, droitElementCreation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for lire
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireCall(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/droits-elements/{codeDroitElement}/periodes/{codePeriode}"
            .replaceAll("\\{" + "codeDroitElement" + "\\}", localVarApiClient.escapeString(codeDroitElement.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        if (dateEffet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateEffet", dateEffet));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireValidateBeforeCall(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lire(Async)");
        }
        
        // verify the required parameter 'codeDroitElement' is set
        if (codeDroitElement == null) {
            throw new ApiException("Missing the required parameter 'codeDroitElement' when calling lire(Async)");
        }
        
        // verify the required parameter 'dateEffet' is set
        if (dateEffet == null) {
            throw new ApiException("Missing the required parameter 'dateEffet' when calling lire(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lire(Async)");
        }
        

        okhttp3.Call localVarCall = lireCall(codeStructure, codeDroitElement, dateEffet, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Lire un élément de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @return DroitElementPourModification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit </td><td>  -  </td></tr>
     </table>
     */
    public DroitElementPourModification lire(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode) throws ApiException {
        ApiResponse<DroitElementPourModification> localVarResp = lireWithHttpInfo(codeStructure, codeDroitElement, dateEffet, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Lire un élément de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @return ApiResponse&lt;DroitElementPourModification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DroitElementPourModification> lireWithHttpInfo(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireValidateBeforeCall(codeStructure, codeDroitElement, dateEffet, codePeriode, null);
        Type localVarReturnType = new TypeToken<DroitElementPourModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lire un élément de droit (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireAsync(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, final ApiCallback<DroitElementPourModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireValidateBeforeCall(codeStructure, codeDroitElement, dateEffet, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<DroitElementPourModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireListe
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param uniquementActif Se limite aux elements actifs si vrai (optional)
     * @param code Se limite aux elements dont le code est egal au code fourni si non vide (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeCall(String codeStructure, String codePeriode, Boolean uniquementActif, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/droits-elements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (uniquementActif != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uniquementActif", uniquementActif));
        }

        if (code != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("code", code));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListeValidateBeforeCall(String codeStructure, String codePeriode, Boolean uniquementActif, String code, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListe(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListe(Async)");
        }
        

        okhttp3.Call localVarCall = lireListeCall(codeStructure, codePeriode, uniquementActif, code, _callback);
        return localVarCall;

    }

    /**
     * Liste des éléments de droits pour un établissement
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param uniquementActif Se limite aux elements actifs si vrai (optional)
     * @param code Se limite aux elements dont le code est egal au code fourni si non vide (optional)
     * @return List&lt;DroitElementPourListe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public List<DroitElementPourListe> lireListe(String codeStructure, String codePeriode, Boolean uniquementActif, String code) throws ApiException {
        ApiResponse<List<DroitElementPourListe>> localVarResp = lireListeWithHttpInfo(codeStructure, codePeriode, uniquementActif, code);
        return localVarResp.getData();
    }

    /**
     * Liste des éléments de droits pour un établissement
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param uniquementActif Se limite aux elements actifs si vrai (optional)
     * @param code Se limite aux elements dont le code est egal au code fourni si non vide (optional)
     * @return ApiResponse&lt;List&lt;DroitElementPourListe&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DroitElementPourListe>> lireListeWithHttpInfo(String codeStructure, String codePeriode, Boolean uniquementActif, String code) throws ApiException {
        okhttp3.Call localVarCall = lireListeValidateBeforeCall(codeStructure, codePeriode, uniquementActif, code, null);
        Type localVarReturnType = new TypeToken<List<DroitElementPourListe>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des éléments de droits pour un établissement (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param uniquementActif Se limite aux elements actifs si vrai (optional)
     * @param code Se limite aux elements dont le code est egal au code fourni si non vide (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeAsync(String codeStructure, String codePeriode, Boolean uniquementActif, String code, final ApiCallback<List<DroitElementPourListe>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListeValidateBeforeCall(codeStructure, codePeriode, uniquementActif, code, _callback);
        Type localVarReturnType = new TypeToken<List<DroitElementPourListe>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireListePourCopie
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param codePeriodeCible Code de la période cible (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListePourCopieCall(String codeStructure, String codePeriode, String codePeriodeCible, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/droits-elements/periodes/{codePeriode}/copiables/vers/periodes/{codePeriodeCible}"
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()))
            .replaceAll("\\{" + "codePeriodeCible" + "\\}", localVarApiClient.escapeString(codePeriodeCible.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListePourCopieValidateBeforeCall(String codeStructure, String codePeriode, String codePeriodeCible, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListePourCopie(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListePourCopie(Async)");
        }
        
        // verify the required parameter 'codePeriodeCible' is set
        if (codePeriodeCible == null) {
            throw new ApiException("Missing the required parameter 'codePeriodeCible' when calling lireListePourCopie(Async)");
        }
        

        okhttp3.Call localVarCall = lireListePourCopieCall(codeStructure, codePeriode, codePeriodeCible, _callback);
        return localVarCall;

    }

    /**
     * Liste des éléments de droits de la periode source  qui peuvent être copiés sur la periode cible pour un établissement
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param codePeriodeCible Code de la période cible (required)
     * @return List&lt;DroitElement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public List<DroitElement> lireListePourCopie(String codeStructure, String codePeriode, String codePeriodeCible) throws ApiException {
        ApiResponse<List<DroitElement>> localVarResp = lireListePourCopieWithHttpInfo(codeStructure, codePeriode, codePeriodeCible);
        return localVarResp.getData();
    }

    /**
     * Liste des éléments de droits de la periode source  qui peuvent être copiés sur la periode cible pour un établissement
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param codePeriodeCible Code de la période cible (required)
     * @return ApiResponse&lt;List&lt;DroitElement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DroitElement>> lireListePourCopieWithHttpInfo(String codeStructure, String codePeriode, String codePeriodeCible) throws ApiException {
        okhttp3.Call localVarCall = lireListePourCopieValidateBeforeCall(codeStructure, codePeriode, codePeriodeCible, null);
        Type localVarReturnType = new TypeToken<List<DroitElement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des éléments de droits de la periode source  qui peuvent être copiés sur la periode cible pour un établissement (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param codePeriodeCible Code de la période cible (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListePourCopieAsync(String codeStructure, String codePeriode, String codePeriodeCible, final ApiCallback<List<DroitElement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListePourCopieValidateBeforeCall(codeStructure, codePeriode, codePeriodeCible, _callback);
        Type localVarReturnType = new TypeToken<List<DroitElement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifier
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @param droitElementCreation  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit est modifié </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierCall(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, DroitElementCreation droitElementCreation, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = droitElementCreation;

        // create path and map variables
        String localVarPath = "/pai/droits-elements/{codeDroitElement}/periodes/{codePeriode}"
            .replaceAll("\\{" + "codeDroitElement" + "\\}", localVarApiClient.escapeString(codeDroitElement.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        if (dateEffet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateEffet", dateEffet));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifierValidateBeforeCall(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, DroitElementCreation droitElementCreation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling modifier(Async)");
        }
        
        // verify the required parameter 'codeDroitElement' is set
        if (codeDroitElement == null) {
            throw new ApiException("Missing the required parameter 'codeDroitElement' when calling modifier(Async)");
        }
        
        // verify the required parameter 'dateEffet' is set
        if (dateEffet == null) {
            throw new ApiException("Missing the required parameter 'dateEffet' when calling modifier(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling modifier(Async)");
        }
        

        okhttp3.Call localVarCall = modifierCall(codeStructure, codeDroitElement, dateEffet, codePeriode, droitElementCreation, _callback);
        return localVarCall;

    }

    /**
     * Modifier un élément de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @param droitElementCreation  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit est modifié </td><td>  -  </td></tr>
     </table>
     */
    public void modifier(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, DroitElementCreation droitElementCreation) throws ApiException {
        modifierWithHttpInfo(codeStructure, codeDroitElement, dateEffet, codePeriode, droitElementCreation);
    }

    /**
     * Modifier un élément de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @param droitElementCreation  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit est modifié </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> modifierWithHttpInfo(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, DroitElementCreation droitElementCreation) throws ApiException {
        okhttp3.Call localVarCall = modifierValidateBeforeCall(codeStructure, codeDroitElement, dateEffet, codePeriode, droitElementCreation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modifier un élément de droit (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @param droitElementCreation  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit est modifié </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierAsync(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, DroitElementCreation droitElementCreation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifierValidateBeforeCall(codeStructure, codeDroitElement, dateEffet, codePeriode, droitElementCreation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimer
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit est supprimé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerCall(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/droits-elements/{codeDroitElement}/periodes/{codePeriode}"
            .replaceAll("\\{" + "codeDroitElement" + "\\}", localVarApiClient.escapeString(codeDroitElement.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        if (dateEffet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateEffet", dateEffet));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerValidateBeforeCall(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling supprimer(Async)");
        }
        
        // verify the required parameter 'codeDroitElement' is set
        if (codeDroitElement == null) {
            throw new ApiException("Missing the required parameter 'codeDroitElement' when calling supprimer(Async)");
        }
        
        // verify the required parameter 'dateEffet' is set
        if (dateEffet == null) {
            throw new ApiException("Missing the required parameter 'dateEffet' when calling supprimer(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling supprimer(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerCall(codeStructure, codeDroitElement, dateEffet, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Supprimer un élément de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit est supprimé </td><td>  -  </td></tr>
     </table>
     */
    public void supprimer(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode) throws ApiException {
        supprimerWithHttpInfo(codeStructure, codeDroitElement, dateEffet, codePeriode);
    }

    /**
     * Supprimer un élément de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit est supprimé </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerWithHttpInfo(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = supprimerValidateBeforeCall(codeStructure, codeDroitElement, dateEffet, codePeriode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Supprimer un élément de droit (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitElement Code de l&#39;élément de droit (required)
     * @param dateEffet La date d&#39;effet de l&#39;élément (required)
     * @param codePeriode Code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;élément de droit est supprimé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerAsync(String codeStructure, String codeDroitElement, Date dateEffet, String codePeriode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerValidateBeforeCall(codeStructure, codeDroitElement, dateEffet, codePeriode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
