/*
 * PAI v1 - Paiement
 * API pour la gestion des paiements
 *
 * The version of the OpenAPI document: 21.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.pai;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.pai.ChoixInscription;
import fr.univlorraine.pegase.model.pai.CompteMarchandParametrageParam;
import fr.univlorraine.pegase.model.pai.CompteMarchandParametrageResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CompteMarchandApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompteMarchandApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CompteMarchandApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lireParametrageCompteMarchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage du compte </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireParametrageCompteMarchandCall(String idCompte, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/compte-marchand-parametrage/{idCompte}"
            .replaceAll("\\{" + "idCompte" + "\\}", localVarApiClient.escapeString(idCompte.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireParametrageCompteMarchandValidateBeforeCall(String idCompte, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'idCompte' is set
        if (idCompte == null) {
            throw new ApiException("Missing the required parameter 'idCompte' when calling lireParametrageCompteMarchand(Async)");
        }
        

        okhttp3.Call localVarCall = lireParametrageCompteMarchandCall(idCompte, _callback);
        return localVarCall;

    }

    /**
     * Paramétrage du compte marchand
     * Paramétrage du compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @return CompteMarchandParametrageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage du compte </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public CompteMarchandParametrageResult lireParametrageCompteMarchand(String idCompte) throws ApiException {
        ApiResponse<CompteMarchandParametrageResult> localVarResp = lireParametrageCompteMarchandWithHttpInfo(idCompte);
        return localVarResp.getData();
    }

    /**
     * Paramétrage du compte marchand
     * Paramétrage du compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @return ApiResponse&lt;CompteMarchandParametrageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage du compte </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompteMarchandParametrageResult> lireParametrageCompteMarchandWithHttpInfo(String idCompte) throws ApiException {
        okhttp3.Call localVarCall = lireParametrageCompteMarchandValidateBeforeCall(idCompte, null);
        Type localVarReturnType = new TypeToken<CompteMarchandParametrageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Paramétrage du compte marchand (asynchronously)
     * Paramétrage du compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage du compte </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireParametrageCompteMarchandAsync(String idCompte, final ApiCallback<CompteMarchandParametrageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireParametrageCompteMarchandValidateBeforeCall(idCompte, _callback);
        Type localVarReturnType = new TypeToken<CompteMarchandParametrageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerComptesMarchandsActifs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identifiants des comptes marchands actifs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucun compte marchand trouvé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerComptesMarchandsActifsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/comptes-marchands-actifs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerComptesMarchandsActifsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listerComptesMarchandsActifsCall(_callback);
        return localVarCall;

    }

    /**
     * Identifiants des comptes marchands actifs
     * Retourne les identifiants des comptes marchands actifs.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identifiants des comptes marchands actifs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucun compte marchand trouvé </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listerComptesMarchandsActifs() throws ApiException {
        ApiResponse<List<String>> localVarResp = listerComptesMarchandsActifsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Identifiants des comptes marchands actifs
     * Retourne les identifiants des comptes marchands actifs.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identifiants des comptes marchands actifs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucun compte marchand trouvé </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listerComptesMarchandsActifsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listerComptesMarchandsActifsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identifiants des comptes marchands actifs (asynchronously)
     * Retourne les identifiants des comptes marchands actifs.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identifiants des comptes marchands actifs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucun compte marchand trouvé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerComptesMarchandsActifsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerComptesMarchandsActifsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerComptesMarchandsInscription
     * @param choixInscription La liste des choix de l&#39;inscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des associations &lt; identifiant de compte , choix d&#39;inscription &gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerComptesMarchandsInscriptionCall(List<ChoixInscription> choixInscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = choixInscription;

        // create path and map variables
        String localVarPath = "/pai/comptes-marchands-incription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerComptesMarchandsInscriptionValidateBeforeCall(List<ChoixInscription> choixInscription, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'choixInscription' is set
        if (choixInscription == null) {
            throw new ApiException("Missing the required parameter 'choixInscription' when calling listerComptesMarchandsInscription(Async)");
        }
        

        okhttp3.Call localVarCall = listerComptesMarchandsInscriptionCall(choixInscription, _callback);
        return localVarCall;

    }

    /**
     * Identifiants des comptes marchands associés à une inscription
     * Retourne les associations &lt; identifiant de compte marchand , choix d&#39;inscription &gt;.
     * @param choixInscription La liste des choix de l&#39;inscription (required)
     * @return Map&lt;String, List&lt;ChoixInscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des associations &lt; identifiant de compte , choix d&#39;inscription &gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<ChoixInscription>> listerComptesMarchandsInscription(List<ChoixInscription> choixInscription) throws ApiException {
        ApiResponse<Map<String, List<ChoixInscription>>> localVarResp = listerComptesMarchandsInscriptionWithHttpInfo(choixInscription);
        return localVarResp.getData();
    }

    /**
     * Identifiants des comptes marchands associés à une inscription
     * Retourne les associations &lt; identifiant de compte marchand , choix d&#39;inscription &gt;.
     * @param choixInscription La liste des choix de l&#39;inscription (required)
     * @return ApiResponse&lt;Map&lt;String, List&lt;ChoixInscription&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des associations &lt; identifiant de compte , choix d&#39;inscription &gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<ChoixInscription>>> listerComptesMarchandsInscriptionWithHttpInfo(List<ChoixInscription> choixInscription) throws ApiException {
        okhttp3.Call localVarCall = listerComptesMarchandsInscriptionValidateBeforeCall(choixInscription, null);
        Type localVarReturnType = new TypeToken<Map<String, List<ChoixInscription>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identifiants des comptes marchands associés à une inscription (asynchronously)
     * Retourne les associations &lt; identifiant de compte marchand , choix d&#39;inscription &gt;.
     * @param choixInscription La liste des choix de l&#39;inscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des associations &lt; identifiant de compte , choix d&#39;inscription &gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerComptesMarchandsInscriptionAsync(List<ChoixInscription> choixInscription, final ApiCallback<Map<String, List<ChoixInscription>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerComptesMarchandsInscriptionValidateBeforeCall(choixInscription, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<ChoixInscription>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parametrerCompteMarchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param compteMarchandParametrageParam Le paramétrage à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Paramétrage ajouté </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Compte marchand non configuré </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parametrerCompteMarchandCall(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = compteMarchandParametrageParam;

        // create path and map variables
        String localVarPath = "/pai/compte-marchand-parametrage/{idCompte}"
            .replaceAll("\\{" + "idCompte" + "\\}", localVarApiClient.escapeString(idCompte.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parametrerCompteMarchandValidateBeforeCall(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'idCompte' is set
        if (idCompte == null) {
            throw new ApiException("Missing the required parameter 'idCompte' when calling parametrerCompteMarchand(Async)");
        }
        
        // verify the required parameter 'compteMarchandParametrageParam' is set
        if (compteMarchandParametrageParam == null) {
            throw new ApiException("Missing the required parameter 'compteMarchandParametrageParam' when calling parametrerCompteMarchand(Async)");
        }
        

        okhttp3.Call localVarCall = parametrerCompteMarchandCall(idCompte, compteMarchandParametrageParam, _callback);
        return localVarCall;

    }

    /**
     * Ajout d&#39;un paramètrage de compte marchand [usage QA]
     * Ajout d&#39;un paramètrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param compteMarchandParametrageParam Le paramétrage à ajouter (required)
     * @return CompteMarchandParametrageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Paramétrage ajouté </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Compte marchand non configuré </td><td>  -  </td></tr>
     </table>
     */
    public CompteMarchandParametrageResult parametrerCompteMarchand(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam) throws ApiException {
        ApiResponse<CompteMarchandParametrageResult> localVarResp = parametrerCompteMarchandWithHttpInfo(idCompte, compteMarchandParametrageParam);
        return localVarResp.getData();
    }

    /**
     * Ajout d&#39;un paramètrage de compte marchand [usage QA]
     * Ajout d&#39;un paramètrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param compteMarchandParametrageParam Le paramétrage à ajouter (required)
     * @return ApiResponse&lt;CompteMarchandParametrageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Paramétrage ajouté </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Compte marchand non configuré </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompteMarchandParametrageResult> parametrerCompteMarchandWithHttpInfo(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam) throws ApiException {
        okhttp3.Call localVarCall = parametrerCompteMarchandValidateBeforeCall(idCompte, compteMarchandParametrageParam, null);
        Type localVarReturnType = new TypeToken<CompteMarchandParametrageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ajout d&#39;un paramètrage de compte marchand [usage QA] (asynchronously)
     * Ajout d&#39;un paramètrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param compteMarchandParametrageParam Le paramétrage à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Paramétrage ajouté </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Compte marchand non configuré </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parametrerCompteMarchandAsync(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam, final ApiCallback<CompteMarchandParametrageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = parametrerCompteMarchandValidateBeforeCall(idCompte, compteMarchandParametrageParam, _callback);
        Type localVarReturnType = new TypeToken<CompteMarchandParametrageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerCompteMarchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerCompteMarchandCall(String idCompte, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/compte-marchand-parametrage/{idCompte}"
            .replaceAll("\\{" + "idCompte" + "\\}", localVarApiClient.escapeString(idCompte.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerCompteMarchandValidateBeforeCall(String idCompte, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'idCompte' is set
        if (idCompte == null) {
            throw new ApiException("Missing the required parameter 'idCompte' when calling supprimerCompteMarchand(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerCompteMarchandCall(idCompte, _callback);
        return localVarCall;

    }

    /**
     * Suppression d&#39;un paramétrage de compte marchand
     * Suppression d&#39;un paramétrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public void supprimerCompteMarchand(String idCompte) throws ApiException {
        supprimerCompteMarchandWithHttpInfo(idCompte);
    }

    /**
     * Suppression d&#39;un paramétrage de compte marchand
     * Suppression d&#39;un paramétrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerCompteMarchandWithHttpInfo(String idCompte) throws ApiException {
        okhttp3.Call localVarCall = supprimerCompteMarchandValidateBeforeCall(idCompte, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suppression d&#39;un paramétrage de compte marchand (asynchronously)
     * Suppression d&#39;un paramétrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerCompteMarchandAsync(String idCompte, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerCompteMarchandValidateBeforeCall(idCompte, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
