/*
 * PAI v1 - Paiement
 * API pour la gestion des paiements
 *
 * The version of the OpenAPI document: 16.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.pai;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.pai.ChoixInscription;
import fr.univlorraine.pegase.model.pai.CompteMarchandParametrageParam;
import fr.univlorraine.pegase.model.pai.CompteMarchandParametrageResult;
import fr.univlorraine.pegase.model.pai.DonneesInscription;
import fr.univlorraine.pegase.model.pai.ElementDeDroit;
import fr.univlorraine.pegase.model.pai.Facture;
import java.io.File;
import fr.univlorraine.pegase.model.pai.LigneVentilationDeDroits;
import java.time.LocalDate;
import fr.univlorraine.pegase.model.pai.ModaliteDePaiement;
import fr.univlorraine.pegase.model.pai.Pageable;
import fr.univlorraine.pegase.model.pai.PagedFactures;
import fr.univlorraine.pegase.model.pai.PagedQuittances;
import fr.univlorraine.pegase.model.pai.Periode;
import fr.univlorraine.pegase.model.pai.RechercheFactures;
import fr.univlorraine.pegase.model.pai.StructureBudgetaireNumeroQuittance;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cloturerVentilationDeDroits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloturerVentilationDeDroitsCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/cloture/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        if (dateDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateDebut", dateDebut));
        }

        if (dateFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFin", dateFin));
        }

        if (numeroQuittanceDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceDebut", numeroQuittanceDebut));
        }

        if (numeroQuittanceFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceFin", numeroQuittanceFin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cloturerVentilationDeDroitsValidateBeforeCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling cloturerVentilationDeDroits(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling cloturerVentilationDeDroits(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling cloturerVentilationDeDroits(Async)");
        }
        

        okhttp3.Call localVarCall = cloturerVentilationDeDroitsCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        return localVarCall;

    }

    /**
     * Clôture de la ventilation de droits
     * Clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public String cloturerVentilationDeDroits(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        ApiResponse<String> localVarResp = cloturerVentilationDeDroitsWithHttpInfo(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin);
        return localVarResp.getData();
    }

    /**
     * Clôture de la ventilation de droits
     * Clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> cloturerVentilationDeDroitsWithHttpInfo(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        okhttp3.Call localVarCall = cloturerVentilationDeDroitsValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clôture de la ventilation de droits (asynchronously)
     * Clôture de la ventilation de droits
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La clôture de la ventilation des droits a été effectuée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> plage de Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cloturerVentilationDeDroitsAsync(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = cloturerVentilationDeDroitsValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creerFacture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param facture La facture à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La facture a été créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerFactureCall(String codeStructure, Facture facture, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = facture;

        // create path and map variables
        String localVarPath = "/pai/factures/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creerFactureValidateBeforeCall(String codeStructure, Facture facture, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling creerFacture(Async)");
        }
        
        // verify the required parameter 'facture' is set
        if (facture == null) {
            throw new ApiException("Missing the required parameter 'facture' when calling creerFacture(Async)");
        }
        

        okhttp3.Call localVarCall = creerFactureCall(codeStructure, facture, _callback);
        return localVarCall;

    }

    /**
     * Ajout d&#39;une facture
     * Ajout d&#39;une facture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param facture La facture à ajouter (required)
     * @return List&lt;Facture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La facture a été créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<Facture> creerFacture(String codeStructure, Facture facture) throws ApiException {
        ApiResponse<List<Facture>> localVarResp = creerFactureWithHttpInfo(codeStructure, facture);
        return localVarResp.getData();
    }

    /**
     * Ajout d&#39;une facture
     * Ajout d&#39;une facture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param facture La facture à ajouter (required)
     * @return ApiResponse&lt;List&lt;Facture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La facture a été créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Facture>> creerFactureWithHttpInfo(String codeStructure, Facture facture) throws ApiException {
        okhttp3.Call localVarCall = creerFactureValidateBeforeCall(codeStructure, facture, null);
        Type localVarReturnType = new TypeToken<List<Facture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ajout d&#39;une facture (asynchronously)
     * Ajout d&#39;une facture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param facture La facture à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La facture a été créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerFactureAsync(String codeStructure, Facture facture, final ApiCallback<List<Facture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = creerFactureValidateBeforeCall(codeStructure, facture, _callback);
        Type localVarReturnType = new TypeToken<List<Facture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creerModaliteDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Modalité de paiement créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerModaliteDePaiementCall(String codeStructure, ModaliteDePaiement modaliteDePaiement, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modaliteDePaiement;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creerModaliteDePaiementValidateBeforeCall(String codeStructure, ModaliteDePaiement modaliteDePaiement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling creerModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'modaliteDePaiement' is set
        if (modaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'modaliteDePaiement' when calling creerModaliteDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = creerModaliteDePaiementCall(codeStructure, modaliteDePaiement, _callback);
        return localVarCall;

    }

    /**
     * Ajout d&#39;une modalité de paiement pour un établissement
     * Ajout d&#39;une modalité de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @return ModaliteDePaiement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Modalité de paiement créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ModaliteDePaiement creerModaliteDePaiement(String codeStructure, ModaliteDePaiement modaliteDePaiement) throws ApiException {
        ApiResponse<ModaliteDePaiement> localVarResp = creerModaliteDePaiementWithHttpInfo(codeStructure, modaliteDePaiement);
        return localVarResp.getData();
    }

    /**
     * Ajout d&#39;une modalité de paiement pour un établissement
     * Ajout d&#39;une modalité de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @return ApiResponse&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Modalité de paiement créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModaliteDePaiement> creerModaliteDePaiementWithHttpInfo(String codeStructure, ModaliteDePaiement modaliteDePaiement) throws ApiException {
        okhttp3.Call localVarCall = creerModaliteDePaiementValidateBeforeCall(codeStructure, modaliteDePaiement, null);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ajout d&#39;une modalité de paiement pour un établissement (asynchronously)
     * Ajout d&#39;une modalité de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Modalité de paiement créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerModaliteDePaiementAsync(String codeStructure, ModaliteDePaiement modaliteDePaiement, final ApiCallback<ModaliteDePaiement> _callback) throws ApiException {

        okhttp3.Call localVarCall = creerModaliteDePaiementValidateBeforeCall(codeStructure, modaliteDePaiement, _callback);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creerStructureBudgetaireNumeroQuittance
     * @param codeStructure le code de la structure budgétaire (required)
     * @param body Le numéro de quittance initial (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La structure budgétaire associée à un numéro de quittance sauvegardée </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerStructureBudgetaireNumeroQuittanceCall(String codeStructure, Long body, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/pai/numero-quittance/transition/initialiser/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creerStructureBudgetaireNumeroQuittanceValidateBeforeCall(String codeStructure, Long body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling creerStructureBudgetaireNumeroQuittance(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling creerStructureBudgetaireNumeroQuittance(Async)");
        }
        

        okhttp3.Call localVarCall = creerStructureBudgetaireNumeroQuittanceCall(codeStructure, body, _callback);
        return localVarCall;

    }

    /**
     * Sauvegarde d&#39;une structure budgétaire associée à un numéro de quittance
     * Sauvegarde d&#39;une structure budgétaire associée à un numéro de quittance à partir du code structure et du numéro de quittance
     * @param codeStructure le code de la structure budgétaire (required)
     * @param body Le numéro de quittance initial (required)
     * @return StructureBudgetaireNumeroQuittance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La structure budgétaire associée à un numéro de quittance sauvegardée </td><td>  -  </td></tr>
     </table>
     */
    public StructureBudgetaireNumeroQuittance creerStructureBudgetaireNumeroQuittance(String codeStructure, Long body) throws ApiException {
        ApiResponse<StructureBudgetaireNumeroQuittance> localVarResp = creerStructureBudgetaireNumeroQuittanceWithHttpInfo(codeStructure, body);
        return localVarResp.getData();
    }

    /**
     * Sauvegarde d&#39;une structure budgétaire associée à un numéro de quittance
     * Sauvegarde d&#39;une structure budgétaire associée à un numéro de quittance à partir du code structure et du numéro de quittance
     * @param codeStructure le code de la structure budgétaire (required)
     * @param body Le numéro de quittance initial (required)
     * @return ApiResponse&lt;StructureBudgetaireNumeroQuittance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La structure budgétaire associée à un numéro de quittance sauvegardée </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StructureBudgetaireNumeroQuittance> creerStructureBudgetaireNumeroQuittanceWithHttpInfo(String codeStructure, Long body) throws ApiException {
        okhttp3.Call localVarCall = creerStructureBudgetaireNumeroQuittanceValidateBeforeCall(codeStructure, body, null);
        Type localVarReturnType = new TypeToken<StructureBudgetaireNumeroQuittance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sauvegarde d&#39;une structure budgétaire associée à un numéro de quittance (asynchronously)
     * Sauvegarde d&#39;une structure budgétaire associée à un numéro de quittance à partir du code structure et du numéro de quittance
     * @param codeStructure le code de la structure budgétaire (required)
     * @param body Le numéro de quittance initial (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La structure budgétaire associée à un numéro de quittance sauvegardée </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerStructureBudgetaireNumeroQuittanceAsync(String codeStructure, Long body, final ApiCallback<StructureBudgetaireNumeroQuittance> _callback) throws ApiException {

        okhttp3.Call localVarCall = creerStructureBudgetaireNumeroQuittanceValidateBeforeCall(codeStructure, body, _callback);
        Type localVarReturnType = new TypeToken<StructureBudgetaireNumeroQuittance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imprimerAttestationDePaiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression de l&#39;attestation de paiement </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attestation introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imprimerAttestationDePaiementCall(String codeStructure, String codeApprenant, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/attestation-de-paiement/{codeStructure}/{codeApprenant}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imprimerAttestationDePaiementValidateBeforeCall(String codeStructure, String codeApprenant, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling imprimerAttestationDePaiement(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling imprimerAttestationDePaiement(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling imprimerAttestationDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = imprimerAttestationDePaiementCall(codeStructure, codeApprenant, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Impression de l&#39;attestation de paiement
     * Impression de l&#39;attestation de paiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression de l&#39;attestation de paiement </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attestation introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File imprimerAttestationDePaiement(String codeStructure, String codeApprenant, String codePeriode) throws ApiException {
        ApiResponse<File> localVarResp = imprimerAttestationDePaiementWithHttpInfo(codeStructure, codeApprenant, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Impression de l&#39;attestation de paiement
     * Impression de l&#39;attestation de paiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression de l&#39;attestation de paiement </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attestation introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imprimerAttestationDePaiementWithHttpInfo(String codeStructure, String codeApprenant, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = imprimerAttestationDePaiementValidateBeforeCall(codeStructure, codeApprenant, codePeriode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Impression de l&#39;attestation de paiement (asynchronously)
     * Impression de l&#39;attestation de paiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codePeriode Le code de la periode (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression de l&#39;attestation de paiement </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attestation introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imprimerAttestationDePaiementAsync(String codeStructure, String codeApprenant, String codePeriode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imprimerAttestationDePaiementValidateBeforeCall(codeStructure, codeApprenant, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireFacture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param numeroFacture le numéro de la facture (required)
     * @param codeStructureBudgetaire le code de la structure budgetaire (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La facture récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> facture introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireFactureCall(String codeStructure, Long numeroFacture, String codeStructureBudgetaire, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/factures/{codeStructure}/{numeroFacture}/{codeStructureBudgetaire}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "numeroFacture" + "\\}", localVarApiClient.escapeString(numeroFacture.toString()))
            .replaceAll("\\{" + "codeStructureBudgetaire" + "\\}", localVarApiClient.escapeString(codeStructureBudgetaire.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireFactureValidateBeforeCall(String codeStructure, Long numeroFacture, String codeStructureBudgetaire, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireFacture(Async)");
        }
        
        // verify the required parameter 'numeroFacture' is set
        if (numeroFacture == null) {
            throw new ApiException("Missing the required parameter 'numeroFacture' when calling lireFacture(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling lireFacture(Async)");
        }
        

        okhttp3.Call localVarCall = lireFactureCall(codeStructure, numeroFacture, codeStructureBudgetaire, _callback);
        return localVarCall;

    }

    /**
     * Récupération d&#39;une facture pour un établissement
     * Récupération d&#39;une facture pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param numeroFacture le numéro de la facture (required)
     * @param codeStructureBudgetaire le code de la structure budgetaire (required)
     * @return Facture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La facture récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> facture introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Facture lireFacture(String codeStructure, Long numeroFacture, String codeStructureBudgetaire) throws ApiException {
        ApiResponse<Facture> localVarResp = lireFactureWithHttpInfo(codeStructure, numeroFacture, codeStructureBudgetaire);
        return localVarResp.getData();
    }

    /**
     * Récupération d&#39;une facture pour un établissement
     * Récupération d&#39;une facture pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param numeroFacture le numéro de la facture (required)
     * @param codeStructureBudgetaire le code de la structure budgetaire (required)
     * @return ApiResponse&lt;Facture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La facture récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> facture introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Facture> lireFactureWithHttpInfo(String codeStructure, Long numeroFacture, String codeStructureBudgetaire) throws ApiException {
        okhttp3.Call localVarCall = lireFactureValidateBeforeCall(codeStructure, numeroFacture, codeStructureBudgetaire, null);
        Type localVarReturnType = new TypeToken<Facture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération d&#39;une facture pour un établissement (asynchronously)
     * Récupération d&#39;une facture pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param numeroFacture le numéro de la facture (required)
     * @param codeStructureBudgetaire le code de la structure budgetaire (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La facture récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> facture introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireFactureAsync(String codeStructure, Long numeroFacture, String codeStructureBudgetaire, final ApiCallback<Facture> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireFactureValidateBeforeCall(codeStructure, numeroFacture, codeStructureBudgetaire, _callback);
        Type localVarReturnType = new TypeToken<Facture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireModaliteDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La modalité de paiement récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireModaliteDePaiementCall(String codeStructure, String codeModaliteDePaiement, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}/{codeModaliteDePaiement}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeModaliteDePaiement" + "\\}", localVarApiClient.escapeString(codeModaliteDePaiement.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireModaliteDePaiementValidateBeforeCall(String codeStructure, String codeModaliteDePaiement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'codeModaliteDePaiement' is set
        if (codeModaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'codeModaliteDePaiement' when calling lireModaliteDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = lireModaliteDePaiementCall(codeStructure, codeModaliteDePaiement, _callback);
        return localVarCall;

    }

    /**
     * Récupération d&#39;une modalité de paiement pour un établissement
     * Récupération d&#39;une modalité de paiement pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @return ModaliteDePaiement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La modalité de paiement récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ModaliteDePaiement lireModaliteDePaiement(String codeStructure, String codeModaliteDePaiement) throws ApiException {
        ApiResponse<ModaliteDePaiement> localVarResp = lireModaliteDePaiementWithHttpInfo(codeStructure, codeModaliteDePaiement);
        return localVarResp.getData();
    }

    /**
     * Récupération d&#39;une modalité de paiement pour un établissement
     * Récupération d&#39;une modalité de paiement pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @return ApiResponse&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La modalité de paiement récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModaliteDePaiement> lireModaliteDePaiementWithHttpInfo(String codeStructure, String codeModaliteDePaiement) throws ApiException {
        okhttp3.Call localVarCall = lireModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, null);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération d&#39;une modalité de paiement pour un établissement (asynchronously)
     * Récupération d&#39;une modalité de paiement pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La modalité de paiement récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireModaliteDePaiementAsync(String codeStructure, String codeModaliteDePaiement, final ApiCallback<ModaliteDePaiement> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, _callback);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireParametrageCompteMarchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage du compte </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireParametrageCompteMarchandCall(String idCompte, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/compte-marchand-parametrage/{idCompte}"
            .replaceAll("\\{" + "idCompte" + "\\}", localVarApiClient.escapeString(idCompte.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireParametrageCompteMarchandValidateBeforeCall(String idCompte, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'idCompte' is set
        if (idCompte == null) {
            throw new ApiException("Missing the required parameter 'idCompte' when calling lireParametrageCompteMarchand(Async)");
        }
        

        okhttp3.Call localVarCall = lireParametrageCompteMarchandCall(idCompte, _callback);
        return localVarCall;

    }

    /**
     * Paramétrage du compte marchand
     * Paramétrage du compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @return CompteMarchandParametrageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage du compte </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public CompteMarchandParametrageResult lireParametrageCompteMarchand(String idCompte) throws ApiException {
        ApiResponse<CompteMarchandParametrageResult> localVarResp = lireParametrageCompteMarchandWithHttpInfo(idCompte);
        return localVarResp.getData();
    }

    /**
     * Paramétrage du compte marchand
     * Paramétrage du compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @return ApiResponse&lt;CompteMarchandParametrageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage du compte </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompteMarchandParametrageResult> lireParametrageCompteMarchandWithHttpInfo(String idCompte) throws ApiException {
        okhttp3.Call localVarCall = lireParametrageCompteMarchandValidateBeforeCall(idCompte, null);
        Type localVarReturnType = new TypeToken<CompteMarchandParametrageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Paramétrage du compte marchand (asynchronously)
     * Paramétrage du compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage du compte </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireParametrageCompteMarchandAsync(String idCompte, final ApiCallback<CompteMarchandParametrageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireParametrageCompteMarchandValidateBeforeCall(idCompte, _callback);
        Type localVarReturnType = new TypeToken<CompteMarchandParametrageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireRecapitulatifQuittances
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des quittances récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des quittances introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireRecapitulatifQuittancesCall(String codeStructure, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/recapitulatif-quittances/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        if (dateDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateDebut", dateDebut));
        }

        if (dateFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFin", dateFin));
        }

        if (numeroQuittanceDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceDebut", numeroQuittanceDebut));
        }

        if (numeroQuittanceFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceFin", numeroQuittanceFin));
        }

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireRecapitulatifQuittancesValidateBeforeCall(String codeStructure, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireRecapitulatifQuittances(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling lireRecapitulatifQuittances(Async)");
        }
        

        okhttp3.Call localVarCall = lireRecapitulatifQuittancesCall(codeStructure, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        return localVarCall;

    }

    /**
     * Récupération du récapitulatif des quittances au format csv
     * Récupération du récapitulatif des quittances au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des quittances récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des quittances introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File lireRecapitulatifQuittances(String codeStructure, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        ApiResponse<File> localVarResp = lireRecapitulatifQuittancesWithHttpInfo(codeStructure, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin);
        return localVarResp.getData();
    }

    /**
     * Récupération du récapitulatif des quittances au format csv
     * Récupération du récapitulatif des quittances au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des quittances récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des quittances introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> lireRecapitulatifQuittancesWithHttpInfo(String codeStructure, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        okhttp3.Call localVarCall = lireRecapitulatifQuittancesValidateBeforeCall(codeStructure, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération du récapitulatif des quittances au format csv (asynchronously)
     * Récupération du récapitulatif des quittances au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des quittances récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des quittances introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireRecapitulatifQuittancesAsync(String codeStructure, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireRecapitulatifQuittancesValidateBeforeCall(codeStructure, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireStructureBudgetaireNumeroQuittance
     * @param codeStructure le code de la structure budgétaire (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La structure budgétaire associée à son numéro de quittance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireStructureBudgetaireNumeroQuittanceCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/numero-quittance/transition/initialiser/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireStructureBudgetaireNumeroQuittanceValidateBeforeCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireStructureBudgetaireNumeroQuittance(Async)");
        }
        

        okhttp3.Call localVarCall = lireStructureBudgetaireNumeroQuittanceCall(codeStructure, _callback);
        return localVarCall;

    }

    /**
     * Récupération d&#39;une structure budgétaire associée à un numéro de quittance
     * Récupération d&#39;une structure budgétaire associée à un numéro de quittance à partir du code de la structure budgétaire
     * @param codeStructure le code de la structure budgétaire (required)
     * @return StructureBudgetaireNumeroQuittance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La structure budgétaire associée à son numéro de quittance </td><td>  -  </td></tr>
     </table>
     */
    public StructureBudgetaireNumeroQuittance lireStructureBudgetaireNumeroQuittance(String codeStructure) throws ApiException {
        ApiResponse<StructureBudgetaireNumeroQuittance> localVarResp = lireStructureBudgetaireNumeroQuittanceWithHttpInfo(codeStructure);
        return localVarResp.getData();
    }

    /**
     * Récupération d&#39;une structure budgétaire associée à un numéro de quittance
     * Récupération d&#39;une structure budgétaire associée à un numéro de quittance à partir du code de la structure budgétaire
     * @param codeStructure le code de la structure budgétaire (required)
     * @return ApiResponse&lt;StructureBudgetaireNumeroQuittance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La structure budgétaire associée à son numéro de quittance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StructureBudgetaireNumeroQuittance> lireStructureBudgetaireNumeroQuittanceWithHttpInfo(String codeStructure) throws ApiException {
        okhttp3.Call localVarCall = lireStructureBudgetaireNumeroQuittanceValidateBeforeCall(codeStructure, null);
        Type localVarReturnType = new TypeToken<StructureBudgetaireNumeroQuittance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération d&#39;une structure budgétaire associée à un numéro de quittance (asynchronously)
     * Récupération d&#39;une structure budgétaire associée à un numéro de quittance à partir du code de la structure budgétaire
     * @param codeStructure le code de la structure budgétaire (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La structure budgétaire associée à son numéro de quittance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireStructureBudgetaireNumeroQuittanceAsync(String codeStructure, final ApiCallback<StructureBudgetaireNumeroQuittance> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireStructureBudgetaireNumeroQuittanceValidateBeforeCall(codeStructure, _callback);
        Type localVarReturnType = new TypeToken<StructureBudgetaireNumeroQuittance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireVentilationDeDroitsCsv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireVentilationDeDroitsCsvCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/{codeStructure}/csv"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        if (dateDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateDebut", dateDebut));
        }

        if (dateFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFin", dateFin));
        }

        if (numeroQuittanceDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceDebut", numeroQuittanceDebut));
        }

        if (numeroQuittanceFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceFin", numeroQuittanceFin));
        }

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireVentilationDeDroitsCsvValidateBeforeCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireVentilationDeDroitsCsv(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireVentilationDeDroitsCsv(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling lireVentilationDeDroitsCsv(Async)");
        }
        

        okhttp3.Call localVarCall = lireVentilationDeDroitsCsvCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        return localVarCall;

    }

    /**
     * Récupération de la ventilation de droits au format csv
     * Récupération de la ventilation de droits au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File lireVentilationDeDroitsCsv(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        ApiResponse<File> localVarResp = lireVentilationDeDroitsCsvWithHttpInfo(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin);
        return localVarResp.getData();
    }

    /**
     * Récupération de la ventilation de droits au format csv
     * Récupération de la ventilation de droits au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> lireVentilationDeDroitsCsvWithHttpInfo(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        okhttp3.Call localVarCall = lireVentilationDeDroitsCsvValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération de la ventilation de droits au format csv (asynchronously)
     * Récupération de la ventilation de droits au format csv
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireVentilationDeDroitsCsvAsync(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireVentilationDeDroitsCsvValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireVentilationDeDroitsJson
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireVentilationDeDroitsJsonCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/ventilations-de-droits/{codeStructure}/json"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        if (dateDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateDebut", dateDebut));
        }

        if (dateFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFin", dateFin));
        }

        if (numeroQuittanceDebut != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceDebut", numeroQuittanceDebut));
        }

        if (numeroQuittanceFin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numeroQuittanceFin", numeroQuittanceFin));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireVentilationDeDroitsJsonValidateBeforeCall(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireVentilationDeDroitsJson(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireVentilationDeDroitsJson(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling lireVentilationDeDroitsJson(Async)");
        }
        

        okhttp3.Call localVarCall = lireVentilationDeDroitsJsonCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        return localVarCall;

    }

    /**
     * Récupération de la ventilation de droits au format json
     * Récupération de la ventilation de droits au format json
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return List&lt;LigneVentilationDeDroits&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<LigneVentilationDeDroits> lireVentilationDeDroitsJson(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        ApiResponse<List<LigneVentilationDeDroits>> localVarResp = lireVentilationDeDroitsJsonWithHttpInfo(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin);
        return localVarResp.getData();
    }

    /**
     * Récupération de la ventilation de droits au format json
     * Récupération de la ventilation de droits au format json
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @return ApiResponse&lt;List&lt;LigneVentilationDeDroits&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LigneVentilationDeDroits>> lireVentilationDeDroitsJsonWithHttpInfo(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin) throws ApiException {
        okhttp3.Call localVarCall = lireVentilationDeDroitsJsonValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, null);
        Type localVarReturnType = new TypeToken<List<LigneVentilationDeDroits>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération de la ventilation de droits au format json (asynchronously)
     * Récupération de la ventilation de droits au format json
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode le code de la periode (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (required)
     * @param dateDebut La date de début au format \&quot;2018-01-31\&quot; (optional)
     * @param dateFin La date de fin au format \&quot;2018-01-31\&quot; (optional)
     * @param numeroQuittanceDebut le numéro de quittance de début (optional)
     * @param numeroQuittanceFin Le numéro de quittance de fin (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ventilation de droits récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Ventilation de droits introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireVentilationDeDroitsJsonAsync(String codeStructure, String codePeriode, String codeStructureBudgetaire, LocalDate dateDebut, LocalDate dateFin, Long numeroQuittanceDebut, Long numeroQuittanceFin, final ApiCallback<List<LigneVentilationDeDroits>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireVentilationDeDroitsJsonValidateBeforeCall(codeStructure, codePeriode, codeStructureBudgetaire, dateDebut, dateFin, numeroQuittanceDebut, numeroQuittanceFin, _callback);
        Type localVarReturnType = new TypeToken<List<LigneVentilationDeDroits>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerComptesMarchandsActifs
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identifiants des comptes marchands actifs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucun compte marchand trouvé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerComptesMarchandsActifsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/comptes-marchands-actifs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerComptesMarchandsActifsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listerComptesMarchandsActifsCall(_callback);
        return localVarCall;

    }

    /**
     * Identifiants des comptes marchands actifs
     * Retourne les identifiants des comptes marchands actifs.
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identifiants des comptes marchands actifs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucun compte marchand trouvé </td><td>  -  </td></tr>
     </table>
     */
    public List<String> listerComptesMarchandsActifs() throws ApiException {
        ApiResponse<List<String>> localVarResp = listerComptesMarchandsActifsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Identifiants des comptes marchands actifs
     * Retourne les identifiants des comptes marchands actifs.
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identifiants des comptes marchands actifs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucun compte marchand trouvé </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listerComptesMarchandsActifsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listerComptesMarchandsActifsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identifiants des comptes marchands actifs (asynchronously)
     * Retourne les identifiants des comptes marchands actifs.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des identifiants des comptes marchands actifs </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Aucun compte marchand trouvé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerComptesMarchandsActifsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerComptesMarchandsActifsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerComptesMarchandsInscription
     * @param choixInscription La liste des choix de l&#39;inscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des associations &lt; identifiant de compte , choix d&#39;inscription &gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerComptesMarchandsInscriptionCall(List<ChoixInscription> choixInscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = choixInscription;

        // create path and map variables
        String localVarPath = "/pai/comptes-marchands-incription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerComptesMarchandsInscriptionValidateBeforeCall(List<ChoixInscription> choixInscription, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'choixInscription' is set
        if (choixInscription == null) {
            throw new ApiException("Missing the required parameter 'choixInscription' when calling listerComptesMarchandsInscription(Async)");
        }
        

        okhttp3.Call localVarCall = listerComptesMarchandsInscriptionCall(choixInscription, _callback);
        return localVarCall;

    }

    /**
     * Identifiants des comptes marchands associés à une inscription
     * Retourne les associations &lt; identifiant de compte marchand , choix d&#39;inscription &gt;.
     * @param choixInscription La liste des choix de l&#39;inscription (required)
     * @return Map&lt;String, List&lt;ChoixInscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des associations &lt; identifiant de compte , choix d&#39;inscription &gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, List<ChoixInscription>> listerComptesMarchandsInscription(List<ChoixInscription> choixInscription) throws ApiException {
        ApiResponse<Map<String, List<ChoixInscription>>> localVarResp = listerComptesMarchandsInscriptionWithHttpInfo(choixInscription);
        return localVarResp.getData();
    }

    /**
     * Identifiants des comptes marchands associés à une inscription
     * Retourne les associations &lt; identifiant de compte marchand , choix d&#39;inscription &gt;.
     * @param choixInscription La liste des choix de l&#39;inscription (required)
     * @return ApiResponse&lt;Map&lt;String, List&lt;ChoixInscription&gt;&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des associations &lt; identifiant de compte , choix d&#39;inscription &gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, List<ChoixInscription>>> listerComptesMarchandsInscriptionWithHttpInfo(List<ChoixInscription> choixInscription) throws ApiException {
        okhttp3.Call localVarCall = listerComptesMarchandsInscriptionValidateBeforeCall(choixInscription, null);
        Type localVarReturnType = new TypeToken<Map<String, List<ChoixInscription>>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Identifiants des comptes marchands associés à une inscription (asynchronously)
     * Retourne les associations &lt; identifiant de compte marchand , choix d&#39;inscription &gt;.
     * @param choixInscription La liste des choix de l&#39;inscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des associations &lt; identifiant de compte , choix d&#39;inscription &gt; </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerComptesMarchandsInscriptionAsync(List<ChoixInscription> choixInscription, final ApiCallback<Map<String, List<ChoixInscription>>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerComptesMarchandsInscriptionValidateBeforeCall(choixInscription, _callback);
        Type localVarReturnType = new TypeToken<Map<String, List<ChoixInscription>>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerFactures
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codesApprenants les codes apprenants (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des factures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerFacturesCall(String codeStructure, List<String> codesApprenants, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/factures/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codesApprenants != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "codesApprenants", codesApprenants));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerFacturesValidateBeforeCall(String codeStructure, List<String> codesApprenants, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerFactures(Async)");
        }
        

        okhttp3.Call localVarCall = listerFacturesCall(codeStructure, codesApprenants, _callback);
        return localVarCall;

    }

    /**
     * liste des factures
     * Lister les factures pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codesApprenants les codes apprenants (optional)
     * @return List&lt;Facture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des factures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<Facture> listerFactures(String codeStructure, List<String> codesApprenants) throws ApiException {
        ApiResponse<List<Facture>> localVarResp = listerFacturesWithHttpInfo(codeStructure, codesApprenants);
        return localVarResp.getData();
    }

    /**
     * liste des factures
     * Lister les factures pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codesApprenants les codes apprenants (optional)
     * @return ApiResponse&lt;List&lt;Facture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des factures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Facture>> listerFacturesWithHttpInfo(String codeStructure, List<String> codesApprenants) throws ApiException {
        okhttp3.Call localVarCall = listerFacturesValidateBeforeCall(codeStructure, codesApprenants, null);
        Type localVarReturnType = new TypeToken<List<Facture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * liste des factures (asynchronously)
     * Lister les factures pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codesApprenants les codes apprenants (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des factures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerFacturesAsync(String codeStructure, List<String> codesApprenants, final ApiCallback<List<Facture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerFacturesValidateBeforeCall(codeStructure, codesApprenants, _callback);
        Type localVarReturnType = new TypeToken<List<Facture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerFacturesPagination
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codesApprenants les codes apprenants (optional)
     * @param pageable  (optional)
     * @param recherche Recherche des factures via le filtre (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des factures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerFacturesPaginationCall(String codeStructure, List<String> codesApprenants, Pageable pageable, RechercheFactures recherche, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/factures/{codeStructure}/pagination"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codesApprenants != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "codesApprenants", codesApprenants));
        }

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        if (recherche != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recherche", recherche));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerFacturesPaginationValidateBeforeCall(String codeStructure, List<String> codesApprenants, Pageable pageable, RechercheFactures recherche, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerFacturesPagination(Async)");
        }
        

        okhttp3.Call localVarCall = listerFacturesPaginationCall(codeStructure, codesApprenants, pageable, recherche, _callback);
        return localVarCall;

    }

    /**
     * liste des factures avec pagination
     * Pagination des listes de factures pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codesApprenants les codes apprenants (optional)
     * @param pageable  (optional)
     * @param recherche Recherche des factures via le filtre (optional)
     * @return PagedFactures
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des factures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public PagedFactures listerFacturesPagination(String codeStructure, List<String> codesApprenants, Pageable pageable, RechercheFactures recherche) throws ApiException {
        ApiResponse<PagedFactures> localVarResp = listerFacturesPaginationWithHttpInfo(codeStructure, codesApprenants, pageable, recherche);
        return localVarResp.getData();
    }

    /**
     * liste des factures avec pagination
     * Pagination des listes de factures pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codesApprenants les codes apprenants (optional)
     * @param pageable  (optional)
     * @param recherche Recherche des factures via le filtre (optional)
     * @return ApiResponse&lt;PagedFactures&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des factures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedFactures> listerFacturesPaginationWithHttpInfo(String codeStructure, List<String> codesApprenants, Pageable pageable, RechercheFactures recherche) throws ApiException {
        okhttp3.Call localVarCall = listerFacturesPaginationValidateBeforeCall(codeStructure, codesApprenants, pageable, recherche, null);
        Type localVarReturnType = new TypeToken<PagedFactures>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * liste des factures avec pagination (asynchronously)
     * Pagination des listes de factures pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codesApprenants les codes apprenants (optional)
     * @param pageable  (optional)
     * @param recherche Recherche des factures via le filtre (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des factures </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerFacturesPaginationAsync(String codeStructure, List<String> codesApprenants, Pageable pageable, RechercheFactures recherche, final ApiCallback<PagedFactures> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerFacturesPaginationValidateBeforeCall(codeStructure, codesApprenants, pageable, recherche, _callback);
        Type localVarReturnType = new TypeToken<PagedFactures>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerLignesFacture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeApprenant le code de l&#39;apprenant (required)
     * @param codeChemin Le code chemin de la cible (required)
     * @param codePeriode le code période de la cible (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des lignes de la facture récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure, code apprenant ou clef cible introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerLignesFactureCall(String codeStructure, String codeApprenant, String codeChemin, String codePeriode, String codeStructureBudgetaire, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/lignes-facture/{codeStructure}/{codeApprenant}/{codeChemin}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeChemin" + "\\}", localVarApiClient.escapeString(codeChemin.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerLignesFactureValidateBeforeCall(String codeStructure, String codeApprenant, String codeChemin, String codePeriode, String codeStructureBudgetaire, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerLignesFacture(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling listerLignesFacture(Async)");
        }
        
        // verify the required parameter 'codeChemin' is set
        if (codeChemin == null) {
            throw new ApiException("Missing the required parameter 'codeChemin' when calling listerLignesFacture(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling listerLignesFacture(Async)");
        }
        

        okhttp3.Call localVarCall = listerLignesFactureCall(codeStructure, codeApprenant, codeChemin, codePeriode, codeStructureBudgetaire, _callback);
        return localVarCall;

    }

    /**
     * Lignes de facture pour un code structure, un code apprenant et un code cible
     * Lignes de facture pour un code structure, un code apprenant et un code cible
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeApprenant le code de l&#39;apprenant (required)
     * @param codeChemin Le code chemin de la cible (required)
     * @param codePeriode le code période de la cible (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (optional)
     * @return List&lt;ElementDeDroit&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des lignes de la facture récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure, code apprenant ou clef cible introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<ElementDeDroit> listerLignesFacture(String codeStructure, String codeApprenant, String codeChemin, String codePeriode, String codeStructureBudgetaire) throws ApiException {
        ApiResponse<List<ElementDeDroit>> localVarResp = listerLignesFactureWithHttpInfo(codeStructure, codeApprenant, codeChemin, codePeriode, codeStructureBudgetaire);
        return localVarResp.getData();
    }

    /**
     * Lignes de facture pour un code structure, un code apprenant et un code cible
     * Lignes de facture pour un code structure, un code apprenant et un code cible
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeApprenant le code de l&#39;apprenant (required)
     * @param codeChemin Le code chemin de la cible (required)
     * @param codePeriode le code période de la cible (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (optional)
     * @return ApiResponse&lt;List&lt;ElementDeDroit&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des lignes de la facture récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure, code apprenant ou clef cible introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ElementDeDroit>> listerLignesFactureWithHttpInfo(String codeStructure, String codeApprenant, String codeChemin, String codePeriode, String codeStructureBudgetaire) throws ApiException {
        okhttp3.Call localVarCall = listerLignesFactureValidateBeforeCall(codeStructure, codeApprenant, codeChemin, codePeriode, codeStructureBudgetaire, null);
        Type localVarReturnType = new TypeToken<List<ElementDeDroit>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lignes de facture pour un code structure, un code apprenant et un code cible (asynchronously)
     * Lignes de facture pour un code structure, un code apprenant et un code cible
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeApprenant le code de l&#39;apprenant (required)
     * @param codeChemin Le code chemin de la cible (required)
     * @param codePeriode le code période de la cible (required)
     * @param codeStructureBudgetaire Code de la Structure Budgetaire (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des lignes de la facture récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure, code apprenant ou clef cible introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerLignesFactureAsync(String codeStructure, String codeApprenant, String codeChemin, String codePeriode, String codeStructureBudgetaire, final ApiCallback<List<ElementDeDroit>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerLignesFactureValidateBeforeCall(codeStructure, codeApprenant, codeChemin, codePeriode, codeStructureBudgetaire, _callback);
        Type localVarReturnType = new TypeToken<List<ElementDeDroit>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerModalitesDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage des modalités de paiement récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerModalitesDePaiementValidateBeforeCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerModalitesDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = listerModalitesDePaiementCall(codeStructure, _callback);
        return localVarCall;

    }

    /**
     * Paramétrages des modalités de paiement pour un établissement
     * Paramétrages des modalités de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return List&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage des modalités de paiement récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<ModaliteDePaiement> listerModalitesDePaiement(String codeStructure) throws ApiException {
        ApiResponse<List<ModaliteDePaiement>> localVarResp = listerModalitesDePaiementWithHttpInfo(codeStructure);
        return localVarResp.getData();
    }

    /**
     * Paramétrages des modalités de paiement pour un établissement
     * Paramétrages des modalités de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return ApiResponse&lt;List&lt;ModaliteDePaiement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage des modalités de paiement récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModaliteDePaiement>> listerModalitesDePaiementWithHttpInfo(String codeStructure) throws ApiException {
        okhttp3.Call localVarCall = listerModalitesDePaiementValidateBeforeCall(codeStructure, null);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Paramétrages des modalités de paiement pour un établissement (asynchronously)
     * Paramétrages des modalités de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage des modalités de paiement récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementAsync(String codeStructure, final ApiCallback<List<ModaliteDePaiement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerModalitesDePaiementValidateBeforeCall(codeStructure, _callback);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerModalitesDePaiementActives
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des modalités de paiement actives </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementActivesCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement-actives/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerModalitesDePaiementActivesValidateBeforeCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerModalitesDePaiementActives(Async)");
        }
        

        okhttp3.Call localVarCall = listerModalitesDePaiementActivesCall(codeStructure, _callback);
        return localVarCall;

    }

    /**
     * Lister les modalités de paiement actives pour un établissement
     * Lister les modalités de paiement actives pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return List&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des modalités de paiement actives </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<ModaliteDePaiement> listerModalitesDePaiementActives(String codeStructure) throws ApiException {
        ApiResponse<List<ModaliteDePaiement>> localVarResp = listerModalitesDePaiementActivesWithHttpInfo(codeStructure);
        return localVarResp.getData();
    }

    /**
     * Lister les modalités de paiement actives pour un établissement
     * Lister les modalités de paiement actives pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return ApiResponse&lt;List&lt;ModaliteDePaiement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des modalités de paiement actives </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModaliteDePaiement>> listerModalitesDePaiementActivesWithHttpInfo(String codeStructure) throws ApiException {
        okhttp3.Call localVarCall = listerModalitesDePaiementActivesValidateBeforeCall(codeStructure, null);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lister les modalités de paiement actives pour un établissement (asynchronously)
     * Lister les modalités de paiement actives pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des modalités de paiement actives </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementActivesAsync(String codeStructure, final ApiCallback<List<ModaliteDePaiement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerModalitesDePaiementActivesValidateBeforeCall(codeStructure, _callback);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerModalitesDePaiementInscription
     * @param donneesInscription La liste des choix de l&#39;inscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des modalités de paiement autorisées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementInscriptionCall(DonneesInscription donneesInscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = donneesInscription;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement-inscription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerModalitesDePaiementInscriptionValidateBeforeCall(DonneesInscription donneesInscription, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'donneesInscription' is set
        if (donneesInscription == null) {
            throw new ApiException("Missing the required parameter 'donneesInscription' when calling listerModalitesDePaiementInscription(Async)");
        }
        

        okhttp3.Call localVarCall = listerModalitesDePaiementInscriptionCall(donneesInscription, _callback);
        return localVarCall;

    }

    /**
     * Modalités de paiement autorisées pour une inscription
     * Retourne les modalités de paiement autorisées communes à tous les choix d&#39;inscription.
     * @param donneesInscription La liste des choix de l&#39;inscription (required)
     * @return List&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des modalités de paiement autorisées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<ModaliteDePaiement> listerModalitesDePaiementInscription(DonneesInscription donneesInscription) throws ApiException {
        ApiResponse<List<ModaliteDePaiement>> localVarResp = listerModalitesDePaiementInscriptionWithHttpInfo(donneesInscription);
        return localVarResp.getData();
    }

    /**
     * Modalités de paiement autorisées pour une inscription
     * Retourne les modalités de paiement autorisées communes à tous les choix d&#39;inscription.
     * @param donneesInscription La liste des choix de l&#39;inscription (required)
     * @return ApiResponse&lt;List&lt;ModaliteDePaiement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des modalités de paiement autorisées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModaliteDePaiement>> listerModalitesDePaiementInscriptionWithHttpInfo(DonneesInscription donneesInscription) throws ApiException {
        okhttp3.Call localVarCall = listerModalitesDePaiementInscriptionValidateBeforeCall(donneesInscription, null);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modalités de paiement autorisées pour une inscription (asynchronously)
     * Retourne les modalités de paiement autorisées communes à tous les choix d&#39;inscription.
     * @param donneesInscription La liste des choix de l&#39;inscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des modalités de paiement autorisées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Choix d&#39;inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementInscriptionAsync(DonneesInscription donneesInscription, final ApiCallback<List<ModaliteDePaiement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerModalitesDePaiementInscriptionValidateBeforeCall(donneesInscription, _callback);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerPeriodesMiseEnOeuvre
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des periodes de mise en oeuvre </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerPeriodesMiseEnOeuvreCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/periodes/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerPeriodesMiseEnOeuvreValidateBeforeCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerPeriodesMiseEnOeuvre(Async)");
        }
        

        okhttp3.Call localVarCall = listerPeriodesMiseEnOeuvreCall(codeStructure, _callback);
        return localVarCall;

    }

    /**
     * Lister les periodes de mise en oeuvre disponibles dans PAI
     * Lister toutes les periodes de mise en oeuvre existantes dans PAI pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return List&lt;Periode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des periodes de mise en oeuvre </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<Periode> listerPeriodesMiseEnOeuvre(String codeStructure) throws ApiException {
        ApiResponse<List<Periode>> localVarResp = listerPeriodesMiseEnOeuvreWithHttpInfo(codeStructure);
        return localVarResp.getData();
    }

    /**
     * Lister les periodes de mise en oeuvre disponibles dans PAI
     * Lister toutes les periodes de mise en oeuvre existantes dans PAI pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return ApiResponse&lt;List&lt;Periode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des periodes de mise en oeuvre </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Periode>> listerPeriodesMiseEnOeuvreWithHttpInfo(String codeStructure) throws ApiException {
        okhttp3.Call localVarCall = listerPeriodesMiseEnOeuvreValidateBeforeCall(codeStructure, null);
        Type localVarReturnType = new TypeToken<List<Periode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lister les periodes de mise en oeuvre disponibles dans PAI (asynchronously)
     * Lister toutes les periodes de mise en oeuvre existantes dans PAI pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des periodes de mise en oeuvre </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerPeriodesMiseEnOeuvreAsync(String codeStructure, final ApiCallback<List<Periode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerPeriodesMiseEnOeuvreValidateBeforeCall(codeStructure, _callback);
        Type localVarReturnType = new TypeToken<List<Periode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerQuittances
     * @param codeStructure le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des quittances </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerQuittancesCall(String codeStructure, Pageable pageable, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/quittances/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerQuittancesValidateBeforeCall(String codeStructure, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerQuittances(Async)");
        }
        

        okhttp3.Call localVarCall = listerQuittancesCall(codeStructure, pageable, _callback);
        return localVarCall;

    }

    /**
     * liste des quittances
     * Lister les quittances pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @return PagedQuittances
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des quittances </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public PagedQuittances listerQuittances(String codeStructure, Pageable pageable) throws ApiException {
        ApiResponse<PagedQuittances> localVarResp = listerQuittancesWithHttpInfo(codeStructure, pageable);
        return localVarResp.getData();
    }

    /**
     * liste des quittances
     * Lister les quittances pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @return ApiResponse&lt;PagedQuittances&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des quittances </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedQuittances> listerQuittancesWithHttpInfo(String codeStructure, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listerQuittancesValidateBeforeCall(codeStructure, pageable, null);
        Type localVarReturnType = new TypeToken<PagedQuittances>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * liste des quittances (asynchronously)
     * Lister les quittances pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des quittances </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerQuittancesAsync(String codeStructure, Pageable pageable, final ApiCallback<PagedQuittances> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerQuittancesValidateBeforeCall(codeStructure, pageable, _callback);
        Type localVarReturnType = new TypeToken<PagedQuittances>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifierFacture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param numeroFacture le code de la facture (required)
     * @param codeStructureBudgetaire le code de la structure budgetaire (required)
     * @param facture La facture à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> facture modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> facture introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierFactureCall(String codeStructure, Long numeroFacture, String codeStructureBudgetaire, Facture facture, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = facture;

        // create path and map variables
        String localVarPath = "/pai/factures/{codeStructure}/{numeroFacture}/{codeStructureBudgetaire}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "numeroFacture" + "\\}", localVarApiClient.escapeString(numeroFacture.toString()))
            .replaceAll("\\{" + "codeStructureBudgetaire" + "\\}", localVarApiClient.escapeString(codeStructureBudgetaire.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifierFactureValidateBeforeCall(String codeStructure, Long numeroFacture, String codeStructureBudgetaire, Facture facture, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling modifierFacture(Async)");
        }
        
        // verify the required parameter 'numeroFacture' is set
        if (numeroFacture == null) {
            throw new ApiException("Missing the required parameter 'numeroFacture' when calling modifierFacture(Async)");
        }
        
        // verify the required parameter 'codeStructureBudgetaire' is set
        if (codeStructureBudgetaire == null) {
            throw new ApiException("Missing the required parameter 'codeStructureBudgetaire' when calling modifierFacture(Async)");
        }
        
        // verify the required parameter 'facture' is set
        if (facture == null) {
            throw new ApiException("Missing the required parameter 'facture' when calling modifierFacture(Async)");
        }
        

        okhttp3.Call localVarCall = modifierFactureCall(codeStructure, numeroFacture, codeStructureBudgetaire, facture, _callback);
        return localVarCall;

    }

    /**
     * Modification d&#39;une facture (paiements) pour un établissement et un code donnés
     * Modification d&#39;une facture (paiements) pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param numeroFacture le code de la facture (required)
     * @param codeStructureBudgetaire le code de la structure budgetaire (required)
     * @param facture La facture à ajouter (required)
     * @return Facture
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> facture modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> facture introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Facture modifierFacture(String codeStructure, Long numeroFacture, String codeStructureBudgetaire, Facture facture) throws ApiException {
        ApiResponse<Facture> localVarResp = modifierFactureWithHttpInfo(codeStructure, numeroFacture, codeStructureBudgetaire, facture);
        return localVarResp.getData();
    }

    /**
     * Modification d&#39;une facture (paiements) pour un établissement et un code donnés
     * Modification d&#39;une facture (paiements) pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param numeroFacture le code de la facture (required)
     * @param codeStructureBudgetaire le code de la structure budgetaire (required)
     * @param facture La facture à ajouter (required)
     * @return ApiResponse&lt;Facture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> facture modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> facture introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Facture> modifierFactureWithHttpInfo(String codeStructure, Long numeroFacture, String codeStructureBudgetaire, Facture facture) throws ApiException {
        okhttp3.Call localVarCall = modifierFactureValidateBeforeCall(codeStructure, numeroFacture, codeStructureBudgetaire, facture, null);
        Type localVarReturnType = new TypeToken<Facture>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modification d&#39;une facture (paiements) pour un établissement et un code donnés (asynchronously)
     * Modification d&#39;une facture (paiements) pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param numeroFacture le code de la facture (required)
     * @param codeStructureBudgetaire le code de la structure budgetaire (required)
     * @param facture La facture à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> facture modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> facture introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierFactureAsync(String codeStructure, Long numeroFacture, String codeStructureBudgetaire, Facture facture, final ApiCallback<Facture> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifierFactureValidateBeforeCall(codeStructure, numeroFacture, codeStructureBudgetaire, facture, _callback);
        Type localVarReturnType = new TypeToken<Facture>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifierModaliteDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierModaliteDePaiementCall(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modaliteDePaiement;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}/{codeModaliteDePaiement}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeModaliteDePaiement" + "\\}", localVarApiClient.escapeString(codeModaliteDePaiement.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifierModaliteDePaiementValidateBeforeCall(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling modifierModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'codeModaliteDePaiement' is set
        if (codeModaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'codeModaliteDePaiement' when calling modifierModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'modaliteDePaiement' is set
        if (modaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'modaliteDePaiement' when calling modifierModaliteDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = modifierModaliteDePaiementCall(codeStructure, codeModaliteDePaiement, modaliteDePaiement, _callback);
        return localVarCall;

    }

    /**
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @return ModaliteDePaiement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ModaliteDePaiement modifierModaliteDePaiement(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement) throws ApiException {
        ApiResponse<ModaliteDePaiement> localVarResp = modifierModaliteDePaiementWithHttpInfo(codeStructure, codeModaliteDePaiement, modaliteDePaiement);
        return localVarResp.getData();
    }

    /**
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @return ApiResponse&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModaliteDePaiement> modifierModaliteDePaiementWithHttpInfo(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement) throws ApiException {
        okhttp3.Call localVarCall = modifierModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, modaliteDePaiement, null);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés (asynchronously)
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierModaliteDePaiementAsync(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement, final ApiCallback<ModaliteDePaiement> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifierModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, modaliteDePaiement, _callback);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parametrerCompteMarchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param compteMarchandParametrageParam Le paramétrage à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Paramétrage ajouté </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Compte marchand non configuré </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parametrerCompteMarchandCall(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = compteMarchandParametrageParam;

        // create path and map variables
        String localVarPath = "/pai/compte-marchand-parametrage/{idCompte}"
            .replaceAll("\\{" + "idCompte" + "\\}", localVarApiClient.escapeString(idCompte.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parametrerCompteMarchandValidateBeforeCall(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'idCompte' is set
        if (idCompte == null) {
            throw new ApiException("Missing the required parameter 'idCompte' when calling parametrerCompteMarchand(Async)");
        }
        
        // verify the required parameter 'compteMarchandParametrageParam' is set
        if (compteMarchandParametrageParam == null) {
            throw new ApiException("Missing the required parameter 'compteMarchandParametrageParam' when calling parametrerCompteMarchand(Async)");
        }
        

        okhttp3.Call localVarCall = parametrerCompteMarchandCall(idCompte, compteMarchandParametrageParam, _callback);
        return localVarCall;

    }

    /**
     * Ajout d&#39;un paramètrage de compte marchand
     * Ajout d&#39;un paramètrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param compteMarchandParametrageParam Le paramétrage à ajouter (required)
     * @return CompteMarchandParametrageResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Paramétrage ajouté </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Compte marchand non configuré </td><td>  -  </td></tr>
     </table>
     */
    public CompteMarchandParametrageResult parametrerCompteMarchand(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam) throws ApiException {
        ApiResponse<CompteMarchandParametrageResult> localVarResp = parametrerCompteMarchandWithHttpInfo(idCompte, compteMarchandParametrageParam);
        return localVarResp.getData();
    }

    /**
     * Ajout d&#39;un paramètrage de compte marchand
     * Ajout d&#39;un paramètrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param compteMarchandParametrageParam Le paramétrage à ajouter (required)
     * @return ApiResponse&lt;CompteMarchandParametrageResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Paramétrage ajouté </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Compte marchand non configuré </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompteMarchandParametrageResult> parametrerCompteMarchandWithHttpInfo(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam) throws ApiException {
        okhttp3.Call localVarCall = parametrerCompteMarchandValidateBeforeCall(idCompte, compteMarchandParametrageParam, null);
        Type localVarReturnType = new TypeToken<CompteMarchandParametrageResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ajout d&#39;un paramètrage de compte marchand (asynchronously)
     * Ajout d&#39;un paramètrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param compteMarchandParametrageParam Le paramétrage à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Paramétrage ajouté </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Compte marchand non configuré </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parametrerCompteMarchandAsync(String idCompte, CompteMarchandParametrageParam compteMarchandParametrageParam, final ApiCallback<CompteMarchandParametrageResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = parametrerCompteMarchandValidateBeforeCall(idCompte, compteMarchandParametrageParam, _callback);
        Type localVarReturnType = new TypeToken<CompteMarchandParametrageResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerCompteMarchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerCompteMarchandCall(String idCompte, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/compte-marchand-parametrage/{idCompte}"
            .replaceAll("\\{" + "idCompte" + "\\}", localVarApiClient.escapeString(idCompte.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerCompteMarchandValidateBeforeCall(String idCompte, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'idCompte' is set
        if (idCompte == null) {
            throw new ApiException("Missing the required parameter 'idCompte' when calling supprimerCompteMarchand(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerCompteMarchandCall(idCompte, _callback);
        return localVarCall;

    }

    /**
     * Suppression d&#39;un paramétrage de compte marchand
     * Suppression d&#39;un paramétrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public void supprimerCompteMarchand(String idCompte) throws ApiException {
        supprimerCompteMarchandWithHttpInfo(idCompte);
    }

    /**
     * Suppression d&#39;un paramétrage de compte marchand
     * Suppression d&#39;un paramétrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerCompteMarchandWithHttpInfo(String idCompte) throws ApiException {
        okhttp3.Call localVarCall = supprimerCompteMarchandValidateBeforeCall(idCompte, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suppression d&#39;un paramétrage de compte marchand (asynchronously)
     * Suppression d&#39;un paramétrage de compte marchand
     * @param idCompte l&#39;identifiant du compte marchand (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 404 </td><td> Parametrage compte marchand introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerCompteMarchandAsync(String idCompte, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerCompteMarchandValidateBeforeCall(idCompte, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerModaliteDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement supprimée </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Modalité de paiement non supprimable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerModaliteDePaiementCall(String codeStructure, String codeModaliteDePaiement, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}/{codeModaliteDePaiement}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeModaliteDePaiement" + "\\}", localVarApiClient.escapeString(codeModaliteDePaiement.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerModaliteDePaiementValidateBeforeCall(String codeStructure, String codeModaliteDePaiement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling supprimerModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'codeModaliteDePaiement' is set
        if (codeModaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'codeModaliteDePaiement' when calling supprimerModaliteDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerModaliteDePaiementCall(codeStructure, codeModaliteDePaiement, _callback);
        return localVarCall;

    }

    /**
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement supprimée </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Modalité de paiement non supprimable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public void supprimerModaliteDePaiement(String codeStructure, String codeModaliteDePaiement) throws ApiException {
        supprimerModaliteDePaiementWithHttpInfo(codeStructure, codeModaliteDePaiement);
    }

    /**
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement supprimée </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Modalité de paiement non supprimable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerModaliteDePaiementWithHttpInfo(String codeStructure, String codeModaliteDePaiement) throws ApiException {
        okhttp3.Call localVarCall = supprimerModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés (asynchronously)
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement supprimée </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Modalité de paiement non supprimable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerModaliteDePaiementAsync(String codeStructure, String codeModaliteDePaiement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
