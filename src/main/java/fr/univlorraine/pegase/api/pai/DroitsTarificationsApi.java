/*
 * PAI v1 - Paiement
 * API pour la gestion des paiements
 *
 * The version of the OpenAPI document: 21.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.pai;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.pai.DroitTarification;
import fr.univlorraine.pegase.model.pai.DroitTarificationCreation;
import fr.univlorraine.pegase.model.pai.DroitTarificationModification;
import fr.univlorraine.pegase.model.pai.DroitTarificationPeriode;
import fr.univlorraine.pegase.model.pai.DroitTarificationPourListe;
import fr.univlorraine.pegase.model.pai.DroitTarificationPourModification;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DroitsTarificationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DroitsTarificationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DroitsTarificationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for copierDroitTarification
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationPeriode La liste des tarifications à copier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les tarifications ont été créées sur la nouvelle periode </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copierDroitTarificationCall(String codeStructure, String codePeriode, List<DroitTarificationPeriode> droitTarificationPeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = droitTarificationPeriode;

        // create path and map variables
        String localVarPath = "/pai/droits-tarifications/periodes/{codePeriode}"
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call copierDroitTarificationValidateBeforeCall(String codeStructure, String codePeriode, List<DroitTarificationPeriode> droitTarificationPeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling copierDroitTarification(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling copierDroitTarification(Async)");
        }
        
        // verify the required parameter 'droitTarificationPeriode' is set
        if (droitTarificationPeriode == null) {
            throw new ApiException("Missing the required parameter 'droitTarificationPeriode' when calling copierDroitTarification(Async)");
        }
        

        okhttp3.Call localVarCall = copierDroitTarificationCall(codeStructure, codePeriode, droitTarificationPeriode, _callback);
        return localVarCall;

    }

    /**
     * Copier les tarifications avec ses éléments de droit  d&#39;une période sur une autre
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationPeriode La liste des tarifications à copier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les tarifications ont été créées sur la nouvelle periode </td><td>  -  </td></tr>
     </table>
     */
    public void copierDroitTarification(String codeStructure, String codePeriode, List<DroitTarificationPeriode> droitTarificationPeriode) throws ApiException {
        copierDroitTarificationWithHttpInfo(codeStructure, codePeriode, droitTarificationPeriode);
    }

    /**
     * Copier les tarifications avec ses éléments de droit  d&#39;une période sur une autre
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationPeriode La liste des tarifications à copier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les tarifications ont été créées sur la nouvelle periode </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> copierDroitTarificationWithHttpInfo(String codeStructure, String codePeriode, List<DroitTarificationPeriode> droitTarificationPeriode) throws ApiException {
        okhttp3.Call localVarCall = copierDroitTarificationValidateBeforeCall(codeStructure, codePeriode, droitTarificationPeriode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Copier les tarifications avec ses éléments de droit  d&#39;une période sur une autre (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationPeriode La liste des tarifications à copier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les tarifications ont été créées sur la nouvelle periode </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call copierDroitTarificationAsync(String codeStructure, String codePeriode, List<DroitTarificationPeriode> droitTarificationPeriode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = copierDroitTarificationValidateBeforeCall(codeStructure, codePeriode, droitTarificationPeriode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for creerDroitTarification
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationCreation La tarification à créer (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La tarification de droit est créée </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerDroitTarificationCall(String codeStructure, String codePeriode, DroitTarificationCreation droitTarificationCreation, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = droitTarificationCreation;

        // create path and map variables
        String localVarPath = "/pai/droits-tarifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creerDroitTarificationValidateBeforeCall(String codeStructure, String codePeriode, DroitTarificationCreation droitTarificationCreation, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling creerDroitTarification(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling creerDroitTarification(Async)");
        }
        

        okhttp3.Call localVarCall = creerDroitTarificationCall(codeStructure, codePeriode, droitTarificationCreation, _callback);
        return localVarCall;

    }

    /**
     * Créer une tarification regroupants des éléments de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationCreation La tarification à créer (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La tarification de droit est créée </td><td>  -  </td></tr>
     </table>
     */
    public void creerDroitTarification(String codeStructure, String codePeriode, DroitTarificationCreation droitTarificationCreation) throws ApiException {
        creerDroitTarificationWithHttpInfo(codeStructure, codePeriode, droitTarificationCreation);
    }

    /**
     * Créer une tarification regroupants des éléments de droit
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationCreation La tarification à créer (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La tarification de droit est créée </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> creerDroitTarificationWithHttpInfo(String codeStructure, String codePeriode, DroitTarificationCreation droitTarificationCreation) throws ApiException {
        okhttp3.Call localVarCall = creerDroitTarificationValidateBeforeCall(codeStructure, codePeriode, droitTarificationCreation, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Créer une tarification regroupants des éléments de droit (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationCreation La tarification à créer (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La tarification de droit est créée </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerDroitTarificationAsync(String codeStructure, String codePeriode, DroitTarificationCreation droitTarificationCreation, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = creerDroitTarificationValidateBeforeCall(codeStructure, codePeriode, droitTarificationCreation, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireDroitTarification
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification et ses éventuels éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireDroitTarificationCall(String codeStructure, String codeDroitTarification, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/droits-tarifications/{codeDroitTarification}/periodes/{codePeriode}"
            .replaceAll("\\{" + "codeDroitTarification" + "\\}", localVarApiClient.escapeString(codeDroitTarification.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireDroitTarificationValidateBeforeCall(String codeStructure, String codeDroitTarification, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireDroitTarification(Async)");
        }
        
        // verify the required parameter 'codeDroitTarification' is set
        if (codeDroitTarification == null) {
            throw new ApiException("Missing the required parameter 'codeDroitTarification' when calling lireDroitTarification(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireDroitTarification(Async)");
        }
        

        okhttp3.Call localVarCall = lireDroitTarificationCall(codeStructure, codeDroitTarification, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Lire une tarification
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @return DroitTarificationPourModification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification et ses éventuels éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public DroitTarificationPourModification lireDroitTarification(String codeStructure, String codeDroitTarification, String codePeriode) throws ApiException {
        ApiResponse<DroitTarificationPourModification> localVarResp = lireDroitTarificationWithHttpInfo(codeStructure, codeDroitTarification, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Lire une tarification
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @return ApiResponse&lt;DroitTarificationPourModification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification et ses éventuels éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DroitTarificationPourModification> lireDroitTarificationWithHttpInfo(String codeStructure, String codeDroitTarification, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireDroitTarificationValidateBeforeCall(codeStructure, codeDroitTarification, codePeriode, null);
        Type localVarReturnType = new TypeToken<DroitTarificationPourModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lire une tarification (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification et ses éventuels éléments de droits </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireDroitTarificationAsync(String codeStructure, String codeDroitTarification, String codePeriode, final ApiCallback<DroitTarificationPourModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireDroitTarificationValidateBeforeCall(codeStructure, codeDroitTarification, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<DroitTarificationPourModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireListeDroitTarification
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des tarifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeDroitTarificationCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/droits-tarifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        if (codePeriode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codePeriode", codePeriode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListeDroitTarificationValidateBeforeCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListeDroitTarification(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListeDroitTarification(Async)");
        }
        

        okhttp3.Call localVarCall = lireListeDroitTarificationCall(codeStructure, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Liste des tarifications pour un établissement
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @return List&lt;DroitTarificationPourListe&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des tarifications </td><td>  -  </td></tr>
     </table>
     */
    public List<DroitTarificationPourListe> lireListeDroitTarification(String codeStructure, String codePeriode) throws ApiException {
        ApiResponse<List<DroitTarificationPourListe>> localVarResp = lireListeDroitTarificationWithHttpInfo(codeStructure, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Liste des tarifications pour un établissement
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @return ApiResponse&lt;List&lt;DroitTarificationPourListe&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des tarifications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DroitTarificationPourListe>> lireListeDroitTarificationWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireListeDroitTarificationValidateBeforeCall(codeStructure, codePeriode, null);
        Type localVarReturnType = new TypeToken<List<DroitTarificationPourListe>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des tarifications pour un établissement (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des tarifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeDroitTarificationAsync(String codeStructure, String codePeriode, final ApiCallback<List<DroitTarificationPourListe>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListeDroitTarificationValidateBeforeCall(codeStructure, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<List<DroitTarificationPourListe>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireListePourCopieDroitTarification
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param codePeriodeCible Code de la période cible (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des tarifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListePourCopieDroitTarificationCall(String codeStructure, String codePeriode, String codePeriodeCible, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/droits-tarifications/periodes/{codePeriode}/copiables/vers/periodes/{codePeriodeCible}"
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()))
            .replaceAll("\\{" + "codePeriodeCible" + "\\}", localVarApiClient.escapeString(codePeriodeCible.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListePourCopieDroitTarificationValidateBeforeCall(String codeStructure, String codePeriode, String codePeriodeCible, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListePourCopieDroitTarification(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListePourCopieDroitTarification(Async)");
        }
        
        // verify the required parameter 'codePeriodeCible' is set
        if (codePeriodeCible == null) {
            throw new ApiException("Missing the required parameter 'codePeriodeCible' when calling lireListePourCopieDroitTarification(Async)");
        }
        

        okhttp3.Call localVarCall = lireListePourCopieDroitTarificationCall(codeStructure, codePeriode, codePeriodeCible, _callback);
        return localVarCall;

    }

    /**
     * Liste des tarifications de la periode source  qui peuvent être copiés sur la periode cible pour un établissement
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param codePeriodeCible Code de la période cible (required)
     * @return List&lt;DroitTarification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des tarifications </td><td>  -  </td></tr>
     </table>
     */
    public List<DroitTarification> lireListePourCopieDroitTarification(String codeStructure, String codePeriode, String codePeriodeCible) throws ApiException {
        ApiResponse<List<DroitTarification>> localVarResp = lireListePourCopieDroitTarificationWithHttpInfo(codeStructure, codePeriode, codePeriodeCible);
        return localVarResp.getData();
    }

    /**
     * Liste des tarifications de la periode source  qui peuvent être copiés sur la periode cible pour un établissement
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param codePeriodeCible Code de la période cible (required)
     * @return ApiResponse&lt;List&lt;DroitTarification&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des tarifications </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<DroitTarification>> lireListePourCopieDroitTarificationWithHttpInfo(String codeStructure, String codePeriode, String codePeriodeCible) throws ApiException {
        okhttp3.Call localVarCall = lireListePourCopieDroitTarificationValidateBeforeCall(codeStructure, codePeriode, codePeriodeCible, null);
        Type localVarReturnType = new TypeToken<List<DroitTarification>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des tarifications de la periode source  qui peuvent être copiés sur la periode cible pour un établissement (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param codePeriodeCible Code de la période cible (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La liste des tarifications </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListePourCopieDroitTarificationAsync(String codeStructure, String codePeriode, String codePeriodeCible, final ApiCallback<List<DroitTarification>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListePourCopieDroitTarificationValidateBeforeCall(codeStructure, codePeriode, codePeriodeCible, _callback);
        Type localVarReturnType = new TypeToken<List<DroitTarification>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifierDroitTarification
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationModification La tarification à modifier (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification de droit est modifiée </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierDroitTarificationCall(String codeStructure, String codeDroitTarification, String codePeriode, DroitTarificationModification droitTarificationModification, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = droitTarificationModification;

        // create path and map variables
        String localVarPath = "/pai/droits-tarifications/{codeDroitTarification}/periodes/{codePeriode}"
            .replaceAll("\\{" + "codeDroitTarification" + "\\}", localVarApiClient.escapeString(codeDroitTarification.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifierDroitTarificationValidateBeforeCall(String codeStructure, String codeDroitTarification, String codePeriode, DroitTarificationModification droitTarificationModification, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling modifierDroitTarification(Async)");
        }
        
        // verify the required parameter 'codeDroitTarification' is set
        if (codeDroitTarification == null) {
            throw new ApiException("Missing the required parameter 'codeDroitTarification' when calling modifierDroitTarification(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling modifierDroitTarification(Async)");
        }
        

        okhttp3.Call localVarCall = modifierDroitTarificationCall(codeStructure, codeDroitTarification, codePeriode, droitTarificationModification, _callback);
        return localVarCall;

    }

    /**
     * Modifier une tarification
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationModification La tarification à modifier (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification de droit est modifiée </td><td>  -  </td></tr>
     </table>
     */
    public void modifierDroitTarification(String codeStructure, String codeDroitTarification, String codePeriode, DroitTarificationModification droitTarificationModification) throws ApiException {
        modifierDroitTarificationWithHttpInfo(codeStructure, codeDroitTarification, codePeriode, droitTarificationModification);
    }

    /**
     * Modifier une tarification
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationModification La tarification à modifier (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification de droit est modifiée </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> modifierDroitTarificationWithHttpInfo(String codeStructure, String codeDroitTarification, String codePeriode, DroitTarificationModification droitTarificationModification) throws ApiException {
        okhttp3.Call localVarCall = modifierDroitTarificationValidateBeforeCall(codeStructure, codeDroitTarification, codePeriode, droitTarificationModification, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Modifier une tarification (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @param droitTarificationModification La tarification à modifier (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification de droit est modifiée </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierDroitTarificationAsync(String codeStructure, String codeDroitTarification, String codePeriode, DroitTarificationModification droitTarificationModification, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifierDroitTarificationValidateBeforeCall(codeStructure, codeDroitTarification, codePeriode, droitTarificationModification, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerDroitTarification
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification a été supprimé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerDroitTarificationCall(String codeStructure, String codeDroitTarification, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/droits-tarifications/{codeDroitTarification}/periodes/{codePeriode}"
            .replaceAll("\\{" + "codeDroitTarification" + "\\}", localVarApiClient.escapeString(codeDroitTarification.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeStructure != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructure", codeStructure));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerDroitTarificationValidateBeforeCall(String codeStructure, String codeDroitTarification, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling supprimerDroitTarification(Async)");
        }
        
        // verify the required parameter 'codeDroitTarification' is set
        if (codeDroitTarification == null) {
            throw new ApiException("Missing the required parameter 'codeDroitTarification' when calling supprimerDroitTarification(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling supprimerDroitTarification(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerDroitTarificationCall(codeStructure, codeDroitTarification, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Supprimer une tarification
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification a été supprimé </td><td>  -  </td></tr>
     </table>
     */
    public void supprimerDroitTarification(String codeStructure, String codeDroitTarification, String codePeriode) throws ApiException {
        supprimerDroitTarificationWithHttpInfo(codeStructure, codeDroitTarification, codePeriode);
    }

    /**
     * Supprimer une tarification
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification a été supprimé </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerDroitTarificationWithHttpInfo(String codeStructure, String codeDroitTarification, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = supprimerDroitTarificationValidateBeforeCall(codeStructure, codeDroitTarification, codePeriode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Supprimer une tarification (asynchronously)
     * 
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeDroitTarification le code du droit tarification (required)
     * @param codePeriode Code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La tarification a été supprimé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerDroitTarificationAsync(String codeStructure, String codeDroitTarification, String codePeriode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerDroitTarificationValidateBeforeCall(codeStructure, codeDroitTarification, codePeriode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
