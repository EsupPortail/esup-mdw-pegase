/**
 *
 *  ESUP-Portail ESUP-MONDOSSIERWEB-PEGASE - Copyright (c) 2021 ESUP-Portail consortium
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/*
 * PAI v1 - Paiement
 * API pour la gestion des paiements
 *
 * The version of the OpenAPI document: 2.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.pai;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.pai.Facture;
import fr.univlorraine.pegase.model.pai.ModaliteDePaiement;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ModaliteDePaiementApi {
    private ApiClient localVarApiClient;

    public ModaliteDePaiementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ModaliteDePaiementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for creerFacture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param facture La facture à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La facture a été créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerFactureCall(String codeStructure, Facture facture, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = facture;

        // create path and map variables
        String localVarPath = "/pai/factures/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creerFactureValidateBeforeCall(String codeStructure, Facture facture, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling creerFacture(Async)");
        }
        
        // verify the required parameter 'facture' is set
        if (facture == null) {
            throw new ApiException("Missing the required parameter 'facture' when calling creerFacture(Async)");
        }
        

        okhttp3.Call localVarCall = creerFactureCall(codeStructure, facture, _callback);
        return localVarCall;

    }

    /**
     * Ajout d&#39;une facture
     * Ajout d&#39;une facture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param facture La facture à ajouter (required)
     * @return List&lt;Facture&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La facture a été créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<Facture> creerFacture(String codeStructure, Facture facture) throws ApiException {
        ApiResponse<List<Facture>> localVarResp = creerFactureWithHttpInfo(codeStructure, facture);
        return localVarResp.getData();
    }

    /**
     * Ajout d&#39;une facture
     * Ajout d&#39;une facture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param facture La facture à ajouter (required)
     * @return ApiResponse&lt;List&lt;Facture&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La facture a été créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Facture>> creerFactureWithHttpInfo(String codeStructure, Facture facture) throws ApiException {
        okhttp3.Call localVarCall = creerFactureValidateBeforeCall(codeStructure, facture, null);
        Type localVarReturnType = new TypeToken<List<Facture>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ajout d&#39;une facture (asynchronously)
     * Ajout d&#39;une facture
     * @param codeStructure le code de l&#39;établissement (required)
     * @param facture La facture à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> La facture a été créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerFactureAsync(String codeStructure, Facture facture, final ApiCallback<List<Facture>> _callback) throws ApiException {

        okhttp3.Call localVarCall = creerFactureValidateBeforeCall(codeStructure, facture, _callback);
        Type localVarReturnType = new TypeToken<List<Facture>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for creerModaliteDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Modalité de paiement créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerModaliteDePaiementCall(String codeStructure, ModaliteDePaiement modaliteDePaiement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = modaliteDePaiement;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call creerModaliteDePaiementValidateBeforeCall(String codeStructure, ModaliteDePaiement modaliteDePaiement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling creerModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'modaliteDePaiement' is set
        if (modaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'modaliteDePaiement' when calling creerModaliteDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = creerModaliteDePaiementCall(codeStructure, modaliteDePaiement, _callback);
        return localVarCall;

    }

    /**
     * Ajout d&#39;une modalité de paiement pour un établissement
     * Ajout d&#39;une modalité de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @return ModaliteDePaiement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Modalité de paiement créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ModaliteDePaiement creerModaliteDePaiement(String codeStructure, ModaliteDePaiement modaliteDePaiement) throws ApiException {
        ApiResponse<ModaliteDePaiement> localVarResp = creerModaliteDePaiementWithHttpInfo(codeStructure, modaliteDePaiement);
        return localVarResp.getData();
    }

    /**
     * Ajout d&#39;une modalité de paiement pour un établissement
     * Ajout d&#39;une modalité de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @return ApiResponse&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Modalité de paiement créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModaliteDePaiement> creerModaliteDePaiementWithHttpInfo(String codeStructure, ModaliteDePaiement modaliteDePaiement) throws ApiException {
        okhttp3.Call localVarCall = creerModaliteDePaiementValidateBeforeCall(codeStructure, modaliteDePaiement, null);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Ajout d&#39;une modalité de paiement pour un établissement (asynchronously)
     * Ajout d&#39;une modalité de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Modalité de paiement créée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call creerModaliteDePaiementAsync(String codeStructure, ModaliteDePaiement modaliteDePaiement, final ApiCallback<ModaliteDePaiement> _callback) throws ApiException {

        okhttp3.Call localVarCall = creerModaliteDePaiementValidateBeforeCall(codeStructure, modaliteDePaiement, _callback);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireModaliteDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La modalité de paiement récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireModaliteDePaiementCall(String codeStructure, String codeModaliteDePaiement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}/{codeModaliteDePaiement}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeModaliteDePaiement" + "\\}", localVarApiClient.escapeString(codeModaliteDePaiement.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireModaliteDePaiementValidateBeforeCall(String codeStructure, String codeModaliteDePaiement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'codeModaliteDePaiement' is set
        if (codeModaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'codeModaliteDePaiement' when calling lireModaliteDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = lireModaliteDePaiementCall(codeStructure, codeModaliteDePaiement, _callback);
        return localVarCall;

    }

    /**
     * Récupération d&#39;une modalité de paiement pour un établissement
     * Récupération d&#39;une modalité de paiement pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @return ModaliteDePaiement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La modalité de paiement récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ModaliteDePaiement lireModaliteDePaiement(String codeStructure, String codeModaliteDePaiement) throws ApiException {
        ApiResponse<ModaliteDePaiement> localVarResp = lireModaliteDePaiementWithHttpInfo(codeStructure, codeModaliteDePaiement);
        return localVarResp.getData();
    }

    /**
     * Récupération d&#39;une modalité de paiement pour un établissement
     * Récupération d&#39;une modalité de paiement pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @return ApiResponse&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La modalité de paiement récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModaliteDePaiement> lireModaliteDePaiementWithHttpInfo(String codeStructure, String codeModaliteDePaiement) throws ApiException {
        okhttp3.Call localVarCall = lireModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, null);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération d&#39;une modalité de paiement pour un établissement (asynchronously)
     * Récupération d&#39;une modalité de paiement pour un établissement à partir d&#39;un code
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> La modalité de paiement récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireModaliteDePaiementAsync(String codeStructure, String codeModaliteDePaiement, final ApiCallback<ModaliteDePaiement> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, _callback);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerModalitesDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage des modalités de paiement récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerModalitesDePaiementValidateBeforeCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerModalitesDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = listerModalitesDePaiementCall(codeStructure, _callback);
        return localVarCall;

    }

    /**
     * Paramétrages des modalités de paiement pour un établissement
     * Paramétrages des modalités de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return List&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage des modalités de paiement récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<ModaliteDePaiement> listerModalitesDePaiement(String codeStructure) throws ApiException {
        ApiResponse<List<ModaliteDePaiement>> localVarResp = listerModalitesDePaiementWithHttpInfo(codeStructure);
        return localVarResp.getData();
    }

    /**
     * Paramétrages des modalités de paiement pour un établissement
     * Paramétrages des modalités de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return ApiResponse&lt;List&lt;ModaliteDePaiement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage des modalités de paiement récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModaliteDePaiement>> listerModalitesDePaiementWithHttpInfo(String codeStructure) throws ApiException {
        okhttp3.Call localVarCall = listerModalitesDePaiementValidateBeforeCall(codeStructure, null);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Paramétrages des modalités de paiement pour un établissement (asynchronously)
     * Paramétrages des modalités de paiement pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Paramétrage des modalités de paiement récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementAsync(String codeStructure, final ApiCallback<List<ModaliteDePaiement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerModalitesDePaiementValidateBeforeCall(codeStructure, _callback);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerModalitesDePaiementActives
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des modalités de paiement actives </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementActivesCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement-actives/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerModalitesDePaiementActivesValidateBeforeCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerModalitesDePaiementActives(Async)");
        }
        

        okhttp3.Call localVarCall = listerModalitesDePaiementActivesCall(codeStructure, _callback);
        return localVarCall;

    }

    /**
     * Lister les modalités de paiement actives pour un établissement
     * Lister les modalités de paiement actives pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return List&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des modalités de paiement actives </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<ModaliteDePaiement> listerModalitesDePaiementActives(String codeStructure) throws ApiException {
        ApiResponse<List<ModaliteDePaiement>> localVarResp = listerModalitesDePaiementActivesWithHttpInfo(codeStructure);
        return localVarResp.getData();
    }

    /**
     * Lister les modalités de paiement actives pour un établissement
     * Lister les modalités de paiement actives pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @return ApiResponse&lt;List&lt;ModaliteDePaiement&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des modalités de paiement actives </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModaliteDePaiement>> listerModalitesDePaiementActivesWithHttpInfo(String codeStructure) throws ApiException {
        okhttp3.Call localVarCall = listerModalitesDePaiementActivesValidateBeforeCall(codeStructure, null);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lister les modalités de paiement actives pour un établissement (asynchronously)
     * Lister les modalités de paiement actives pour un établissement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des modalités de paiement actives </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> liste introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerModalitesDePaiementActivesAsync(String codeStructure, final ApiCallback<List<ModaliteDePaiement>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerModalitesDePaiementActivesValidateBeforeCall(codeStructure, _callback);
        Type localVarReturnType = new TypeToken<List<ModaliteDePaiement>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modifierModaliteDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierModaliteDePaiementCall(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = modaliteDePaiement;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}/{codeModaliteDePaiement}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeModaliteDePaiement" + "\\}", localVarApiClient.escapeString(codeModaliteDePaiement.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifierModaliteDePaiementValidateBeforeCall(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling modifierModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'codeModaliteDePaiement' is set
        if (codeModaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'codeModaliteDePaiement' when calling modifierModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'modaliteDePaiement' is set
        if (modaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'modaliteDePaiement' when calling modifierModaliteDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = modifierModaliteDePaiementCall(codeStructure, codeModaliteDePaiement, modaliteDePaiement, _callback);
        return localVarCall;

    }

    /**
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @return ModaliteDePaiement
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ModaliteDePaiement modifierModaliteDePaiement(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement) throws ApiException {
        ApiResponse<ModaliteDePaiement> localVarResp = modifierModaliteDePaiementWithHttpInfo(codeStructure, codeModaliteDePaiement, modaliteDePaiement);
        return localVarResp.getData();
    }

    /**
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @return ApiResponse&lt;ModaliteDePaiement&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModaliteDePaiement> modifierModaliteDePaiementWithHttpInfo(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement) throws ApiException {
        okhttp3.Call localVarCall = modifierModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, modaliteDePaiement, null);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés (asynchronously)
     * Modification d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param modaliteDePaiement La modalité de paiement à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement modifiée </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données invalides </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierModaliteDePaiementAsync(String codeStructure, String codeModaliteDePaiement, ModaliteDePaiement modaliteDePaiement, final ApiCallback<ModaliteDePaiement> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifierModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, modaliteDePaiement, _callback);
        Type localVarReturnType = new TypeToken<ModaliteDePaiement>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerModaliteDePaiement
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement supprimée </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Modalité de paiement non supprimable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerModaliteDePaiementCall(String codeStructure, String codeModaliteDePaiement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pai/modalites-de-paiement/{codeStructure}/{codeModaliteDePaiement}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeModaliteDePaiement" + "\\}", localVarApiClient.escapeString(codeModaliteDePaiement.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerModaliteDePaiementValidateBeforeCall(String codeStructure, String codeModaliteDePaiement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling supprimerModaliteDePaiement(Async)");
        }
        
        // verify the required parameter 'codeModaliteDePaiement' is set
        if (codeModaliteDePaiement == null) {
            throw new ApiException("Missing the required parameter 'codeModaliteDePaiement' when calling supprimerModaliteDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerModaliteDePaiementCall(codeStructure, codeModaliteDePaiement, _callback);
        return localVarCall;

    }

    /**
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement supprimée </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Modalité de paiement non supprimable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public void supprimerModaliteDePaiement(String codeStructure, String codeModaliteDePaiement) throws ApiException {
        supprimerModaliteDePaiementWithHttpInfo(codeStructure, codeModaliteDePaiement);
    }

    /**
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement supprimée </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Modalité de paiement non supprimable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerModaliteDePaiementWithHttpInfo(String codeStructure, String codeModaliteDePaiement) throws ApiException {
        okhttp3.Call localVarCall = supprimerModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés (asynchronously)
     * Suppression d&#39;une modalité de paiement pour un établissement et un code donnés
     * @param codeStructure le code de l&#39;établissement (required)
     * @param codeModaliteDePaiement le code de la modalité de paiement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Modalité de paiement supprimée </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Modalité de paiement non supprimable </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Modalité introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerModaliteDePaiementAsync(String codeStructure, String codeModaliteDePaiement, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerModaliteDePaiementValidateBeforeCall(codeStructure, codeModaliteDePaiement, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
