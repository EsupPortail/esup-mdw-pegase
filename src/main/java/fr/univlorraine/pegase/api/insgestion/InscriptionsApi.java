/*
 * Swagger Gestion - INS
 * Il s'agit de l'API de gestion - INS.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.insgestion;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.insgestion.ApprenantEtInscriptions;
import java.io.File;
import fr.univlorraine.pegase.model.insgestion.InscriptionComplete;
import fr.univlorraine.pegase.model.insgestion.Inscriptions;
import fr.univlorraine.pegase.model.insgestion.MotifAnnulation;
import fr.univlorraine.pegase.model.insgestion.Periode;
import fr.univlorraine.pegase.model.insgestion.Piece;
import fr.univlorraine.pegase.model.insgestion.StatutInscriptionVoeu;
import fr.univlorraine.pegase.model.insgestion.StatutPaiementVoeu;
import fr.univlorraine.pegase.model.insgestion.StatutPiecesVoeu;
import fr.univlorraine.pegase.model.insgestion.TriInscription;
import fr.univlorraine.pegase.model.insgestion.TypeEnqueteSise;
import fr.univlorraine.pegase.model.insgestion.Voeu;
import fr.univlorraine.pegase.model.insgestion.VoeuInscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InscriptionsApi {
    private ApiClient localVarApiClient;

    public InscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for annuleInscription
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être rembousée. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Inscription n&#39;a pas pu être annulé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annuleInscriptionCall(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/{codeVoeu}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (motifAnnulation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("motifAnnulation", motifAnnulation));
        }

        if (avecRemboursement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avecRemboursement", avecRemboursement));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annuleInscriptionValidateBeforeCall(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling annuleInscription(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling annuleInscription(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling annuleInscription(Async)");
        }
        
        // verify the required parameter 'motifAnnulation' is set
        if (motifAnnulation == null) {
            throw new ApiException("Missing the required parameter 'motifAnnulation' when calling annuleInscription(Async)");
        }
        
        // verify the required parameter 'avecRemboursement' is set
        if (avecRemboursement == null) {
            throw new ApiException("Missing the required parameter 'avecRemboursement' when calling annuleInscription(Async)");
        }
        

        okhttp3.Call localVarCall = annuleInscriptionCall(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement, _callback);
        return localVarCall;

    }

    /**
     * Annule une inscription
     * Annule une inscription
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être rembousée. (required)
     * @return VoeuInscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Inscription n&#39;a pas pu être annulé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public VoeuInscription annuleInscription(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
        ApiResponse<VoeuInscription> localVarResp = annuleInscriptionWithHttpInfo(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement);
        return localVarResp.getData();
    }

    /**
     * Annule une inscription
     * Annule une inscription
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être rembousée. (required)
     * @return ApiResponse&lt;VoeuInscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Inscription n&#39;a pas pu être annulé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoeuInscription> annuleInscriptionWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
        okhttp3.Call localVarCall = annuleInscriptionValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement, null);
        Type localVarReturnType = new TypeToken<VoeuInscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Annule une inscription (asynchronously)
     * Annule une inscription
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être rembousée. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Inscription n&#39;a pas pu être annulé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annuleInscriptionAsync(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback<VoeuInscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = annuleInscriptionValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement, _callback);
        Type localVarReturnType = new TypeToken<VoeuInscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annulerPiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce réinitialisée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce à annuler introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annulerPieceCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/{codePiece}/annuler"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annulerPieceValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling annulerPiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling annulerPiece(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling annulerPiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling annulerPiece(Async)");
        }
        

        okhttp3.Call localVarCall = annulerPieceCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        return localVarCall;

    }

    /**
     * annuler une pièce
     * annuler une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @return Piece
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce réinitialisée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce à annuler introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Piece annulerPiece(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        ApiResponse<Piece> localVarResp = annulerPieceWithHttpInfo(codeStructure, codeApprenant, codeCible, codePiece);
        return localVarResp.getData();
    }

    /**
     * annuler une pièce
     * annuler une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @return ApiResponse&lt;Piece&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce réinitialisée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce à annuler introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Piece> annulerPieceWithHttpInfo(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        okhttp3.Call localVarCall = annulerPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, null);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annuler une pièce (asynchronously)
     * annuler une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce réinitialisée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce à annuler introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annulerPieceAsync(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback<Piece> _callback) throws ApiException {

        okhttp3.Call localVarCall = annulerPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contenuPiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contenuPieceCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/{codePiece}/contenu"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "image/png", "image/jpg"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contenuPieceValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling contenuPiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling contenuPiece(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling contenuPiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling contenuPiece(Async)");
        }
        

        okhttp3.Call localVarCall = contenuPieceCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        return localVarCall;

    }

    /**
     * contenu de la pièce
     * contenu de la pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File contenuPiece(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        ApiResponse<File> localVarResp = contenuPieceWithHttpInfo(codeStructure, codeApprenant, codeCible, codePiece);
        return localVarResp.getData();
    }

    /**
     * contenu de la pièce
     * contenu de la pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> contenuPieceWithHttpInfo(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        okhttp3.Call localVarCall = contenuPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * contenu de la pièce (asynchronously)
     * contenu de la pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contenuPieceAsync(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = contenuPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imprimerAttestationDePaiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression de l&#39;attestation de paiement </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attestation introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imprimerAttestationDePaiementCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeVoeu}/attestation-de-paiement/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imprimerAttestationDePaiementValidateBeforeCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling imprimerAttestationDePaiement(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling imprimerAttestationDePaiement(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling imprimerAttestationDePaiement(Async)");
        }
        

        okhttp3.Call localVarCall = imprimerAttestationDePaiementCall(codeStructure, codeApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * Impression de l&#39;attestation de paiement
     * Impression de l&#39;attestation de paiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression de l&#39;attestation de paiement </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attestation introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File imprimerAttestationDePaiement(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        ApiResponse<File> localVarResp = imprimerAttestationDePaiementWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * Impression de l&#39;attestation de paiement
     * Impression de l&#39;attestation de paiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression de l&#39;attestation de paiement </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attestation introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imprimerAttestationDePaiementWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = imprimerAttestationDePaiementValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Impression de l&#39;attestation de paiement (asynchronously)
     * Impression de l&#39;attestation de paiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression de l&#39;attestation de paiement </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Attestation introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imprimerAttestationDePaiementAsync(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imprimerAttestationDePaiementValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imprimerCertificatDeScolarite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imprimerCertificatDeScolariteCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeVoeu}/certificat-de-scolarite/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imprimerCertificatDeScolariteValidateBeforeCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling imprimerCertificatDeScolarite(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling imprimerCertificatDeScolarite(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling imprimerCertificatDeScolarite(Async)");
        }
        

        okhttp3.Call localVarCall = imprimerCertificatDeScolariteCall(codeStructure, codeApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * Impression du certificat de scolarité
     * Impression du certificat de scolarité
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File imprimerCertificatDeScolarite(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        ApiResponse<File> localVarResp = imprimerCertificatDeScolariteWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * Impression du certificat de scolarité
     * Impression du certificat de scolarité
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imprimerCertificatDeScolariteWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = imprimerCertificatDeScolariteValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Impression du certificat de scolarité (asynchronously)
     * Impression du certificat de scolarité
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imprimerCertificatDeScolariteAsync(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imprimerCertificatDeScolariteValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireEnqueteSise
     * @param codeStructure Code de la Structure (required)
     * @param codePeriode Code de la Periode (required)
     * @param typeEnqueteSise liste des types d&#39;enquetes sise (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formulaire enquete Sise </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Formulaire enquete Sise introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireEnqueteSiseCall(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/enqueteSise/{codeStructure}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (typeEnqueteSise != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeEnqueteSise", typeEnqueteSise));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireEnqueteSiseValidateBeforeCall(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireEnqueteSise(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireEnqueteSise(Async)");
        }
        
        // verify the required parameter 'typeEnqueteSise' is set
        if (typeEnqueteSise == null) {
            throw new ApiException("Missing the required parameter 'typeEnqueteSise' when calling lireEnqueteSise(Async)");
        }
        

        okhttp3.Call localVarCall = lireEnqueteSiseCall(codeStructure, codePeriode, typeEnqueteSise, _callback);
        return localVarCall;

    }

    /**
     * Récupération de l&#39;enquete Sise
     * Récupération de l&#39;enquete Sise
     * @param codeStructure Code de la Structure (required)
     * @param codePeriode Code de la Periode (required)
     * @param typeEnqueteSise liste des types d&#39;enquetes sise (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formulaire enquete Sise </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Formulaire enquete Sise introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File lireEnqueteSise(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise) throws ApiException {
        ApiResponse<File> localVarResp = lireEnqueteSiseWithHttpInfo(codeStructure, codePeriode, typeEnqueteSise);
        return localVarResp.getData();
    }

    /**
     * Récupération de l&#39;enquete Sise
     * Récupération de l&#39;enquete Sise
     * @param codeStructure Code de la Structure (required)
     * @param codePeriode Code de la Periode (required)
     * @param typeEnqueteSise liste des types d&#39;enquetes sise (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formulaire enquete Sise </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Formulaire enquete Sise introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> lireEnqueteSiseWithHttpInfo(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise) throws ApiException {
        okhttp3.Call localVarCall = lireEnqueteSiseValidateBeforeCall(codeStructure, codePeriode, typeEnqueteSise, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération de l&#39;enquete Sise (asynchronously)
     * Récupération de l&#39;enquete Sise
     * @param codeStructure Code de la Structure (required)
     * @param codePeriode Code de la Periode (required)
     * @param typeEnqueteSise liste des types d&#39;enquetes sise (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formulaire enquete Sise </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Formulaire enquete Sise introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireEnqueteSiseAsync(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireEnqueteSiseValidateBeforeCall(codeStructure, codePeriode, typeEnqueteSise, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireEnvoiCvec
     * @param codeStructure Code de la Structure (required)
     * @param codePeriode Code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireEnvoiCvecCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/periode/{codePeriode}/cvec/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireEnvoiCvecValidateBeforeCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireEnvoiCvec(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireEnvoiCvec(Async)");
        }
        

        okhttp3.Call localVarCall = lireEnvoiCvecCall(codeStructure, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * @param codeStructure Code de la Structure (required)
     * @param codePeriode Code de la période (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File lireEnvoiCvec(String codeStructure, String codePeriode) throws ApiException {
        ApiResponse<File> localVarResp = lireEnvoiCvecWithHttpInfo(codeStructure, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * @param codeStructure Code de la Structure (required)
     * @param codePeriode Code de la période (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> lireEnvoiCvecWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireEnvoiCvecValidateBeforeCall(codeStructure, codePeriode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv (asynchronously)
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * @param codeStructure Code de la Structure (required)
     * @param codePeriode Code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireEnvoiCvecAsync(String codeStructure, String codePeriode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireEnvoiCvecValidateBeforeCall(codeStructure, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireInscription
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/{codeVoeu}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireInscriptionValidateBeforeCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireInscription(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling lireInscription(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling lireInscription(Async)");
        }
        

        okhttp3.Call localVarCall = lireInscriptionCall(codeStructure, codeApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * Chercher les données d&#39;une inscription
     * Chercher les données d&#39;une inscription
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @return InscriptionComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public InscriptionComplete lireInscription(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        ApiResponse<InscriptionComplete> localVarResp = lireInscriptionWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * Chercher les données d&#39;une inscription
     * Chercher les données d&#39;une inscription
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @return ApiResponse&lt;InscriptionComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InscriptionComplete> lireInscriptionWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = lireInscriptionValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<InscriptionComplete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Chercher les données d&#39;une inscription (asynchronously)
     * Chercher les données d&#39;une inscription
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionAsync(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback<InscriptionComplete> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireInscriptionValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<InscriptionComplete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireInscriptions
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireInscriptionsValidateBeforeCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireInscriptions(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling lireInscriptions(Async)");
        }
        

        okhttp3.Call localVarCall = lireInscriptionsCall(codeStructure, codeApprenant, _callback);
        return localVarCall;

    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant
     * Récupérer le dossier complet d&#39;un apprenant  Utilisée par *Mon Dossier Web* 
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @return ApprenantEtInscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApprenantEtInscriptions lireInscriptions(String codeStructure, String codeApprenant) throws ApiException {
        ApiResponse<ApprenantEtInscriptions> localVarResp = lireInscriptionsWithHttpInfo(codeStructure, codeApprenant);
        return localVarResp.getData();
    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant
     * Récupérer le dossier complet d&#39;un apprenant  Utilisée par *Mon Dossier Web* 
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @return ApiResponse&lt;ApprenantEtInscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApprenantEtInscriptions> lireInscriptionsWithHttpInfo(String codeStructure, String codeApprenant) throws ApiException {
        okhttp3.Call localVarCall = lireInscriptionsValidateBeforeCall(codeStructure, codeApprenant, null);
        Type localVarReturnType = new TypeToken<ApprenantEtInscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant (asynchronously)
     * Récupérer le dossier complet d&#39;un apprenant  Utilisée par *Mon Dossier Web* 
     * @param codeStructure Le code de la structure (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsAsync(String codeStructure, String codeApprenant, final ApiCallback<ApprenantEtInscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireInscriptionsValidateBeforeCall(codeStructure, codeApprenant, _callback);
        Type localVarReturnType = new TypeToken<ApprenantEtInscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lirePieces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pièces récupérées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lirePiecesCall(String codeStructure, String codeApprenant, String codeCible, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/pieces"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lirePiecesValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lirePieces(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling lirePieces(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling lirePieces(Async)");
        }
        

        okhttp3.Call localVarCall = lirePiecesCall(codeStructure, codeApprenant, codeCible, _callback);
        return localVarCall;

    }

    /**
     * récupération des données des pièces
     * récupération des données des pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @return Map&lt;String, Piece&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pièces récupérées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, Piece> lirePieces(String codeStructure, String codeApprenant, String codeCible) throws ApiException {
        ApiResponse<Map<String, Piece>> localVarResp = lirePiecesWithHttpInfo(codeStructure, codeApprenant, codeCible);
        return localVarResp.getData();
    }

    /**
     * récupération des données des pièces
     * récupération des données des pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @return ApiResponse&lt;Map&lt;String, Piece&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pièces récupérées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, Piece>> lirePiecesWithHttpInfo(String codeStructure, String codeApprenant, String codeCible) throws ApiException {
        okhttp3.Call localVarCall = lirePiecesValidateBeforeCall(codeStructure, codeApprenant, codeCible, null);
        Type localVarReturnType = new TypeToken<Map<String, Piece>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * récupération des données des pièces (asynchronously)
     * récupération des données des pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pièces récupérées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lirePiecesAsync(String codeStructure, String codeApprenant, String codeCible, final ApiCallback<Map<String, Piece>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lirePiecesValidateBeforeCall(codeStructure, codeApprenant, codeCible, _callback);
        Type localVarReturnType = new TypeToken<Map<String, Piece>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerInscriptionsValidees
     * @param codeStructure Code de la Structure (required)
     * @param statutsInscription liste des statusInscription à filtrer (optional)
     * @param statutsPieces liste des statusPiece à filtrer (optional)
     * @param statutsPaiement liste des statutPaiement à filtrer (optional)
     * @param tri liste des tri (optional)
     * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE, numéro apprenant, numéro candidat). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions validées </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerInscriptionsValideesCall(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (statutsInscription != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statutsInscription", statutsInscription));
        }

        if (statutsPieces != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statutsPieces", statutsPieces));
        }

        if (statutsPaiement != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statutsPaiement", statutsPaiement));
        }

        if (tri != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tri", tri));
        }

        if (recherche != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recherche", recherche));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerInscriptionsValideesValidateBeforeCall(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerInscriptionsValidees(Async)");
        }
        

        okhttp3.Call localVarCall = listerInscriptionsValideesCall(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, recherche, _callback);
        return localVarCall;

    }

    /**
     * Liste des inscriptions validées
     * Liste des inscriptions validées
     * @param codeStructure Code de la Structure (required)
     * @param statutsInscription liste des statusInscription à filtrer (optional)
     * @param statutsPieces liste des statusPiece à filtrer (optional)
     * @param statutsPaiement liste des statutPaiement à filtrer (optional)
     * @param tri liste des tri (optional)
     * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE, numéro apprenant, numéro candidat). (optional)
     * @return Inscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions validées </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
     </table>
     */
    public Inscriptions listerInscriptionsValidees(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche) throws ApiException {
        ApiResponse<Inscriptions> localVarResp = listerInscriptionsValideesWithHttpInfo(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, recherche);
        return localVarResp.getData();
    }

    /**
     * Liste des inscriptions validées
     * Liste des inscriptions validées
     * @param codeStructure Code de la Structure (required)
     * @param statutsInscription liste des statusInscription à filtrer (optional)
     * @param statutsPieces liste des statusPiece à filtrer (optional)
     * @param statutsPaiement liste des statutPaiement à filtrer (optional)
     * @param tri liste des tri (optional)
     * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE, numéro apprenant, numéro candidat). (optional)
     * @return ApiResponse&lt;Inscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions validées </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Inscriptions> listerInscriptionsValideesWithHttpInfo(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche) throws ApiException {
        okhttp3.Call localVarCall = listerInscriptionsValideesValidateBeforeCall(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, recherche, null);
        Type localVarReturnType = new TypeToken<Inscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des inscriptions validées (asynchronously)
     * Liste des inscriptions validées
     * @param codeStructure Code de la Structure (required)
     * @param statutsInscription liste des statusInscription à filtrer (optional)
     * @param statutsPieces liste des statusPiece à filtrer (optional)
     * @param statutsPaiement liste des statutPaiement à filtrer (optional)
     * @param tri liste des tri (optional)
     * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE, numéro apprenant, numéro candidat). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions validées </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerInscriptionsValideesAsync(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche, final ApiCallback<Inscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerInscriptionsValideesValidateBeforeCall(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, recherche, _callback);
        Type localVarReturnType = new TypeToken<Inscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerPeriodes
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des périodes récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerPeriodesCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/periodes/{codeStructure}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerPeriodesValidateBeforeCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerPeriodes(Async)");
        }
        

        okhttp3.Call localVarCall = listerPeriodesCall(codeStructure, _callback);
        return localVarCall;

    }

    /**
     * Lire les périodes pour un établissement
     * Lire les périodes pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @return List&lt;Periode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des périodes récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<Periode> listerPeriodes(String codeStructure) throws ApiException {
        ApiResponse<List<Periode>> localVarResp = listerPeriodesWithHttpInfo(codeStructure);
        return localVarResp.getData();
    }

    /**
     * Lire les périodes pour un établissement
     * Lire les périodes pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @return ApiResponse&lt;List&lt;Periode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des périodes récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Periode>> listerPeriodesWithHttpInfo(String codeStructure) throws ApiException {
        okhttp3.Call localVarCall = listerPeriodesValidateBeforeCall(codeStructure, null);
        Type localVarReturnType = new TypeToken<List<Periode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lire les périodes pour un établissement (asynchronously)
     * Lire les périodes pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des périodes récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerPeriodesAsync(String codeStructure, final ApiCallback<List<Periode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerPeriodesValidateBeforeCall(codeStructure, _callback);
        Type localVarReturnType = new TypeToken<List<Periode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejeterPiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param body le motif du rejet de la pièce (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> pièce rejetée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejeterPieceCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/{codePiece}/rejeter"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejeterPieceValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling rejeterPiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling rejeterPiece(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling rejeterPiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling rejeterPiece(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rejeterPiece(Async)");
        }
        

        okhttp3.Call localVarCall = rejeterPieceCall(codeStructure, codeApprenant, codeCible, codePiece, body, _callback);
        return localVarCall;

    }

    /**
     * rejeter une pièce
     * rejeter une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param body le motif du rejet de la pièce (required)
     * @return Piece
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> pièce rejetée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Piece rejeterPiece(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body) throws ApiException {
        ApiResponse<Piece> localVarResp = rejeterPieceWithHttpInfo(codeStructure, codeApprenant, codeCible, codePiece, body);
        return localVarResp.getData();
    }

    /**
     * rejeter une pièce
     * rejeter une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param body le motif du rejet de la pièce (required)
     * @return ApiResponse&lt;Piece&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> pièce rejetée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Piece> rejeterPieceWithHttpInfo(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body) throws ApiException {
        okhttp3.Call localVarCall = rejeterPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, body, null);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * rejeter une pièce (asynchronously)
     * rejeter une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param body le motif du rejet de la pièce (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> pièce rejetée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejeterPieceAsync(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body, final ApiCallback<Piece> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejeterPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, body, _callback);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validerLesPieces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des pièces validées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Listes des pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerLesPiecesCall(String codeStructure, String codeApprenant, String codeCible, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/validerPieces"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validerLesPiecesValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling validerLesPieces(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling validerLesPieces(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling validerLesPieces(Async)");
        }
        

        okhttp3.Call localVarCall = validerLesPiecesCall(codeStructure, codeApprenant, codeCible, _callback);
        return localVarCall;

    }

    /**
     * valider les pièces
     * Valider les pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @return Voeu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des pièces validées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Listes des pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Voeu validerLesPieces(String codeStructure, String codeApprenant, String codeCible) throws ApiException {
        ApiResponse<Voeu> localVarResp = validerLesPiecesWithHttpInfo(codeStructure, codeApprenant, codeCible);
        return localVarResp.getData();
    }

    /**
     * valider les pièces
     * Valider les pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @return ApiResponse&lt;Voeu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des pièces validées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Listes des pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Voeu> validerLesPiecesWithHttpInfo(String codeStructure, String codeApprenant, String codeCible) throws ApiException {
        okhttp3.Call localVarCall = validerLesPiecesValidateBeforeCall(codeStructure, codeApprenant, codeCible, null);
        Type localVarReturnType = new TypeToken<Voeu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * valider les pièces (asynchronously)
     * Valider les pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des pièces validées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Listes des pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerLesPiecesAsync(String codeStructure, String codeApprenant, String codeCible, final ApiCallback<Voeu> _callback) throws ApiException {

        okhttp3.Call localVarCall = validerLesPiecesValidateBeforeCall(codeStructure, codeApprenant, codeCible, _callback);
        Type localVarReturnType = new TypeToken<Voeu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validerPaiementVoeu
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le paiement l&#39;inscription est validé </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Voeu introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerPaiementVoeuCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeVoeu}/validerPaiement"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validerPaiementVoeuValidateBeforeCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling validerPaiementVoeu(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling validerPaiementVoeu(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling validerPaiementVoeu(Async)");
        }
        

        okhttp3.Call localVarCall = validerPaiementVoeuCall(codeStructure, codeApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * valider le paiement de l&#39;inscription
     * Valider le paiement de l&#39;inscription (statutPaiement sous voeu)
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @return VoeuInscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le paiement l&#39;inscription est validé </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Voeu introuvable </td><td>  -  </td></tr>
     </table>
     */
    public VoeuInscription validerPaiementVoeu(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        ApiResponse<VoeuInscription> localVarResp = validerPaiementVoeuWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * valider le paiement de l&#39;inscription
     * Valider le paiement de l&#39;inscription (statutPaiement sous voeu)
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @return ApiResponse&lt;VoeuInscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le paiement l&#39;inscription est validé </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Voeu introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoeuInscription> validerPaiementVoeuWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = validerPaiementVoeuValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<VoeuInscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * valider le paiement de l&#39;inscription (asynchronously)
     * Valider le paiement de l&#39;inscription (statutPaiement sous voeu)
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le paiement l&#39;inscription est validé </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Voeu introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerPaiementVoeuAsync(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback<VoeuInscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = validerPaiementVoeuValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<VoeuInscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validerUnePiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce validée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerUnePieceCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/{codePiece}/valider"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validerUnePieceValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling validerUnePiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling validerUnePiece(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling validerUnePiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling validerUnePiece(Async)");
        }
        

        okhttp3.Call localVarCall = validerUnePieceCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        return localVarCall;

    }

    /**
     * valider une pièce
     * Valider une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @return Piece
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce validée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Piece validerUnePiece(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        ApiResponse<Piece> localVarResp = validerUnePieceWithHttpInfo(codeStructure, codeApprenant, codeCible, codePiece);
        return localVarResp.getData();
    }

    /**
     * valider une pièce
     * Valider une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @return ApiResponse&lt;Piece&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce validée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Piece> validerUnePieceWithHttpInfo(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        okhttp3.Call localVarCall = validerUnePieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, null);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * valider une pièce (asynchronously)
     * Valider une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce validée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerUnePieceAsync(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback<Piece> _callback) throws ApiException {

        okhttp3.Call localVarCall = validerUnePieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
