/**
 *
 *  ESUP-Portail ESUP-MONDOSSIERWEB-PEGASE - Copyright (c) 2021 ESUP-Portail consortium
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 16.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.insgestion;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.insgestion.ApprenantEtInscriptions;
import java.io.File;
import fr.univlorraine.pegase.model.insgestion.InscriptionComplete;
import fr.univlorraine.pegase.model.insgestion.Inscriptions;
import fr.univlorraine.pegase.model.insgestion.MotifAnnulation;
import fr.univlorraine.pegase.model.insgestion.Periode;
import fr.univlorraine.pegase.model.insgestion.StatsInscriptions;
import fr.univlorraine.pegase.model.insgestion.StatutInscriptionVoeu;
import fr.univlorraine.pegase.model.insgestion.StatutPaiementVoeu;
import fr.univlorraine.pegase.model.insgestion.StatutPiecesVoeu;
import fr.univlorraine.pegase.model.insgestion.TriInscription;
import fr.univlorraine.pegase.model.insgestion.TypeEnqueteSise;
import fr.univlorraine.pegase.model.insgestion.VoeuInscription;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InscriptionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for annuleInscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Inscription n&#39;a pas pu être annulée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annuleInscriptionCall(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/{codeVoeu}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (motifAnnulation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("motifAnnulation", motifAnnulation));
        }

        if (avecRemboursement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avecRemboursement", avecRemboursement));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annuleInscriptionValidateBeforeCall(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling annuleInscription(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling annuleInscription(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling annuleInscription(Async)");
        }
        
        // verify the required parameter 'motifAnnulation' is set
        if (motifAnnulation == null) {
            throw new ApiException("Missing the required parameter 'motifAnnulation' when calling annuleInscription(Async)");
        }
        
        // verify the required parameter 'avecRemboursement' is set
        if (avecRemboursement == null) {
            throw new ApiException("Missing the required parameter 'avecRemboursement' when calling annuleInscription(Async)");
        }
        

        okhttp3.Call localVarCall = annuleInscriptionCall(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement, _callback);
        return localVarCall;

    }

    /**
     * Annule une inscription
     * Annule une inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
     * @return VoeuInscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Inscription n&#39;a pas pu être annulée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public VoeuInscription annuleInscription(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
        ApiResponse<VoeuInscription> localVarResp = annuleInscriptionWithHttpInfo(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement);
        return localVarResp.getData();
    }

    /**
     * Annule une inscription
     * Annule une inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
     * @return ApiResponse&lt;VoeuInscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Inscription n&#39;a pas pu être annulée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VoeuInscription> annuleInscriptionWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
        okhttp3.Call localVarCall = annuleInscriptionValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement, null);
        Type localVarReturnType = new TypeToken<VoeuInscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Annule une inscription (asynchronously)
     * Annule une inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Inscription n&#39;a pas pu être annulée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annuleInscriptionAsync(String codeStructure, String codeApprenant, String codeVoeu, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback<VoeuInscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = annuleInscriptionValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, motifAnnulation, avecRemboursement, _callback);
        Type localVarReturnType = new TypeToken<VoeuInscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for compterInscriptionValidees
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param idDefinitionCible L&#39;id définition de la cible (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nombre d&#39;inscriptions validées pour la cible </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compterInscriptionValideesCall(String codeStructure, String codePeriode, String idDefinitionCible, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/stats/{codeStructure}/{codePeriode}/{idDefinitionCible}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()))
            .replaceAll("\\{" + "idDefinitionCible" + "\\}", localVarApiClient.escapeString(idDefinitionCible.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compterInscriptionValideesValidateBeforeCall(String codeStructure, String codePeriode, String idDefinitionCible, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling compterInscriptionValidees(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling compterInscriptionValidees(Async)");
        }
        
        // verify the required parameter 'idDefinitionCible' is set
        if (idDefinitionCible == null) {
            throw new ApiException("Missing the required parameter 'idDefinitionCible' when calling compterInscriptionValidees(Async)");
        }
        

        okhttp3.Call localVarCall = compterInscriptionValideesCall(codeStructure, codePeriode, idDefinitionCible, _callback);
        return localVarCall;

    }

    /**
     * Compter le nombre d&#39;inscriptions validées pour l&#39;objet de formation quelque soit son chemin
     * Compter le nombre d&#39;inscription validée pour l&#39;objet de formation
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param idDefinitionCible L&#39;id définition de la cible (required)
     * @return StatsInscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nombre d&#39;inscriptions validées pour la cible </td><td>  -  </td></tr>
     </table>
     */
    public StatsInscriptions compterInscriptionValidees(String codeStructure, String codePeriode, String idDefinitionCible) throws ApiException {
        ApiResponse<StatsInscriptions> localVarResp = compterInscriptionValideesWithHttpInfo(codeStructure, codePeriode, idDefinitionCible);
        return localVarResp.getData();
    }

    /**
     * Compter le nombre d&#39;inscriptions validées pour l&#39;objet de formation quelque soit son chemin
     * Compter le nombre d&#39;inscription validée pour l&#39;objet de formation
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param idDefinitionCible L&#39;id définition de la cible (required)
     * @return ApiResponse&lt;StatsInscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nombre d&#39;inscriptions validées pour la cible </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StatsInscriptions> compterInscriptionValideesWithHttpInfo(String codeStructure, String codePeriode, String idDefinitionCible) throws ApiException {
        okhttp3.Call localVarCall = compterInscriptionValideesValidateBeforeCall(codeStructure, codePeriode, idDefinitionCible, null);
        Type localVarReturnType = new TypeToken<StatsInscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compter le nombre d&#39;inscriptions validées pour l&#39;objet de formation quelque soit son chemin (asynchronously)
     * Compter le nombre d&#39;inscription validée pour l&#39;objet de formation
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param idDefinitionCible L&#39;id définition de la cible (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nombre d&#39;inscriptions validées pour la cible </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compterInscriptionValideesAsync(String codeStructure, String codePeriode, String idDefinitionCible, final ApiCallback<StatsInscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = compterInscriptionValideesValidateBeforeCall(codeStructure, codePeriode, idDefinitionCible, _callback);
        Type localVarReturnType = new TypeToken<StatsInscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for compterInscriptionValideesAvecDescendance
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param codeChemin code chemin de la cible (séparateur \&quot;&gt;\&quot;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nombre d&#39;inscriptions validées pour la cible </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compterInscriptionValideesAvecDescendanceCall(String codeStructure, String codePeriode, String codeChemin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/stats/avec-enfants/{codeStructure}/{codePeriode}/{codeChemin}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()))
            .replaceAll("\\{" + "codeChemin" + "\\}", localVarApiClient.escapeString(codeChemin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call compterInscriptionValideesAvecDescendanceValidateBeforeCall(String codeStructure, String codePeriode, String codeChemin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling compterInscriptionValideesAvecDescendance(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling compterInscriptionValideesAvecDescendance(Async)");
        }
        
        // verify the required parameter 'codeChemin' is set
        if (codeChemin == null) {
            throw new ApiException("Missing the required parameter 'codeChemin' when calling compterInscriptionValideesAvecDescendance(Async)");
        }
        

        okhttp3.Call localVarCall = compterInscriptionValideesAvecDescendanceCall(codeStructure, codePeriode, codeChemin, _callback);
        return localVarCall;

    }

    /**
     * Compter le nombre d&#39;inscriptions validées pour la cible et sa descendance
     * Compter le nombre d&#39;inscription validée pour la cible correspondant au code métier codeCible
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param codeChemin code chemin de la cible (séparateur \&quot;&gt;\&quot;) (required)
     * @return Map&lt;String, StatsInscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nombre d&#39;inscriptions validées pour la cible </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, StatsInscriptions> compterInscriptionValideesAvecDescendance(String codeStructure, String codePeriode, String codeChemin) throws ApiException {
        ApiResponse<Map<String, StatsInscriptions>> localVarResp = compterInscriptionValideesAvecDescendanceWithHttpInfo(codeStructure, codePeriode, codeChemin);
        return localVarResp.getData();
    }

    /**
     * Compter le nombre d&#39;inscriptions validées pour la cible et sa descendance
     * Compter le nombre d&#39;inscription validée pour la cible correspondant au code métier codeCible
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param codeChemin code chemin de la cible (séparateur \&quot;&gt;\&quot;) (required)
     * @return ApiResponse&lt;Map&lt;String, StatsInscriptions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nombre d&#39;inscriptions validées pour la cible </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, StatsInscriptions>> compterInscriptionValideesAvecDescendanceWithHttpInfo(String codeStructure, String codePeriode, String codeChemin) throws ApiException {
        okhttp3.Call localVarCall = compterInscriptionValideesAvecDescendanceValidateBeforeCall(codeStructure, codePeriode, codeChemin, null);
        Type localVarReturnType = new TypeToken<Map<String, StatsInscriptions>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Compter le nombre d&#39;inscriptions validées pour la cible et sa descendance (asynchronously)
     * Compter le nombre d&#39;inscription validée pour la cible correspondant au code métier codeCible
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param codeChemin code chemin de la cible (séparateur \&quot;&gt;\&quot;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Nombre d&#39;inscriptions validées pour la cible </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call compterInscriptionValideesAvecDescendanceAsync(String codeStructure, String codePeriode, String codeChemin, final ApiCallback<Map<String, StatsInscriptions>> _callback) throws ApiException {

        okhttp3.Call localVarCall = compterInscriptionValideesAvecDescendanceValidateBeforeCall(codeStructure, codePeriode, codeChemin, _callback);
        Type localVarReturnType = new TypeToken<Map<String, StatsInscriptions>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imprimerCertificatDeScolarite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imprimerCertificatDeScolariteCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeVoeu}/certificat-de-scolarite/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imprimerCertificatDeScolariteValidateBeforeCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling imprimerCertificatDeScolarite(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling imprimerCertificatDeScolarite(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling imprimerCertificatDeScolarite(Async)");
        }
        

        okhttp3.Call localVarCall = imprimerCertificatDeScolariteCall(codeStructure, codeApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * Impression du certificat de scolarité
     * Impression du certificat de scolarité
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File imprimerCertificatDeScolarite(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        ApiResponse<File> localVarResp = imprimerCertificatDeScolariteWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * Impression du certificat de scolarité
     * Impression du certificat de scolarité
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> imprimerCertificatDeScolariteWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = imprimerCertificatDeScolariteValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Impression du certificat de scolarité (asynchronously)
     * Impression du certificat de scolarité
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imprimerCertificatDeScolariteAsync(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = imprimerCertificatDeScolariteValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireEnqueteSise
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param typeEnqueteSise Liste des types d&#39;enquêtes sise (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formulaire enquête Sise </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Formulaire enquête Sise introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireEnqueteSiseCall(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/enqueteSise/{codeStructure}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeEnqueteSise != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeEnqueteSise", typeEnqueteSise));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireEnqueteSiseValidateBeforeCall(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireEnqueteSise(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireEnqueteSise(Async)");
        }
        
        // verify the required parameter 'typeEnqueteSise' is set
        if (typeEnqueteSise == null) {
            throw new ApiException("Missing the required parameter 'typeEnqueteSise' when calling lireEnqueteSise(Async)");
        }
        

        okhttp3.Call localVarCall = lireEnqueteSiseCall(codeStructure, codePeriode, typeEnqueteSise, _callback);
        return localVarCall;

    }

    /**
     * Récupération de l&#39;enquête Sise
     * Récupération de l&#39;enquête Sise
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param typeEnqueteSise Liste des types d&#39;enquêtes sise (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formulaire enquête Sise </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Formulaire enquête Sise introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File lireEnqueteSise(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise) throws ApiException {
        ApiResponse<File> localVarResp = lireEnqueteSiseWithHttpInfo(codeStructure, codePeriode, typeEnqueteSise);
        return localVarResp.getData();
    }

    /**
     * Récupération de l&#39;enquête Sise
     * Récupération de l&#39;enquête Sise
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param typeEnqueteSise Liste des types d&#39;enquêtes sise (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formulaire enquête Sise </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Formulaire enquête Sise introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> lireEnqueteSiseWithHttpInfo(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise) throws ApiException {
        okhttp3.Call localVarCall = lireEnqueteSiseValidateBeforeCall(codeStructure, codePeriode, typeEnqueteSise, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération de l&#39;enquête Sise (asynchronously)
     * Récupération de l&#39;enquête Sise
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la Periode (required)
     * @param typeEnqueteSise Liste des types d&#39;enquêtes sise (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Formulaire enquête Sise </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Formulaire enquête Sise introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireEnqueteSiseAsync(String codeStructure, String codePeriode, TypeEnqueteSise typeEnqueteSise, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireEnqueteSiseValidateBeforeCall(codeStructure, codePeriode, typeEnqueteSise, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireEnvoiCvec
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireEnvoiCvecCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/periode/{codePeriode}/cvec/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireEnvoiCvecValidateBeforeCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireEnvoiCvec(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireEnvoiCvec(Async)");
        }
        

        okhttp3.Call localVarCall = lireEnvoiCvecCall(codeStructure, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File lireEnvoiCvec(String codeStructure, String codePeriode) throws ApiException {
        ApiResponse<File> localVarResp = lireEnvoiCvecWithHttpInfo(codeStructure, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> lireEnvoiCvecWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireEnvoiCvecValidateBeforeCall(codeStructure, codePeriode, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv (asynchronously)
     * Récupération des inscriptions validées sur la période sélectionnée dont la CVEC est saisie, au format csv
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codePeriode Code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des inscriptions validées sur la période sélectionnée dont la CVEC est saisie introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireEnvoiCvecAsync(String codeStructure, String codePeriode, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireEnvoiCvecValidateBeforeCall(codeStructure, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireInscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/{codeVoeu}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireInscriptionValidateBeforeCall(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireInscription(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling lireInscription(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling lireInscription(Async)");
        }
        

        okhttp3.Call localVarCall = lireInscriptionCall(codeStructure, codeApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * Chercher les données d&#39;une inscription
     * Chercher les données d&#39;une inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @return InscriptionComplete
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public InscriptionComplete lireInscription(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        ApiResponse<InscriptionComplete> localVarResp = lireInscriptionWithHttpInfo(codeStructure, codeApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * Chercher les données d&#39;une inscription
     * Chercher les données d&#39;une inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @return ApiResponse&lt;InscriptionComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InscriptionComplete> lireInscriptionWithHttpInfo(String codeStructure, String codeApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = lireInscriptionValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<InscriptionComplete>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Chercher les données d&#39;une inscription (asynchronously)
     * Chercher les données d&#39;une inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionAsync(String codeStructure, String codeApprenant, String codeVoeu, final ApiCallback<InscriptionComplete> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireInscriptionValidateBeforeCall(codeStructure, codeApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<InscriptionComplete>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireInscriptions
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscription/{codeStructure}/{codeApprenant}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireInscriptionsValidateBeforeCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireInscriptions(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling lireInscriptions(Async)");
        }
        

        okhttp3.Call localVarCall = lireInscriptionsCall(codeStructure, codeApprenant, _callback);
        return localVarCall;

    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant
     * Récupérer le dossier complet d&#39;un apprenant  Utilisée par *Mon Dossier Web* 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @return ApprenantEtInscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApprenantEtInscriptions lireInscriptions(String codeStructure, String codeApprenant) throws ApiException {
        ApiResponse<ApprenantEtInscriptions> localVarResp = lireInscriptionsWithHttpInfo(codeStructure, codeApprenant);
        return localVarResp.getData();
    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant
     * Récupérer le dossier complet d&#39;un apprenant  Utilisée par *Mon Dossier Web* 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @return ApiResponse&lt;ApprenantEtInscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApprenantEtInscriptions> lireInscriptionsWithHttpInfo(String codeStructure, String codeApprenant) throws ApiException {
        okhttp3.Call localVarCall = lireInscriptionsValidateBeforeCall(codeStructure, codeApprenant, null);
        Type localVarReturnType = new TypeToken<ApprenantEtInscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupérer le dossier complet d&#39;un apprenant (asynchronously)
     * Récupérer le dossier complet d&#39;un apprenant  Utilisée par *Mon Dossier Web* 
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant et ses inscriptions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsAsync(String codeStructure, String codeApprenant, final ApiCallback<ApprenantEtInscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireInscriptionsValidateBeforeCall(codeStructure, codeApprenant, _callback);
        Type localVarReturnType = new TypeToken<ApprenantEtInscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param codePeriode Le code de la période de référence (required)
     * @param statutInscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscriptions de l&#39;apprenant pour une période </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou période introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeCall(String codeStructure, String codeIne, String codePeriode, String statutInscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/apprenants/{codeStructure}/ine/{codeIne}/inscriptions/{codePeriode}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeIne" + "\\}", localVarApiClient.escapeString(codeIne.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statutInscription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statutInscription", statutInscription));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeValidateBeforeCall(String codeStructure, String codeIne, String codePeriode, String statutInscription, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(Async)");
        }
        
        // verify the required parameter 'codeIne' is set
        if (codeIne == null) {
            throw new ApiException("Missing the required parameter 'codeIne' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(Async)");
        }
        

        okhttp3.Call localVarCall = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeCall(codeStructure, codeIne, codePeriode, statutInscription, _callback);
        return localVarCall;

    }

    /**
     * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param codePeriode Le code de la période de référence (required)
     * @param statutInscription  (optional)
     * @return List&lt;InscriptionComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscriptions de l&#39;apprenant pour une période </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou période introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<InscriptionComplete> lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
        ApiResponse<List<InscriptionComplete>> localVarResp = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeWithHttpInfo(codeStructure, codeIne, codePeriode, statutInscription);
        return localVarResp.getData();
    }

    /**
     * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param codePeriode Le code de la période de référence (required)
     * @param statutInscription  (optional)
     * @return ApiResponse&lt;List&lt;InscriptionComplete&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscriptions de l&#39;apprenant pour une période </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou période introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InscriptionComplete>> lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeWithHttpInfo(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
        okhttp3.Call localVarCall = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeValidateBeforeCall(codeStructure, codeIne, codePeriode, statutInscription, null);
        Type localVarReturnType = new TypeToken<List<InscriptionComplete>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre (asynchronously)
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param codePeriode Le code de la période de référence (required)
     * @param statutInscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscriptions de l&#39;apprenant pour une période </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou période introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeAsync(String codeStructure, String codeIne, String codePeriode, String statutInscription, final ApiCallback<List<InscriptionComplete>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeValidateBeforeCall(codeStructure, codeIne, codePeriode, statutInscription, _callback);
        Type localVarReturnType = new TypeToken<List<InscriptionComplete>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireRecapitulatifDroitsDifferencies
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codesPeriodes Code des périodes (required)
     * @param codeStructureBudgetaire Code de la structure budgétaire (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des droits différenciés </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des droits différenciés introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireRecapitulatifDroitsDifferenciesCall(String codeStructure, List<String> codesPeriodes, String codeStructureBudgetaire, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/droits-differencies/{codeStructure}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codesPeriodes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "codesPeriodes", codesPeriodes));
        }

        if (codeStructureBudgetaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeStructureBudgetaire", codeStructureBudgetaire));
        }

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireRecapitulatifDroitsDifferenciesValidateBeforeCall(String codeStructure, List<String> codesPeriodes, String codeStructureBudgetaire, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireRecapitulatifDroitsDifferencies(Async)");
        }
        
        // verify the required parameter 'codesPeriodes' is set
        if (codesPeriodes == null) {
            throw new ApiException("Missing the required parameter 'codesPeriodes' when calling lireRecapitulatifDroitsDifferencies(Async)");
        }
        

        okhttp3.Call localVarCall = lireRecapitulatifDroitsDifferenciesCall(codeStructure, codesPeriodes, codeStructureBudgetaire, _callback);
        return localVarCall;

    }

    /**
     * Récupération du récapitulatif des droits différenciés
     * Récupération du récapitulatif des droits différenciés
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codesPeriodes Code des périodes (required)
     * @param codeStructureBudgetaire Code de la structure budgétaire (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des droits différenciés </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des droits différenciés introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File lireRecapitulatifDroitsDifferencies(String codeStructure, List<String> codesPeriodes, String codeStructureBudgetaire) throws ApiException {
        ApiResponse<File> localVarResp = lireRecapitulatifDroitsDifferenciesWithHttpInfo(codeStructure, codesPeriodes, codeStructureBudgetaire);
        return localVarResp.getData();
    }

    /**
     * Récupération du récapitulatif des droits différenciés
     * Récupération du récapitulatif des droits différenciés
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codesPeriodes Code des périodes (required)
     * @param codeStructureBudgetaire Code de la structure budgétaire (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des droits différenciés </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des droits différenciés introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> lireRecapitulatifDroitsDifferenciesWithHttpInfo(String codeStructure, List<String> codesPeriodes, String codeStructureBudgetaire) throws ApiException {
        okhttp3.Call localVarCall = lireRecapitulatifDroitsDifferenciesValidateBeforeCall(codeStructure, codesPeriodes, codeStructureBudgetaire, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération du récapitulatif des droits différenciés (asynchronously)
     * Récupération du récapitulatif des droits différenciés
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codesPeriodes Code des périodes (required)
     * @param codeStructureBudgetaire Code de la structure budgétaire (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Récapitulatif des droits différenciés </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Récapitulatif des droits différenciés introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireRecapitulatifDroitsDifferenciesAsync(String codeStructure, List<String> codesPeriodes, String codeStructureBudgetaire, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireRecapitulatifDroitsDifferenciesValidateBeforeCall(codeStructure, codesPeriodes, codeStructureBudgetaire, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerInscriptionsValidees
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param statutsInscription liste des statusInscription à filtrer (optional)
     * @param statutsPieces liste des statusPiece à filtrer (optional)
     * @param statutsPaiement liste des statutPaiement à filtrer (optional)
     * @param tri liste des tri (optional)
     * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE, numéro apprenant, numéro candidat). (optional)
     * @param periode Periode (optional)
     * @param objetMaquette Correspond à la dernière particule du chemin de la cible (optional)
     * @param nomOuPrenom valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param codeApprenant valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param ine valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param limit limit nombre des inscriptions à récupérer (utiliser la valeur 0 pour ne pas avoir de limitation). (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions validées </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerInscriptionsValideesCall(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche, String periode, String objetMaquette, String nomOuPrenom, String codeApprenant, String ine, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statutsInscription != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statutsInscription", statutsInscription));
        }

        if (statutsPieces != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statutsPieces", statutsPieces));
        }

        if (statutsPaiement != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "statutsPaiement", statutsPaiement));
        }

        if (tri != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tri", tri));
        }

        if (recherche != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recherche", recherche));
        }

        if (periode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periode", periode));
        }

        if (objetMaquette != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("objetMaquette", objetMaquette));
        }

        if (nomOuPrenom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nomOuPrenom", nomOuPrenom));
        }

        if (codeApprenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeApprenant", codeApprenant));
        }

        if (ine != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ine", ine));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerInscriptionsValideesValidateBeforeCall(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche, String periode, String objetMaquette, String nomOuPrenom, String codeApprenant, String ine, Integer limit, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerInscriptionsValidees(Async)");
        }
        

        okhttp3.Call localVarCall = listerInscriptionsValideesCall(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, recherche, periode, objetMaquette, nomOuPrenom, codeApprenant, ine, limit, _callback);
        return localVarCall;

    }

    /**
     * Liste des inscriptions validées
     * Liste des inscriptions validées
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param statutsInscription liste des statusInscription à filtrer (optional)
     * @param statutsPieces liste des statusPiece à filtrer (optional)
     * @param statutsPaiement liste des statutPaiement à filtrer (optional)
     * @param tri liste des tri (optional)
     * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE, numéro apprenant, numéro candidat). (optional)
     * @param periode Periode (optional)
     * @param objetMaquette Correspond à la dernière particule du chemin de la cible (optional)
     * @param nomOuPrenom valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param codeApprenant valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param ine valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param limit limit nombre des inscriptions à récupérer (utiliser la valeur 0 pour ne pas avoir de limitation). (optional, default to 100)
     * @return Inscriptions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions validées </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public Inscriptions listerInscriptionsValidees(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche, String periode, String objetMaquette, String nomOuPrenom, String codeApprenant, String ine, Integer limit) throws ApiException {
        ApiResponse<Inscriptions> localVarResp = listerInscriptionsValideesWithHttpInfo(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, recherche, periode, objetMaquette, nomOuPrenom, codeApprenant, ine, limit);
        return localVarResp.getData();
    }

    /**
     * Liste des inscriptions validées
     * Liste des inscriptions validées
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param statutsInscription liste des statusInscription à filtrer (optional)
     * @param statutsPieces liste des statusPiece à filtrer (optional)
     * @param statutsPaiement liste des statutPaiement à filtrer (optional)
     * @param tri liste des tri (optional)
     * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE, numéro apprenant, numéro candidat). (optional)
     * @param periode Periode (optional)
     * @param objetMaquette Correspond à la dernière particule du chemin de la cible (optional)
     * @param nomOuPrenom valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param codeApprenant valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param ine valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param limit limit nombre des inscriptions à récupérer (utiliser la valeur 0 pour ne pas avoir de limitation). (optional, default to 100)
     * @return ApiResponse&lt;Inscriptions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions validées </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Inscriptions> listerInscriptionsValideesWithHttpInfo(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche, String periode, String objetMaquette, String nomOuPrenom, String codeApprenant, String ine, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = listerInscriptionsValideesValidateBeforeCall(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, recherche, periode, objetMaquette, nomOuPrenom, codeApprenant, ine, limit, null);
        Type localVarReturnType = new TypeToken<Inscriptions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des inscriptions validées (asynchronously)
     * Liste des inscriptions validées
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param statutsInscription liste des statusInscription à filtrer (optional)
     * @param statutsPieces liste des statusPiece à filtrer (optional)
     * @param statutsPaiement liste des statutPaiement à filtrer (optional)
     * @param tri liste des tri (optional)
     * @param recherche Recherche en texte libre pour filtrer les réponses sur les champs (nom, prénom, INE, numéro apprenant, numéro candidat). (optional)
     * @param periode Periode (optional)
     * @param objetMaquette Correspond à la dernière particule du chemin de la cible (optional)
     * @param nomOuPrenom valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param codeApprenant valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param ine valeur correspondant au nom ou au prénom de l&#39;apprenant (optional)
     * @param limit limit nombre des inscriptions à récupérer (utiliser la valeur 0 pour ne pas avoir de limitation). (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions validées </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerInscriptionsValideesAsync(String codeStructure, List<StatutInscriptionVoeu> statutsInscription, List<StatutPiecesVoeu> statutsPieces, List<StatutPaiementVoeu> statutsPaiement, List<TriInscription> tri, String recherche, String periode, String objetMaquette, String nomOuPrenom, String codeApprenant, String ine, Integer limit, final ApiCallback<Inscriptions> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerInscriptionsValideesValidateBeforeCall(codeStructure, statutsInscription, statutsPieces, statutsPaiement, tri, recherche, periode, objetMaquette, nomOuPrenom, codeApprenant, ine, limit, _callback);
        Type localVarReturnType = new TypeToken<Inscriptions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerPeriodes
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des périodes récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerPeriodesCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/periodes/{codeStructure}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerPeriodesValidateBeforeCall(String codeStructure, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerPeriodes(Async)");
        }
        

        okhttp3.Call localVarCall = listerPeriodesCall(codeStructure, _callback);
        return localVarCall;

    }

    /**
     * Lire les périodes pour un établissement
     * Lire les périodes pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @return List&lt;Periode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des périodes récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<Periode> listerPeriodes(String codeStructure) throws ApiException {
        ApiResponse<List<Periode>> localVarResp = listerPeriodesWithHttpInfo(codeStructure);
        return localVarResp.getData();
    }

    /**
     * Lire les périodes pour un établissement
     * Lire les périodes pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @return ApiResponse&lt;List&lt;Periode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des périodes récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Periode>> listerPeriodesWithHttpInfo(String codeStructure) throws ApiException {
        okhttp3.Call localVarCall = listerPeriodesValidateBeforeCall(codeStructure, null);
        Type localVarReturnType = new TypeToken<List<Periode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lire les périodes pour un établissement (asynchronously)
     * Lire les périodes pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des périodes récupérée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerPeriodesAsync(String codeStructure, final ApiCallback<List<Periode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerPeriodesValidateBeforeCall(codeStructure, _callback);
        Type localVarReturnType = new TypeToken<List<Periode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
