/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 20.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.insgestion;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.reflect.TypeToken;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.model.insgestion.Apprenant;
import fr.univlorraine.pegase.model.insgestion.InscriptionComplete;
import fr.univlorraine.pegase.model.insgestion.Pageable;
import fr.univlorraine.pegase.model.insgestion.PagedApprenant;

public class ApprenantsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApprenantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApprenantsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for lireApprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireApprenantCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/apprenants/{codeStructure}/{codeApprenant}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireApprenantValidateBeforeCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireApprenant(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling lireApprenant(Async)");
        }
        

        okhttp3.Call localVarCall = lireApprenantCall(codeStructure, codeApprenant, _callback);
        return localVarCall;

    }

    /**
     * Chercher les données d&#39;un apprenant
     * Chercher les données d&#39;un apprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
     * @return Apprenant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Apprenant lireApprenant(String codeStructure, String codeApprenant) throws ApiException {
        ApiResponse<Apprenant> localVarResp = lireApprenantWithHttpInfo(codeStructure, codeApprenant);
        return localVarResp.getData();
    }

    /**
     * Chercher les données d&#39;un apprenant
     * Chercher les données d&#39;un apprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
     * @return ApiResponse&lt;Apprenant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Apprenant> lireApprenantWithHttpInfo(String codeStructure, String codeApprenant) throws ApiException {
        okhttp3.Call localVarCall = lireApprenantValidateBeforeCall(codeStructure, codeApprenant, null);
        Type localVarReturnType = new TypeToken<Apprenant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Chercher les données d&#39;un apprenant (asynchronously)
     * Chercher les données d&#39;un apprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireApprenantAsync(String codeStructure, String codeApprenant, final ApiCallback<Apprenant> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireApprenantValidateBeforeCall(codeStructure, codeApprenant, _callback);
        Type localVarReturnType = new TypeToken<Apprenant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireApprenantParIne
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireApprenantParIneCall(String codeStructure, String codeIne, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/apprenants/{codeStructure}/ine/{codeIne}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeIne" + "\\}", localVarApiClient.escapeString(codeIne.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireApprenantParIneValidateBeforeCall(String codeStructure, String codeIne, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireApprenantParIne(Async)");
        }
        
        // verify the required parameter 'codeIne' is set
        if (codeIne == null) {
            throw new ApiException("Missing the required parameter 'codeIne' when calling lireApprenantParIne(Async)");
        }
        

        okhttp3.Call localVarCall = lireApprenantParIneCall(codeStructure, codeIne, _callback);
        return localVarCall;

    }

    /**
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @return Apprenant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Apprenant lireApprenantParIne(String codeStructure, String codeIne) throws ApiException {
        ApiResponse<Apprenant> localVarResp = lireApprenantParIneWithHttpInfo(codeStructure, codeIne);
        return localVarResp.getData();
    }

    /**
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @return ApiResponse&lt;Apprenant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Apprenant> lireApprenantParIneWithHttpInfo(String codeStructure, String codeIne) throws ApiException {
        okhttp3.Call localVarCall = lireApprenantParIneValidateBeforeCall(codeStructure, codeIne, null);
        Type localVarReturnType = new TypeToken<Apprenant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE (asynchronously)
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireApprenantParIneAsync(String codeStructure, String codeIne, final ApiCallback<Apprenant> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireApprenantParIneValidateBeforeCall(codeStructure, codeIne, _callback);
        Type localVarReturnType = new TypeToken<Apprenant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param codePeriode Le code de la période de référence (required)
     * @param statutInscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscriptions de l&#39;apprenant pour une période </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou période introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeCall(String codeStructure, String codeIne, String codePeriode, String statutInscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/apprenants/{codeStructure}/ine/{codeIne}/inscriptions/{codePeriode}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeIne" + "\\}", localVarApiClient.escapeString(codeIne.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (statutInscription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statutInscription", statutInscription));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeValidateBeforeCall(String codeStructure, String codeIne, String codePeriode, String statutInscription, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(Async)");
        }
        
        // verify the required parameter 'codeIne' is set
        if (codeIne == null) {
            throw new ApiException("Missing the required parameter 'codeIne' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(Async)");
        }
        

        okhttp3.Call localVarCall = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeCall(codeStructure, codeIne, codePeriode, statutInscription, _callback);
        return localVarCall;

    }

    /**
     * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param codePeriode Le code de la période de référence (required)
     * @param statutInscription  (optional)
     * @return List&lt;InscriptionComplete&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscriptions de l&#39;apprenant pour une période </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou période introuvable </td><td>  -  </td></tr>
     </table>
     */
    public List<InscriptionComplete> lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriode(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
        ApiResponse<List<InscriptionComplete>> localVarResp = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeWithHttpInfo(codeStructure, codeIne, codePeriode, statutInscription);
        return localVarResp.getData();
    }

    /**
     * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param codePeriode Le code de la période de référence (required)
     * @param statutInscription  (optional)
     * @return ApiResponse&lt;List&lt;InscriptionComplete&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscriptions de l&#39;apprenant pour une période </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou période introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InscriptionComplete>> lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeWithHttpInfo(String codeStructure, String codeIne, String codePeriode, String statutInscription) throws ApiException {
        okhttp3.Call localVarCall = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeValidateBeforeCall(codeStructure, codeIne, codePeriode, statutInscription, null);
        Type localVarReturnType = new TypeToken<List<InscriptionComplete>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Chercher les inscriptions d&#39;un apprenant à partir d&#39;un numéro INE et d&#39;une période de mise en œuvre (asynchronously)
     * Chercher les données d&#39;un apprenant à partir d&#39;un numéro INE
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeIne Le code INE de l&#39;apprenant (required)
     * @param codePeriode Le code de la période de référence (required)
     * @param statutInscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscriptions de l&#39;apprenant pour une période </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou période introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeAsync(String codeStructure, String codeIne, String codePeriode, String statutInscription, final ApiCallback<List<InscriptionComplete>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireInscriptionsApprenantParInePourUneAnneeUniversitaireOuUnePeriodeValidateBeforeCall(codeStructure, codeIne, codePeriode, statutInscription, _callback);
        Type localVarReturnType = new TypeToken<List<InscriptionComplete>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerApprenants
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (optional)
     * @param codeIne Le code INE de l&#39;apprenant (optional)
     * @param nomDeFamille nom de famille de l&#39;apprenant (optional)
     * @param prenom Le prénom de l&#39;apprenant (optional)
     * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page (défaut 50)) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste filtrée des apprenants </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerApprenantsCall(String codeStructure, String codeApprenant, String codeIne, String nomDeFamille, String prenom, Pageable pageable, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/apprenants/{codeStructure}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (codeApprenant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeApprenant", codeApprenant));
        }

        if (codeIne != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("codeIne", codeIne));
        }

        if (nomDeFamille != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nomDeFamille", nomDeFamille));
        }

        if (prenom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prenom", prenom));
        }

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerApprenantsValidateBeforeCall(String codeStructure, String codeApprenant, String codeIne, String nomDeFamille, String prenom, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerApprenants(Async)");
        }
        

        okhttp3.Call localVarCall = listerApprenantsCall(codeStructure, codeApprenant, codeIne, nomDeFamille, prenom, pageable, _callback);
        return localVarCall;

    }

    /**
     * Liste des apprenants filtrée par le critères de recherche
     * Liste des apprenants filtrée par le critères de recherche
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (optional)
     * @param codeIne Le code INE de l&#39;apprenant (optional)
     * @param nomDeFamille nom de famille de l&#39;apprenant (optional)
     * @param prenom Le prénom de l&#39;apprenant (optional)
     * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page (défaut 50)) (optional)
     * @return PagedApprenant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste filtrée des apprenants </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public PagedApprenant listerApprenants(String codeStructure, String codeApprenant, String codeIne, String nomDeFamille, String prenom, Pageable pageable) throws ApiException {
        ApiResponse<PagedApprenant> localVarResp = listerApprenantsWithHttpInfo(codeStructure, codeApprenant, codeIne, nomDeFamille, prenom, pageable);
        return localVarResp.getData();
    }

    /**
     * Liste des apprenants filtrée par le critères de recherche
     * Liste des apprenants filtrée par le critères de recherche
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (optional)
     * @param codeIne Le code INE de l&#39;apprenant (optional)
     * @param nomDeFamille nom de famille de l&#39;apprenant (optional)
     * @param prenom Le prénom de l&#39;apprenant (optional)
     * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page (défaut 50)) (optional)
     * @return ApiResponse&lt;PagedApprenant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste filtrée des apprenants </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedApprenant> listerApprenantsWithHttpInfo(String codeStructure, String codeApprenant, String codeIne, String nomDeFamille, String prenom, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listerApprenantsValidateBeforeCall(codeStructure, codeApprenant, codeIne, nomDeFamille, prenom, pageable, null);
        Type localVarReturnType = new TypeToken<PagedApprenant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des apprenants filtrée par le critères de recherche (asynchronously)
     * Liste des apprenants filtrée par le critères de recherche
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (optional)
     * @param codeIne Le code INE de l&#39;apprenant (optional)
     * @param nomDeFamille nom de famille de l&#39;apprenant (optional)
     * @param prenom Le prénom de l&#39;apprenant (optional)
     * @param pageable L&#39;objet de pagination (page : le numéro de la page (défaut 0), taille : le nombre d&#39;élément par page (défaut 50)) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste filtrée des apprenants </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerApprenantsAsync(String codeStructure, String codeApprenant, String codeIne, String nomDeFamille, String prenom, Pageable pageable, final ApiCallback<PagedApprenant> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerApprenantsValidateBeforeCall(codeStructure, codeApprenant, codeIne, nomDeFamille, prenom, pageable, _callback);
        Type localVarReturnType = new TypeToken<PagedApprenant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifierAutorisationApprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verifie l&#39;autorisation de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifierAutorisationApprenantCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/apprenants/verifier/{codeStructure}/{codeApprenant}/"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifierAutorisationApprenantValidateBeforeCall(String codeStructure, String codeApprenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling verifierAutorisationApprenant(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling verifierAutorisationApprenant(Async)");
        }
        

        okhttp3.Call localVarCall = verifierAutorisationApprenantCall(codeStructure, codeApprenant, _callback);
        return localVarCall;

    }

    /**
     * Verifie les droits de l&#39;apprenant
     * Verifie les droits de l&#39;apprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verifie l&#39;autorisation de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Boolean verifierAutorisationApprenant(String codeStructure, String codeApprenant) throws ApiException {
        ApiResponse<Boolean> localVarResp = verifierAutorisationApprenantWithHttpInfo(codeStructure, codeApprenant);
        return localVarResp.getData();
    }

    /**
     * Verifie les droits de l&#39;apprenant
     * Verifie les droits de l&#39;apprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verifie l&#39;autorisation de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> verifierAutorisationApprenantWithHttpInfo(String codeStructure, String codeApprenant) throws ApiException {
        okhttp3.Call localVarCall = verifierAutorisationApprenantValidateBeforeCall(codeStructure, codeApprenant, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verifie les droits de l&#39;apprenant (asynchronously)
     * Verifie les droits de l&#39;apprenant
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code Pegase de l&#39;apprenant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Verifie l&#39;autorisation de l&#39;apprenant </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifierAutorisationApprenantAsync(String codeStructure, String codeApprenant, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifierAutorisationApprenantValidateBeforeCall(codeStructure, codeApprenant, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
