/*
 * Swagger Gestion - INS
 * Il s'agit de l'API de gestion - INS.
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.insgestion;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import fr.univlorraine.pegase.model.insgestion.Piece;
import fr.univlorraine.pegase.model.insgestion.Voeu;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PicesApi {
    private ApiClient localVarApiClient;

    public PicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for annulerPiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce réinitialisée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce à annuler introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annulerPieceCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/{codePiece}/annuler"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annulerPieceValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling annulerPiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling annulerPiece(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling annulerPiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling annulerPiece(Async)");
        }
        

        okhttp3.Call localVarCall = annulerPieceCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        return localVarCall;

    }

    /**
     * annuler une pièce
     * annuler une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @return Piece
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce réinitialisée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce à annuler introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Piece annulerPiece(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        ApiResponse<Piece> localVarResp = annulerPieceWithHttpInfo(codeStructure, codeApprenant, codeCible, codePiece);
        return localVarResp.getData();
    }

    /**
     * annuler une pièce
     * annuler une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @return ApiResponse&lt;Piece&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce réinitialisée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce à annuler introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Piece> annulerPieceWithHttpInfo(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        okhttp3.Call localVarCall = annulerPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, null);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * annuler une pièce (asynchronously)
     * annuler une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce réinitialisée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce à annuler introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annulerPieceAsync(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback<Piece> _callback) throws ApiException {

        okhttp3.Call localVarCall = annulerPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contenuPiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contenuPieceCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/{codePiece}/contenu"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "image/png", "image/jpg"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contenuPieceValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling contenuPiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling contenuPiece(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling contenuPiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling contenuPiece(Async)");
        }
        

        okhttp3.Call localVarCall = contenuPieceCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        return localVarCall;

    }

    /**
     * contenu de la pièce
     * contenu de la pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File contenuPiece(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        ApiResponse<File> localVarResp = contenuPieceWithHttpInfo(codeStructure, codeApprenant, codeCible, codePiece);
        return localVarResp.getData();
    }

    /**
     * contenu de la pièce
     * contenu de la pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> contenuPieceWithHttpInfo(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        okhttp3.Call localVarCall = contenuPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * contenu de la pièce (asynchronously)
     * contenu de la pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la demande de pièce (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> fichier </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contenuPieceAsync(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = contenuPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rejeterPiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param body le motif du rejet de la pièce (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> pièce rejetée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejeterPieceCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/{codePiece}/rejeter"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rejeterPieceValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling rejeterPiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling rejeterPiece(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling rejeterPiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling rejeterPiece(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rejeterPiece(Async)");
        }
        

        okhttp3.Call localVarCall = rejeterPieceCall(codeStructure, codeApprenant, codeCible, codePiece, body, _callback);
        return localVarCall;

    }

    /**
     * rejeter une pièce
     * rejeter une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param body le motif du rejet de la pièce (required)
     * @return Piece
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> pièce rejetée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Piece rejeterPiece(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body) throws ApiException {
        ApiResponse<Piece> localVarResp = rejeterPieceWithHttpInfo(codeStructure, codeApprenant, codeCible, codePiece, body);
        return localVarResp.getData();
    }

    /**
     * rejeter une pièce
     * rejeter une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param body le motif du rejet de la pièce (required)
     * @return ApiResponse&lt;Piece&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> pièce rejetée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Piece> rejeterPieceWithHttpInfo(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body) throws ApiException {
        okhttp3.Call localVarCall = rejeterPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, body, null);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * rejeter une pièce (asynchronously)
     * rejeter une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param body le motif du rejet de la pièce (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> pièce rejetée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rejeterPieceAsync(String codeStructure, String codeApprenant, String codeCible, String codePiece, String body, final ApiCallback<Piece> _callback) throws ApiException {

        okhttp3.Call localVarCall = rejeterPieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, body, _callback);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validerLesPieces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des pièces validées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Listes des pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerLesPiecesCall(String codeStructure, String codeApprenant, String codeCible, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/validerPieces"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validerLesPiecesValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling validerLesPieces(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling validerLesPieces(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling validerLesPieces(Async)");
        }
        

        okhttp3.Call localVarCall = validerLesPiecesCall(codeStructure, codeApprenant, codeCible, _callback);
        return localVarCall;

    }

    /**
     * valider les pièces
     * Valider les pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @return Voeu
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des pièces validées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Listes des pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Voeu validerLesPieces(String codeStructure, String codeApprenant, String codeCible) throws ApiException {
        ApiResponse<Voeu> localVarResp = validerLesPiecesWithHttpInfo(codeStructure, codeApprenant, codeCible);
        return localVarResp.getData();
    }

    /**
     * valider les pièces
     * Valider les pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @return ApiResponse&lt;Voeu&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des pièces validées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Listes des pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Voeu> validerLesPiecesWithHttpInfo(String codeStructure, String codeApprenant, String codeCible) throws ApiException {
        okhttp3.Call localVarCall = validerLesPiecesValidateBeforeCall(codeStructure, codeApprenant, codeCible, null);
        Type localVarReturnType = new TypeToken<Voeu>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * valider les pièces (asynchronously)
     * Valider les pièces
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> liste des pièces validées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Listes des pièces introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerLesPiecesAsync(String codeStructure, String codeApprenant, String codeCible, final ApiCallback<Voeu> _callback) throws ApiException {

        okhttp3.Call localVarCall = validerLesPiecesValidateBeforeCall(codeStructure, codeApprenant, codeCible, _callback);
        Type localVarReturnType = new TypeToken<Voeu>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validerUnePiece
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce validée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerUnePieceCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/inscriptions/{codeStructure}/{codeApprenant}/{codeCible}/{codePiece}/valider"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeCible" + "\\}", localVarApiClient.escapeString(codeCible.toString()))
            .replaceAll("\\{" + "codePiece" + "\\}", localVarApiClient.escapeString(codePiece.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validerUnePieceValidateBeforeCall(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling validerUnePiece(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling validerUnePiece(Async)");
        }
        
        // verify the required parameter 'codeCible' is set
        if (codeCible == null) {
            throw new ApiException("Missing the required parameter 'codeCible' when calling validerUnePiece(Async)");
        }
        
        // verify the required parameter 'codePiece' is set
        if (codePiece == null) {
            throw new ApiException("Missing the required parameter 'codePiece' when calling validerUnePiece(Async)");
        }
        

        okhttp3.Call localVarCall = validerUnePieceCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        return localVarCall;

    }

    /**
     * valider une pièce
     * Valider une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @return Piece
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce validée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Piece validerUnePiece(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        ApiResponse<Piece> localVarResp = validerUnePieceWithHttpInfo(codeStructure, codeApprenant, codeCible, codePiece);
        return localVarResp.getData();
    }

    /**
     * valider une pièce
     * Valider une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @return ApiResponse&lt;Piece&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce validée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Piece> validerUnePieceWithHttpInfo(String codeStructure, String codeApprenant, String codeCible, String codePiece) throws ApiException {
        okhttp3.Call localVarCall = validerUnePieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, null);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * valider une pièce (asynchronously)
     * Valider une pièce
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param codeApprenant Le code apprenant (required)
     * @param codeCible Le code cible (required)
     * @param codePiece Le code de la pièce (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> une pièce validée </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> pièce introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerUnePieceAsync(String codeStructure, String codeApprenant, String codeCible, String codePiece, final ApiCallback<Piece> _callback) throws ApiException {

        okhttp3.Call localVarCall = validerUnePieceValidateBeforeCall(codeStructure, codeApprenant, codeCible, codePiece, _callback);
        Type localVarReturnType = new TypeToken<Piece>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
