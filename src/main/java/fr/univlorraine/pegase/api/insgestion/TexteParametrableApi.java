/**
 *
 *  ESUP-Portail ESUP-MONDOSSIERWEB-PEGASE - Copyright (c) 2021 ESUP-Portail consortium
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/*
 * INS Gestion V5
 * Il s'agit de l'API v5 de gestion - INS  __Apprenant :__ une personne qui a au moins une inscription validée dans Pegase.  __Inscription :__ se définit par une cible sur une période de mise en œuvre pour un apprenant. Une inscription peut prendre deux états : soit validée, soit annulée.  __Actualisation :__ permet de modifier les données liées à l’apprenant ou à l’inscription alors que la piste a déjà été payée ou validée.   __Gestion des erreurs :__   __200, 201 :__ opération effectuée   __400 :__ erreur de données sur les formats   __403 :__ accès refusé   __404 :__ contenu introuvable   __409 :__ donnée déjà existante   __500 :__ erreur serveur  # Changement majeur/cassant par rapport à V4  1. Suppression de `Inscription.noCandidat`.  1. Ajout de `VoeuBase.noCandidat` et `InscriptionComplete.noCandidat`.  1. Ajout de `VoeuBase.choisi`. 
 *
 * The version of the OpenAPI document: 16.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.insgestion;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.insgestion.TexteParametrable;
import fr.univlorraine.pegase.model.insgestion.TypeTexte;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TexteParametrableApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TexteParametrableApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TexteParametrableApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for modifierTexteParametrable
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param typeTexte Le type de texte saisissable (required)
     * @param texteParametrable Le contenu HTML du texte saisie (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Texte paramétrable enregistré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Texte type introuvable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données non valides </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierTexteParametrableCall(String codeStructure, TypeTexte typeTexte, TexteParametrable texteParametrable, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = texteParametrable;

        // create path and map variables
        String localVarPath = "/gestion/texte-parametrable/{codeStructure}/{typeTexte}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "typeTexte" + "\\}", localVarApiClient.escapeString(typeTexte.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modifierTexteParametrableValidateBeforeCall(String codeStructure, TypeTexte typeTexte, TexteParametrable texteParametrable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling modifierTexteParametrable(Async)");
        }
        
        // verify the required parameter 'typeTexte' is set
        if (typeTexte == null) {
            throw new ApiException("Missing the required parameter 'typeTexte' when calling modifierTexteParametrable(Async)");
        }
        
        // verify the required parameter 'texteParametrable' is set
        if (texteParametrable == null) {
            throw new ApiException("Missing the required parameter 'texteParametrable' when calling modifierTexteParametrable(Async)");
        }
        

        okhttp3.Call localVarCall = modifierTexteParametrableCall(codeStructure, typeTexte, texteParametrable, _callback);
        return localVarCall;

    }

    /**
     * Mise à jour ou ajout d&#39;un texte paramétrable saisie
     * Mise à jour ou ajout d&#39;un texte paramétrable saisie
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param typeTexte Le type de texte saisissable (required)
     * @param texteParametrable Le contenu HTML du texte saisie (required)
     * @return TexteParametrable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Texte paramétrable enregistré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Texte type introuvable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données non valides </td><td>  -  </td></tr>
     </table>
     */
    public TexteParametrable modifierTexteParametrable(String codeStructure, TypeTexte typeTexte, TexteParametrable texteParametrable) throws ApiException {
        ApiResponse<TexteParametrable> localVarResp = modifierTexteParametrableWithHttpInfo(codeStructure, typeTexte, texteParametrable);
        return localVarResp.getData();
    }

    /**
     * Mise à jour ou ajout d&#39;un texte paramétrable saisie
     * Mise à jour ou ajout d&#39;un texte paramétrable saisie
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param typeTexte Le type de texte saisissable (required)
     * @param texteParametrable Le contenu HTML du texte saisie (required)
     * @return ApiResponse&lt;TexteParametrable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Texte paramétrable enregistré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Texte type introuvable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données non valides </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TexteParametrable> modifierTexteParametrableWithHttpInfo(String codeStructure, TypeTexte typeTexte, TexteParametrable texteParametrable) throws ApiException {
        okhttp3.Call localVarCall = modifierTexteParametrableValidateBeforeCall(codeStructure, typeTexte, texteParametrable, null);
        Type localVarReturnType = new TypeToken<TexteParametrable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mise à jour ou ajout d&#39;un texte paramétrable saisie (asynchronously)
     * Mise à jour ou ajout d&#39;un texte paramétrable saisie
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param typeTexte Le type de texte saisissable (required)
     * @param texteParametrable Le contenu HTML du texte saisie (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Texte paramétrable enregistré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Texte type introuvable </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Données non valides </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modifierTexteParametrableAsync(String codeStructure, TypeTexte typeTexte, TexteParametrable texteParametrable, final ApiCallback<TexteParametrable> _callback) throws ApiException {

        okhttp3.Call localVarCall = modifierTexteParametrableValidateBeforeCall(codeStructure, typeTexte, texteParametrable, _callback);
        Type localVarReturnType = new TypeToken<TexteParametrable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recupererTexteParametrable
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param typeTexte Le type de texte saisissable (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Texte paramétrable récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Texte introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererTexteParametrableCall(String codeStructure, TypeTexte typeTexte, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gestion/texte-parametrable/{codeStructure}/{typeTexte}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "typeTexte" + "\\}", localVarApiClient.escapeString(typeTexte.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recupererTexteParametrableValidateBeforeCall(String codeStructure, TypeTexte typeTexte, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling recupererTexteParametrable(Async)");
        }
        
        // verify the required parameter 'typeTexte' is set
        if (typeTexte == null) {
            throw new ApiException("Missing the required parameter 'typeTexte' when calling recupererTexteParametrable(Async)");
        }
        

        okhttp3.Call localVarCall = recupererTexteParametrableCall(codeStructure, typeTexte, _callback);
        return localVarCall;

    }

    /**
     * Récupération du texte paramétrable pour un type donnée et pour un établissement
     * Récupération du texte paramétrable pour un type donnée et pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param typeTexte Le type de texte saisissable (required)
     * @return TexteParametrable
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Texte paramétrable récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Texte introuvable </td><td>  -  </td></tr>
     </table>
     */
    public TexteParametrable recupererTexteParametrable(String codeStructure, TypeTexte typeTexte) throws ApiException {
        ApiResponse<TexteParametrable> localVarResp = recupererTexteParametrableWithHttpInfo(codeStructure, typeTexte);
        return localVarResp.getData();
    }

    /**
     * Récupération du texte paramétrable pour un type donnée et pour un établissement
     * Récupération du texte paramétrable pour un type donnée et pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param typeTexte Le type de texte saisissable (required)
     * @return ApiResponse&lt;TexteParametrable&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Texte paramétrable récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Texte introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TexteParametrable> recupererTexteParametrableWithHttpInfo(String codeStructure, TypeTexte typeTexte) throws ApiException {
        okhttp3.Call localVarCall = recupererTexteParametrableValidateBeforeCall(codeStructure, typeTexte, null);
        Type localVarReturnType = new TypeToken<TexteParametrable>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupération du texte paramétrable pour un type donnée et pour un établissement (asynchronously)
     * Récupération du texte paramétrable pour un type donnée et pour un établissement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param typeTexte Le type de texte saisissable (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Texte paramétrable récupéré </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Texte introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererTexteParametrableAsync(String codeStructure, TypeTexte typeTexte, final ApiCallback<TexteParametrable> _callback) throws ApiException {

        okhttp3.Call localVarCall = recupererTexteParametrableValidateBeforeCall(codeStructure, typeTexte, _callback);
        Type localVarReturnType = new TypeToken<TexteParametrable>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
