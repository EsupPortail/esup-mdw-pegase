/**
 *
 *  ESUP-Portail ESUP-MONDOSSIERWEB-PEGASE - Copyright (c) 2021 ESUP-Portail consortium
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/*
 * COC Publication v1 - Contrôle du cursus - Bloc «publication»
 * Liste l'ensemble des services et des opérations disponible pour la publication de notes et des résultats à partir des données du module COC (Contrôle du cursus)  ### Authentification/autorisation obligatoire  Pour tout appel à une opération vous devez être authentifié/authorisé (voir le paragraphe [Authentification](#section/Authentication) pour les détails).  ### Type de données  Sauf indications spécifiques données au niveau de l'opération, les types de données utilisés dans cette API sont les suivants :  * string - Chaîne de caractères encodée en UTF8 (ex : `Une chaîne de caractère`)    * Dans le cas des descripteurs de type `codeXxx`, seuls les caractères de A à Z, de 0 à 9 et le tiret(-) sont autorisés    * Dans le cas des descripteurs de type montant ou nombre avec une partie décimale, seuls les caractères de 0 à 9 et le point(.) sont autorisés (ex : `12525.99`)  * string($date) - Une date sous la forme d'une chaîne de caractères (ex : `2020-02-25`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))  * string($date-time) - Une date et heure avec fuseau horaire sous la forme d'une chaîne de caractères (ex : `2020-02-25T18:36:22+02:00`, norme [ISO-8601](https://fr.wikipedia.org/wiki/ISO_8601))  * integer($int64) - Un entier sur 64 bits (de -9 223 372 036 854 775 808 à 9 223 372 036 854 775 807) (ex : `2542`)  * integer($int32) - Un entier sur 32 bits (de –2 147 483 648 à 2 147 483 647) (ex : `2542`)  * boolean - Un booléen représenté par `true` ou `false`  ### Code retour   * 200 - Ok : L'opération s'est déroulée avec succès  * 201 - Created : L'opération a aboutie à la création d'une ressource  * 400 - Bad request :    * Un ou des paramètres d'entrées sont erronées    * Une erreur fonctionnelle s'est produite  * 404 - Not Found : La ressource demandée n'est pas trouvé    * Remarque : Dans le cas des opérations retournant une liste, on recevra un code 200 avec en résultat une liste vide  * 500 - Internal server error : Erreur inattendue et non gérés 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.coc;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.coc.Chemin;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotesEtResultatsPubliablesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotesEtResultatsPubliablesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotesEtResultatsPubliablesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listerCursusPubliableApprenant
     * @param codeStructureEtablissement Le code structure de l&#39;établissement (required)
     * @param codePeriode Le code de la période de mise en œuvre (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeChemin Le code chemin \&quot;point de départ\&quot;  Un code chemin est une liste de code séparé par un &#39;&gt;&#39; (supérieur) en commençant par le code de la formation jusqu&#39;à l&#39;objet de formation le plus fin.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le cursus de l&#39;apprenant avec ses notes et résultats publiables </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerCursusPubliableApprenantCall(String codeStructureEtablissement, String codePeriode, String codeApprenant, String codeChemin, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructureEtablissement}/periodes/{codePeriode}/apprenants/{codeApprenant}/chemins/{codeChemin}"
            .replaceAll("\\{" + "codeStructureEtablissement" + "\\}", localVarApiClient.escapeString(codeStructureEtablissement.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()))
            .replaceAll("\\{" + "codeApprenant" + "\\}", localVarApiClient.escapeString(codeApprenant.toString()))
            .replaceAll("\\{" + "codeChemin" + "\\}", localVarApiClient.escapeString(codeChemin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerCursusPubliableApprenantValidateBeforeCall(String codeStructureEtablissement, String codePeriode, String codeApprenant, String codeChemin, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructureEtablissement' is set
        if (codeStructureEtablissement == null) {
            throw new ApiException("Missing the required parameter 'codeStructureEtablissement' when calling listerCursusPubliableApprenant(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling listerCursusPubliableApprenant(Async)");
        }
        
        // verify the required parameter 'codeApprenant' is set
        if (codeApprenant == null) {
            throw new ApiException("Missing the required parameter 'codeApprenant' when calling listerCursusPubliableApprenant(Async)");
        }
        
        // verify the required parameter 'codeChemin' is set
        if (codeChemin == null) {
            throw new ApiException("Missing the required parameter 'codeChemin' when calling listerCursusPubliableApprenant(Async)");
        }
        

        okhttp3.Call localVarCall = listerCursusPubliableApprenantCall(codeStructureEtablissement, codePeriode, codeApprenant, codeChemin, _callback);
        return localVarCall;

    }

    /**
     * Lister le cursus d&#39;un apprenant avec ces notes et résultats publiables
     * La liste retournée est triée. Le chemin \&quot;point de départ\&quot; passé en paramètre (la \&quot;racine\&quot;) en premier. Ensuite viennent les chemins enfants.  Par exemple si le code chemin \&quot;point de départ\&quot; est &#x60;LIC-CHIMIE&gt;ANNEE1&#x60; :   * LIC-CHIMIE&gt;ANNEE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;UE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;GROUPEMENT1&gt;UE2   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;UE3   * …   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE2   * … 
     * @param codeStructureEtablissement Le code structure de l&#39;établissement (required)
     * @param codePeriode Le code de la période de mise en œuvre (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeChemin Le code chemin \&quot;point de départ\&quot;  Un code chemin est une liste de code séparé par un &#39;&gt;&#39; (supérieur) en commençant par le code de la formation jusqu&#39;à l&#39;objet de formation le plus fin.  (required)
     * @return List&lt;Chemin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le cursus de l&#39;apprenant avec ses notes et résultats publiables </td><td>  -  </td></tr>
     </table>
     */
    public List<Chemin> listerCursusPubliableApprenant(String codeStructureEtablissement, String codePeriode, String codeApprenant, String codeChemin) throws ApiException {
        ApiResponse<List<Chemin>> localVarResp = listerCursusPubliableApprenantWithHttpInfo(codeStructureEtablissement, codePeriode, codeApprenant, codeChemin);
        return localVarResp.getData();
    }

    /**
     * Lister le cursus d&#39;un apprenant avec ces notes et résultats publiables
     * La liste retournée est triée. Le chemin \&quot;point de départ\&quot; passé en paramètre (la \&quot;racine\&quot;) en premier. Ensuite viennent les chemins enfants.  Par exemple si le code chemin \&quot;point de départ\&quot; est &#x60;LIC-CHIMIE&gt;ANNEE1&#x60; :   * LIC-CHIMIE&gt;ANNEE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;UE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;GROUPEMENT1&gt;UE2   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;UE3   * …   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE2   * … 
     * @param codeStructureEtablissement Le code structure de l&#39;établissement (required)
     * @param codePeriode Le code de la période de mise en œuvre (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeChemin Le code chemin \&quot;point de départ\&quot;  Un code chemin est une liste de code séparé par un &#39;&gt;&#39; (supérieur) en commençant par le code de la formation jusqu&#39;à l&#39;objet de formation le plus fin.  (required)
     * @return ApiResponse&lt;List&lt;Chemin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le cursus de l&#39;apprenant avec ses notes et résultats publiables </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Chemin>> listerCursusPubliableApprenantWithHttpInfo(String codeStructureEtablissement, String codePeriode, String codeApprenant, String codeChemin) throws ApiException {
        okhttp3.Call localVarCall = listerCursusPubliableApprenantValidateBeforeCall(codeStructureEtablissement, codePeriode, codeApprenant, codeChemin, null);
        Type localVarReturnType = new TypeToken<List<Chemin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lister le cursus d&#39;un apprenant avec ces notes et résultats publiables (asynchronously)
     * La liste retournée est triée. Le chemin \&quot;point de départ\&quot; passé en paramètre (la \&quot;racine\&quot;) en premier. Ensuite viennent les chemins enfants.  Par exemple si le code chemin \&quot;point de départ\&quot; est &#x60;LIC-CHIMIE&gt;ANNEE1&#x60; :   * LIC-CHIMIE&gt;ANNEE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;UE1   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;GROUPEMENT1&gt;UE2   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE1&gt;UE3   * …   * LIC-CHIMIE&gt;ANNEE1&gt;SEMESTRE2   * … 
     * @param codeStructureEtablissement Le code structure de l&#39;établissement (required)
     * @param codePeriode Le code de la période de mise en œuvre (required)
     * @param codeApprenant Le code de l&#39;apprenant (required)
     * @param codeChemin Le code chemin \&quot;point de départ\&quot;  Un code chemin est une liste de code séparé par un &#39;&gt;&#39; (supérieur) en commençant par le code de la formation jusqu&#39;à l&#39;objet de formation le plus fin.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le cursus de l&#39;apprenant avec ses notes et résultats publiables </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerCursusPubliableApprenantAsync(String codeStructureEtablissement, String codePeriode, String codeApprenant, String codeChemin, final ApiCallback<List<Chemin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerCursusPubliableApprenantValidateBeforeCall(codeStructureEtablissement, codePeriode, codeApprenant, codeChemin, _callback);
        Type localVarReturnType = new TypeToken<List<Chemin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
