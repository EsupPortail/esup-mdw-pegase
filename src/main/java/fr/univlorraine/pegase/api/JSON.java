/*
 * IDT V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module IDT  Description service IDT  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  |
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250415115823
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;
import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static final ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();

    static {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.CategorieSocioProfessionnelle.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.CommunesNaissance.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.CreerModifierIdentiteForceRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.CreerModifierIdentiteRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.Departements.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.DonneesComplementaires.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.DonneesContact.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.Erreur.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.ErreurMessageDetails.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.Erreurs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.EtablissementsFrancais.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.EtatCivil.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.FusionnerIdentiteRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.IdentiteApprenantSimilaireSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.IdentiteApprenantSummaries.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.IdentiteApprenantSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.IdentiteDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.IdentiteImmatriculeeDetail.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.IdentiteSummaries.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.IdentiteSummary.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.Ine.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.InformationsPersonnellesRequest.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.MentionsBac.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.Pageable.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.PagedIdentiteApprenantSummaries.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.PagedIdentiteSummaries.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.Paging.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.ParcoursScolaireEtUniversitaire.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.PaysEtNationalites.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.ProfessionsEtCategoriesSocioPro.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.ProfilApprenant.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.ProfilApprenantBase.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.ProfilApprenantEdition.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.QuotitesActivite.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.SeriesBacEtEquivalent.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.SituationsFamiliales.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.SituationsMilitaires.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.SpecialitesBacGeneral.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new fr.univlorraine.pegase.model.idt.TitresAccesEnseignementSup.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.CommunesNaissance.class, new TypeSelector<fr.univlorraine.pegase.model.idt.CommunesNaissance>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.CommunesNaissance> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("COMMUNENAISSANCE", fr.univlorraine.pegase.model.idt.CommunesNaissance.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.Departements.class, new TypeSelector<fr.univlorraine.pegase.model.idt.Departements>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.Departements> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("Departements", fr.univlorraine.pegase.model.idt.Departements.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.EtablissementsFrancais.class, new TypeSelector<fr.univlorraine.pegase.model.idt.EtablissementsFrancais>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.EtablissementsFrancais> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("EtablissementsFrancais", fr.univlorraine.pegase.model.idt.EtablissementsFrancais.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.MentionsBac.class, new TypeSelector<fr.univlorraine.pegase.model.idt.MentionsBac>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.MentionsBac> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("MentionsBac", fr.univlorraine.pegase.model.idt.MentionsBac.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.Nomenclature.class, new TypeSelector<fr.univlorraine.pegase.model.idt.Nomenclature>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.Nomenclature> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("COMMUNENAISSANCE", fr.univlorraine.pegase.model.idt.CommunesNaissance.class);
                        classByDiscriminatorValue.put("DEPARTEMENT", fr.univlorraine.pegase.model.idt.Departements.class);
                        classByDiscriminatorValue.put("ETABLISSEMENTFRANCAIS", fr.univlorraine.pegase.model.idt.EtablissementsFrancais.class);
                        classByDiscriminatorValue.put("MENTIONBAC", fr.univlorraine.pegase.model.idt.MentionsBac.class);
                        classByDiscriminatorValue.put("PAYSETNATIONALITES", fr.univlorraine.pegase.model.idt.PaysEtNationalites.class);
                        classByDiscriminatorValue.put("PROFESSIONSETCATEGORIESSOCIOPRO", fr.univlorraine.pegase.model.idt.ProfessionsEtCategoriesSocioPro.class);
                        classByDiscriminatorValue.put("QUOTITESACTIVITE", fr.univlorraine.pegase.model.idt.QuotitesActivite.class);
                        classByDiscriminatorValue.put("SERIESBACETEQUIVALENT", fr.univlorraine.pegase.model.idt.SeriesBacEtEquivalent.class);
                        classByDiscriminatorValue.put("SITUATIONSFAMILIALES", fr.univlorraine.pegase.model.idt.SituationsFamiliales.class);
                        classByDiscriminatorValue.put("SITUATIONSMILITAIRES", fr.univlorraine.pegase.model.idt.SituationsMilitaires.class);
                        classByDiscriminatorValue.put("SPECIALITESBACGENERAL", fr.univlorraine.pegase.model.idt.SpecialitesBacGeneral.class);
                        classByDiscriminatorValue.put("TITRESACCESENSEIGNEMENTSUP", fr.univlorraine.pegase.model.idt.TitresAccesEnseignementSup.class);
                        classByDiscriminatorValue.put("Nomenclature", fr.univlorraine.pegase.model.idt.Nomenclature.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.PaysEtNationalites.class, new TypeSelector<fr.univlorraine.pegase.model.idt.PaysEtNationalites>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.PaysEtNationalites> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("PAYSETNATIONALITES", fr.univlorraine.pegase.model.idt.PaysEtNationalites.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.ProfessionsEtCategoriesSocioPro.class, new TypeSelector<fr.univlorraine.pegase.model.idt.ProfessionsEtCategoriesSocioPro>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.ProfessionsEtCategoriesSocioPro> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("ProfessionsEtCategoriesSocioPro", fr.univlorraine.pegase.model.idt.ProfessionsEtCategoriesSocioPro.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.QuotitesActivite.class, new TypeSelector<fr.univlorraine.pegase.model.idt.QuotitesActivite>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.QuotitesActivite> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("QuotitesActivite", fr.univlorraine.pegase.model.idt.QuotitesActivite.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.SeriesBacEtEquivalent.class, new TypeSelector<fr.univlorraine.pegase.model.idt.SeriesBacEtEquivalent>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.SeriesBacEtEquivalent> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("SeriesBacEtEquivalent", fr.univlorraine.pegase.model.idt.SeriesBacEtEquivalent.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.SituationsFamiliales.class, new TypeSelector<fr.univlorraine.pegase.model.idt.SituationsFamiliales>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.SituationsFamiliales> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("SituationsFamiliales", fr.univlorraine.pegase.model.idt.SituationsFamiliales.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.SituationsMilitaires.class, new TypeSelector<fr.univlorraine.pegase.model.idt.SituationsMilitaires>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.SituationsMilitaires> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("SituationsMilitaires", fr.univlorraine.pegase.model.idt.SituationsMilitaires.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.SpecialitesBacGeneral.class, new TypeSelector<fr.univlorraine.pegase.model.idt.SpecialitesBacGeneral>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.SpecialitesBacGeneral> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("SpecialitesBacGeneral", fr.univlorraine.pegase.model.idt.SpecialitesBacGeneral.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                .registerTypeSelector(fr.univlorraine.pegase.model.idt.TitresAccesEnseignementSup.class, new TypeSelector<fr.univlorraine.pegase.model.idt.TitresAccesEnseignementSup>() {
                    @Override
                    public Class<? extends fr.univlorraine.pegase.model.idt.TitresAccesEnseignementSup> getClassForElement(JsonElement readElement) {
                        Map<String, Class> classByDiscriminatorValue = new HashMap<String, Class>();
                        classByDiscriminatorValue.put("TitresAccesEnseignementSup", fr.univlorraine.pegase.model.idt.TitresAccesEnseignementSup.class);
                        return getClassByDiscriminator(classByDiscriminatorValue,
                                getDiscriminatorValue(readElement, "type"));
                    }
                })
                ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }
}
