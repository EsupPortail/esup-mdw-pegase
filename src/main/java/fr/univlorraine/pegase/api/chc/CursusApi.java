/*
 * API CHC v4
 * Liste l'ensemble des services et des opérations disponibles dans le module choix des cursus v4
 *
 * The version of the OpenAPI document: 4.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.chc;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.chc.ApprenantExtention;
import fr.univlorraine.pegase.model.chc.ParamsCursusApprenants;
import fr.univlorraine.pegase.model.chc.ParamsCursusObjetMaquettes;
import fr.univlorraine.pegase.model.chc.ReponseAffectation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CursusApi {
    private ApiClient localVarApiClient;

    public CursusApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CursusApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for affecterApprennantLstObjectMaquette2
     * @param params Le choix de cursus des apprenants dans un objet de maquette (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;affectation de l&#39;apprenant à l&#39;objet de maquette a été effectuée </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call affecterApprennantLstObjectMaquette2Call(ParamsCursusApprenants params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = params;

        // create path and map variables
        String localVarPath = "/api/chc/v4/cursus/apprenants/objets-maquette";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call affecterApprennantLstObjectMaquette2ValidateBeforeCall(ParamsCursusApprenants params, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'params' is set
        if (params == null) {
            throw new ApiException("Missing the required parameter 'params' when calling affecterApprennantLstObjectMaquette2(Async)");
        }
        

        okhttp3.Call localVarCall = affecterApprennantLstObjectMaquette2Call(params, _callback);
        return localVarCall;

    }

    /**
     * Affecter des apprenants à un objet de maquette
     * 
     * @param params Le choix de cursus des apprenants dans un objet de maquette (required)
     * @return ReponseAffectation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;affectation de l&#39;apprenant à l&#39;objet de maquette a été effectuée </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ReponseAffectation affecterApprennantLstObjectMaquette2(ParamsCursusApprenants params) throws ApiException {
        ApiResponse<ReponseAffectation> localVarResp = affecterApprennantLstObjectMaquette2WithHttpInfo(params);
        return localVarResp.getData();
    }

    /**
     * Affecter des apprenants à un objet de maquette
     * 
     * @param params Le choix de cursus des apprenants dans un objet de maquette (required)
     * @return ApiResponse&lt;ReponseAffectation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;affectation de l&#39;apprenant à l&#39;objet de maquette a été effectuée </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReponseAffectation> affecterApprennantLstObjectMaquette2WithHttpInfo(ParamsCursusApprenants params) throws ApiException {
        okhttp3.Call localVarCall = affecterApprennantLstObjectMaquette2ValidateBeforeCall(params, null);
        Type localVarReturnType = new TypeToken<ReponseAffectation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Affecter des apprenants à un objet de maquette (asynchronously)
     * 
     * @param params Le choix de cursus des apprenants dans un objet de maquette (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;affectation de l&#39;apprenant à l&#39;objet de maquette a été effectuée </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call affecterApprennantLstObjectMaquette2Async(ParamsCursusApprenants params, final ApiCallback<ReponseAffectation> _callback) throws ApiException {

        okhttp3.Call localVarCall = affecterApprennantLstObjectMaquette2ValidateBeforeCall(params, _callback);
        Type localVarReturnType = new TypeToken<ReponseAffectation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for affecterObjectMaquetteLstApprenant2
     * @param params Le choix de cursus de l&#39;apprenant dans les objets de maquette (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;affectation de l&#39;apprenant à l&#39;objet de maquette a été effectuée </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call affecterObjectMaquetteLstApprenant2Call(ParamsCursusObjetMaquettes params, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = params;

        // create path and map variables
        String localVarPath = "/api/chc/v4/cursus/objets-maquette/apprenant";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call affecterObjectMaquetteLstApprenant2ValidateBeforeCall(ParamsCursusObjetMaquettes params, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'params' is set
        if (params == null) {
            throw new ApiException("Missing the required parameter 'params' when calling affecterObjectMaquetteLstApprenant2(Async)");
        }
        

        okhttp3.Call localVarCall = affecterObjectMaquetteLstApprenant2Call(params, _callback);
        return localVarCall;

    }

    /**
     * Affecter un apprenant aux objets de maquettes
     * 
     * @param params Le choix de cursus de l&#39;apprenant dans les objets de maquette (required)
     * @return ReponseAffectation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;affectation de l&#39;apprenant à l&#39;objet de maquette a été effectuée </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ReponseAffectation affecterObjectMaquetteLstApprenant2(ParamsCursusObjetMaquettes params) throws ApiException {
        ApiResponse<ReponseAffectation> localVarResp = affecterObjectMaquetteLstApprenant2WithHttpInfo(params);
        return localVarResp.getData();
    }

    /**
     * Affecter un apprenant aux objets de maquettes
     * 
     * @param params Le choix de cursus de l&#39;apprenant dans les objets de maquette (required)
     * @return ApiResponse&lt;ReponseAffectation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;affectation de l&#39;apprenant à l&#39;objet de maquette a été effectuée </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReponseAffectation> affecterObjectMaquetteLstApprenant2WithHttpInfo(ParamsCursusObjetMaquettes params) throws ApiException {
        okhttp3.Call localVarCall = affecterObjectMaquetteLstApprenant2ValidateBeforeCall(params, null);
        Type localVarReturnType = new TypeToken<ReponseAffectation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Affecter un apprenant aux objets de maquettes (asynchronously)
     * 
     * @param params Le choix de cursus de l&#39;apprenant dans les objets de maquette (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> L&#39;affectation de l&#39;apprenant à l&#39;objet de maquette a été effectuée </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call affecterObjectMaquetteLstApprenant2Async(ParamsCursusObjetMaquettes params, final ApiCallback<ReponseAffectation> _callback) throws ApiException {

        okhttp3.Call localVarCall = affecterObjectMaquetteLstApprenant2ValidateBeforeCall(params, _callback);
        Type localVarReturnType = new TypeToken<ReponseAffectation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireListeApprenantsObjetMaquette1
     * @param codeChemin Le code chemin de l&#39;objet de maquette (required)
     * @param codePeriode Le code de lapériode de l&#39;objet de maquette (required)
     * @param codeStructure Le code structure de l&#39;objet de maquette (required)
     * @param statutInscription Le statut inscription de l&#39;apprenant (required)
     * @param versionMaquette La version maquette de l&#39;objet de maquette (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les inscriptions des apprenants qui ont une IA valide ont été récupérées </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeApprenantsObjetMaquette1Call(String codeChemin, String codePeriode, String codeStructure, String statutInscription, Integer versionMaquette, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/chc/v4/cursus/apprenants/{codeChemin}/{codePeriode}/{codeStructure}/{versionMaquette}/{statutInscription}"
            .replaceAll("\\{" + "codeChemin" + "\\}", localVarApiClient.escapeString(codeChemin.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()))
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "statutInscription" + "\\}", localVarApiClient.escapeString(statutInscription.toString()))
            .replaceAll("\\{" + "versionMaquette" + "\\}", localVarApiClient.escapeString(versionMaquette.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListeApprenantsObjetMaquette1ValidateBeforeCall(String codeChemin, String codePeriode, String codeStructure, String statutInscription, Integer versionMaquette, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeChemin' is set
        if (codeChemin == null) {
            throw new ApiException("Missing the required parameter 'codeChemin' when calling lireListeApprenantsObjetMaquette1(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListeApprenantsObjetMaquette1(Async)");
        }
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListeApprenantsObjetMaquette1(Async)");
        }
        
        // verify the required parameter 'statutInscription' is set
        if (statutInscription == null) {
            throw new ApiException("Missing the required parameter 'statutInscription' when calling lireListeApprenantsObjetMaquette1(Async)");
        }
        
        // verify the required parameter 'versionMaquette' is set
        if (versionMaquette == null) {
            throw new ApiException("Missing the required parameter 'versionMaquette' when calling lireListeApprenantsObjetMaquette1(Async)");
        }
        

        okhttp3.Call localVarCall = lireListeApprenantsObjetMaquette1Call(codeChemin, codePeriode, codeStructure, statutInscription, versionMaquette, _callback);
        return localVarCall;

    }

    /**
     * Liste des apprenants qui ont un curscus dans un objet de maquette en fonction du statut d&#39;insccription des apprenants
     * 
     * @param codeChemin Le code chemin de l&#39;objet de maquette (required)
     * @param codePeriode Le code de lapériode de l&#39;objet de maquette (required)
     * @param codeStructure Le code structure de l&#39;objet de maquette (required)
     * @param statutInscription Le statut inscription de l&#39;apprenant (required)
     * @param versionMaquette La version maquette de l&#39;objet de maquette (required)
     * @return List&lt;ApprenantExtention&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les inscriptions des apprenants qui ont une IA valide ont été récupérées </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public List<ApprenantExtention> lireListeApprenantsObjetMaquette1(String codeChemin, String codePeriode, String codeStructure, String statutInscription, Integer versionMaquette) throws ApiException {
        ApiResponse<List<ApprenantExtention>> localVarResp = lireListeApprenantsObjetMaquette1WithHttpInfo(codeChemin, codePeriode, codeStructure, statutInscription, versionMaquette);
        return localVarResp.getData();
    }

    /**
     * Liste des apprenants qui ont un curscus dans un objet de maquette en fonction du statut d&#39;insccription des apprenants
     * 
     * @param codeChemin Le code chemin de l&#39;objet de maquette (required)
     * @param codePeriode Le code de lapériode de l&#39;objet de maquette (required)
     * @param codeStructure Le code structure de l&#39;objet de maquette (required)
     * @param statutInscription Le statut inscription de l&#39;apprenant (required)
     * @param versionMaquette La version maquette de l&#39;objet de maquette (required)
     * @return ApiResponse&lt;List&lt;ApprenantExtention&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les inscriptions des apprenants qui ont une IA valide ont été récupérées </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApprenantExtention>> lireListeApprenantsObjetMaquette1WithHttpInfo(String codeChemin, String codePeriode, String codeStructure, String statutInscription, Integer versionMaquette) throws ApiException {
        okhttp3.Call localVarCall = lireListeApprenantsObjetMaquette1ValidateBeforeCall(codeChemin, codePeriode, codeStructure, statutInscription, versionMaquette, null);
        Type localVarReturnType = new TypeToken<List<ApprenantExtention>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des apprenants qui ont un curscus dans un objet de maquette en fonction du statut d&#39;insccription des apprenants (asynchronously)
     * 
     * @param codeChemin Le code chemin de l&#39;objet de maquette (required)
     * @param codePeriode Le code de lapériode de l&#39;objet de maquette (required)
     * @param codeStructure Le code structure de l&#39;objet de maquette (required)
     * @param statutInscription Le statut inscription de l&#39;apprenant (required)
     * @param versionMaquette La version maquette de l&#39;objet de maquette (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les inscriptions des apprenants qui ont une IA valide ont été récupérées </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeApprenantsObjetMaquette1Async(String codeChemin, String codePeriode, String codeStructure, String statutInscription, Integer versionMaquette, final ApiCallback<List<ApprenantExtention>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListeApprenantsObjetMaquette1ValidateBeforeCall(codeChemin, codePeriode, codeStructure, statutInscription, versionMaquette, _callback);
        Type localVarReturnType = new TypeToken<List<ApprenantExtention>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
