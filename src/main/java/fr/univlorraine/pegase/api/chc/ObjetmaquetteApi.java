/**
 *
 *  ESUP-Portail ESUP-MONDOSSIERWEB-PEGASE - Copyright (c) 2021 ESUP-Portail consortium
 *
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/*
 * API CHC v5
 * Liste l'ensemble des services et des opérations disponibles dans le module choix des cursus v5 
 *
 * The version of the OpenAPI document: 5.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.chc;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.chc.ObjetMaquette;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjetmaquetteApi {
    private ApiClient localVarApiClient;

    public ObjetmaquetteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ObjetmaquetteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for lireListeFormationAll
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeFormationAllCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objets-maquette/formation/{codeStructure}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListeFormationAllValidateBeforeCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListeFormationAll(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListeFormationAll(Async)");
        }
        

        okhttp3.Call localVarCall = lireListeFormationAllCall(codeStructure, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Liste des objets maquettes
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @return List&lt;ObjetMaquette&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public List<ObjetMaquette> lireListeFormationAll(String codeStructure, String codePeriode) throws ApiException {
        ApiResponse<List<ObjetMaquette>> localVarResp = lireListeFormationAllWithHttpInfo(codeStructure, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Liste des objets maquettes
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @return ApiResponse&lt;List&lt;ObjetMaquette&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ObjetMaquette>> lireListeFormationAllWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireListeFormationAllValidateBeforeCall(codeStructure, codePeriode, null);
        Type localVarReturnType = new TypeToken<List<ObjetMaquette>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des objets maquettes (asynchronously)
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeFormationAllAsync(String codeStructure, String codePeriode, final ApiCallback<List<ObjetMaquette>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListeFormationAllValidateBeforeCall(codeStructure, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<List<ObjetMaquette>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireListeGroupementAll
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeGroupementAllCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objets-maquette/groupement/{codeStructure}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListeGroupementAllValidateBeforeCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListeGroupementAll(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListeGroupementAll(Async)");
        }
        

        okhttp3.Call localVarCall = lireListeGroupementAllCall(codeStructure, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Liste des objets maquettes
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @return List&lt;ObjetMaquette&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public List<ObjetMaquette> lireListeGroupementAll(String codeStructure, String codePeriode) throws ApiException {
        ApiResponse<List<ObjetMaquette>> localVarResp = lireListeGroupementAllWithHttpInfo(codeStructure, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Liste des objets maquettes
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @return ApiResponse&lt;List&lt;ObjetMaquette&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ObjetMaquette>> lireListeGroupementAllWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireListeGroupementAllValidateBeforeCall(codeStructure, codePeriode, null);
        Type localVarReturnType = new TypeToken<List<ObjetMaquette>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des objets maquettes (asynchronously)
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeGroupementAllAsync(String codeStructure, String codePeriode, final ApiCallback<List<ObjetMaquette>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListeGroupementAllValidateBeforeCall(codeStructure, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<List<ObjetMaquette>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireListeObjetFormationAll
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeObjetFormationAllCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objets-maquette/objets-formation/{codeStructure}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListeObjetFormationAllValidateBeforeCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListeObjetFormationAll(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListeObjetFormationAll(Async)");
        }
        

        okhttp3.Call localVarCall = lireListeObjetFormationAllCall(codeStructure, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Liste des objets maquettes
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @return List&lt;ObjetMaquette&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public List<ObjetMaquette> lireListeObjetFormationAll(String codeStructure, String codePeriode) throws ApiException {
        ApiResponse<List<ObjetMaquette>> localVarResp = lireListeObjetFormationAllWithHttpInfo(codeStructure, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Liste des objets maquettes
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @return ApiResponse&lt;List&lt;ObjetMaquette&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ObjetMaquette>> lireListeObjetFormationAllWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireListeObjetFormationAllValidateBeforeCall(codeStructure, codePeriode, null);
        Type localVarReturnType = new TypeToken<List<ObjetMaquette>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des objets maquettes (asynchronously)
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeObjetFormationAllAsync(String codeStructure, String codePeriode, final ApiCallback<List<ObjetMaquette>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListeObjetFormationAllValidateBeforeCall(codeStructure, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<List<ObjetMaquette>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lireListeObjetsMaquettes
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeObjetsMaquettesCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/objets-maquette/{codeStructure}/{codePeriode}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lireListeObjetsMaquettesValidateBeforeCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling lireListeObjetsMaquettes(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling lireListeObjetsMaquettes(Async)");
        }
        

        okhttp3.Call localVarCall = lireListeObjetsMaquettesCall(codeStructure, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Liste des objets maquettes pour une periode
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @return List&lt;ObjetMaquette&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public List<ObjetMaquette> lireListeObjetsMaquettes(String codeStructure, String codePeriode) throws ApiException {
        ApiResponse<List<ObjetMaquette>> localVarResp = lireListeObjetsMaquettesWithHttpInfo(codeStructure, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Liste des objets maquettes pour une periode
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @return ApiResponse&lt;List&lt;ObjetMaquette&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ObjetMaquette>> lireListeObjetsMaquettesWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = lireListeObjetsMaquettesValidateBeforeCall(codeStructure, codePeriode, null);
        Type localVarReturnType = new TypeToken<List<ObjetMaquette>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Liste des objets maquettes pour une periode (asynchronously)
     * 
     * @param codeStructure Le code de la structure (required)
     * @param codePeriode Le code de la période (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Les objets maquettes ont été récupérées </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lireListeObjetsMaquettesAsync(String codeStructure, String codePeriode, final ApiCallback<List<ObjetMaquette>> _callback) throws ApiException {

        okhttp3.Call localVarCall = lireListeObjetsMaquettesValidateBeforeCall(codeStructure, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<List<ObjetMaquette>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
