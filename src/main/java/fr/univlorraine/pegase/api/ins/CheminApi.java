/*
 * API INS V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module INS  Description service INS  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250414083300
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.api.ins;

import fr.univlorraine.pegase.api.ApiCallback;
import fr.univlorraine.pegase.api.ApiClient;
import fr.univlorraine.pegase.api.ApiException;
import fr.univlorraine.pegase.api.ApiResponse;
import fr.univlorraine.pegase.api.Configuration;
import fr.univlorraine.pegase.api.Pair;
import fr.univlorraine.pegase.api.ProgressRequestBody;
import fr.univlorraine.pegase.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.model.ins.Chemin;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CheminApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CheminApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CheminApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for recupererCheminParIdOdf
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idOdf L&#39;id ODF du chemin. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le chemin récupéré. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemins non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererCheminParIdOdfCall(String codeStructure, UUID idOdf, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/chemins/{idOdf}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idOdf" + "\\}", localVarApiClient.escapeString(idOdf.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recupererCheminParIdOdfValidateBeforeCall(String codeStructure, UUID idOdf, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling recupererCheminParIdOdf(Async)");
        }
        
        // verify the required parameter 'idOdf' is set
        if (idOdf == null) {
            throw new ApiException("Missing the required parameter 'idOdf' when calling recupererCheminParIdOdf(Async)");
        }
        

        okhttp3.Call localVarCall = recupererCheminParIdOdfCall(codeStructure, idOdf, _callback);
        return localVarCall;

    }

    /**
     * Récupérer le chemin selon son idOdf.
     * Lire le chemins pour un établissement et un idOdf.
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idOdf L&#39;id ODF du chemin. (required)
     * @return Chemin
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le chemin récupéré. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemins non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public Chemin recupererCheminParIdOdf(String codeStructure, UUID idOdf) throws ApiException {
        ApiResponse<Chemin> localVarResp = recupererCheminParIdOdfWithHttpInfo(codeStructure, idOdf);
        return localVarResp.getData();
    }

    /**
     * Récupérer le chemin selon son idOdf.
     * Lire le chemins pour un établissement et un idOdf.
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idOdf L&#39;id ODF du chemin. (required)
     * @return ApiResponse&lt;Chemin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le chemin récupéré. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemins non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Chemin> recupererCheminParIdOdfWithHttpInfo(String codeStructure, UUID idOdf) throws ApiException {
        okhttp3.Call localVarCall = recupererCheminParIdOdfValidateBeforeCall(codeStructure, idOdf, null);
        Type localVarReturnType = new TypeToken<Chemin>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupérer le chemin selon son idOdf. (asynchronously)
     * Lire le chemins pour un établissement et un idOdf.
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idOdf L&#39;id ODF du chemin. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Le chemin récupéré. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemins non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererCheminParIdOdfAsync(String codeStructure, UUID idOdf, final ApiCallback<Chemin> _callback) throws ApiException {

        okhttp3.Call localVarCall = recupererCheminParIdOdfValidateBeforeCall(codeStructure, idOdf, _callback);
        Type localVarReturnType = new TypeToken<Chemin>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recupererChemins
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param codePeriode Le code de la période de référence. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Liste des chemins récupérés. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemins non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererCheminsCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/{codePeriode}/chemins"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "codePeriode" + "\\}", localVarApiClient.escapeString(codePeriode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recupererCheminsValidateBeforeCall(String codeStructure, String codePeriode, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling recupererChemins(Async)");
        }
        
        // verify the required parameter 'codePeriode' is set
        if (codePeriode == null) {
            throw new ApiException("Missing the required parameter 'codePeriode' when calling recupererChemins(Async)");
        }
        

        okhttp3.Call localVarCall = recupererCheminsCall(codeStructure, codePeriode, _callback);
        return localVarCall;

    }

    /**
     * Récupérer l&#39;ensemble des chemins selon la période.
     * Lire les chemins pour un établissement.
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param codePeriode Le code de la période de référence. (required)
     * @return List&lt;Chemin&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Liste des chemins récupérés. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemins non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public List<Chemin> recupererChemins(String codeStructure, String codePeriode) throws ApiException {
        ApiResponse<List<Chemin>> localVarResp = recupererCheminsWithHttpInfo(codeStructure, codePeriode);
        return localVarResp.getData();
    }

    /**
     * Récupérer l&#39;ensemble des chemins selon la période.
     * Lire les chemins pour un établissement.
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param codePeriode Le code de la période de référence. (required)
     * @return ApiResponse&lt;List&lt;Chemin&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Liste des chemins récupérés. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemins non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Chemin>> recupererCheminsWithHttpInfo(String codeStructure, String codePeriode) throws ApiException {
        okhttp3.Call localVarCall = recupererCheminsValidateBeforeCall(codeStructure, codePeriode, null);
        Type localVarReturnType = new TypeToken<List<Chemin>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupérer l&#39;ensemble des chemins selon la période. (asynchronously)
     * Lire les chemins pour un établissement.
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param codePeriode Le code de la période de référence. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Liste des chemins récupérés. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemins non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererCheminsAsync(String codeStructure, String codePeriode, final ApiCallback<List<Chemin>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recupererCheminsValidateBeforeCall(codeStructure, codePeriode, _callback);
        Type localVarReturnType = new TypeToken<List<Chemin>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
