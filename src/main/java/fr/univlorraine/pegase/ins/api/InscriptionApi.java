/*
 * API INS V1
 *  # Introduction  Liste l'ensemble des services et des opérations disponibles dans le module INS  Description service INS  # Gestion des erreurs  ## StatusCode  | Code    | Description                                | |---------|--------------------------------------------| | 200     | Opération effectuée                        | |         | Cas particulier: Dans le cas d'APIs de     | |         | type bulk, un 200 peut aussi être retourné | |         | si des données de la requête sont          | |         | considérées en erreur                      | | 201     | Ressource créée                            | | 400     | Données envoyées par le client invalides   | | 403     | Accès refusé                               | | 404     | Ressource inexistante                      | | 409     | donnée déjà existante                      | | 500     | Erreur technique rencontrée par le serveur |   ## Codes d'erreurs  | Code      | Description                                | |-----------|--------------------------------------------| | notNull   | la propriété est obligatoire               | | notBlank  | la propriété ne doit pas être vide         | | size      | la longueur de la propriété est invalide   | | pattern   | les caractères ou la syntaxe de            | |           | la propriété est invalide                  | | genre     | le genre de la personne est invalide       | | dateEntre | la date est invalide                       | | telephone | le téléphone est invalide                  | | email     | le mail est invalide                       | 
 *
 * The version of the OpenAPI document: 1.0.0-rc.20250414083300
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package fr.univlorraine.pegase.ins.api;

import fr.univlorraine.pegase.ins.invoker.ApiCallback;
import fr.univlorraine.pegase.ins.invoker.ApiClient;
import fr.univlorraine.pegase.ins.invoker.ApiException;
import fr.univlorraine.pegase.ins.invoker.ApiResponse;
import fr.univlorraine.pegase.ins.invoker.Configuration;
import fr.univlorraine.pegase.ins.invoker.Pair;
import fr.univlorraine.pegase.ins.invoker.ProgressRequestBody;
import fr.univlorraine.pegase.ins.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import fr.univlorraine.pegase.ins.model.Erreur;
import java.io.File;
import fr.univlorraine.pegase.ins.model.InitierInscriptionRequest;
import fr.univlorraine.pegase.ins.model.Inscription;
import fr.univlorraine.pegase.ins.model.InscriptionAutoriseeBulkDeleteRequest;
import fr.univlorraine.pegase.ins.model.InscriptionAutoriseeBulkRequest;
import fr.univlorraine.pegase.ins.model.InscriptionAutoriseeBulkResponse;
import fr.univlorraine.pegase.ins.model.MotifAnnulation;
import fr.univlorraine.pegase.ins.model.Pageable;
import fr.univlorraine.pegase.ins.model.PagedInscriptionsApprenantsPeriodesEtChemins;
import fr.univlorraine.pegase.ins.model.RechercheInscriptionRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InscriptionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InscriptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InscriptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ajouterInscriptionsAutorisees
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param inscriptionAutoriseeBulkRequest La liste des inscriptions autorisées à ajouter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Généré en cas de mise à jour avec succès ou si des erreurs fonctionnelles ont été détectées Le statut de chaque mise à jour est indiqué dans l&#39;objet AdmissionsBulkResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ajouterInscriptionsAutoriseesCall(String codeStructure, InscriptionAutoriseeBulkRequest inscriptionAutoriseeBulkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inscriptionAutoriseeBulkRequest;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/inscriptions/autorisations/bulk"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ajouterInscriptionsAutoriseesValidateBeforeCall(String codeStructure, InscriptionAutoriseeBulkRequest inscriptionAutoriseeBulkRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling ajouterInscriptionsAutorisees(Async)");
        }
        
        // verify the required parameter 'inscriptionAutoriseeBulkRequest' is set
        if (inscriptionAutoriseeBulkRequest == null) {
            throw new ApiException("Missing the required parameter 'inscriptionAutoriseeBulkRequest' when calling ajouterInscriptionsAutorisees(Async)");
        }
        

        okhttp3.Call localVarCall = ajouterInscriptionsAutoriseesCall(codeStructure, inscriptionAutoriseeBulkRequest, _callback);
        return localVarCall;

    }

    /**
     * Créer des inscriptions autorisées
     * API permettant de créer des inscriptions autorisées par lot. Egalement appelées autorisations à s&#39;inscrire. Elle est utilisée dans le cadre des ré-inscriptions. Ce qui signifie qu&#39;elle positionne automatiquement  le canal à REINS.  Une inscription autorisée est un couple apprenant-&gt;chemin d&#39;inscription. Le chemin d&#39;inscription est un point. d&#39;inscription administrative actif. Il n&#39;est pas possible de créer deux inscriptions autorisées pour le même apprenant. sur le même chemin d&#39;inscription. Ainsi le comportement est:  * Si aucune inscription pour l&#39;apprenant et le chemin n&#39;existe, l&#39;inscription autorisée est créée. * Si une inscription pour l&#39;apprenant et le chemin existe, elle est ignorée. Le paramètre failOnErrors permet de contrôler le comportement en cas d&#39;erreur de validation.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param inscriptionAutoriseeBulkRequest La liste des inscriptions autorisées à ajouter (required)
     * @return InscriptionAutoriseeBulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Généré en cas de mise à jour avec succès ou si des erreurs fonctionnelles ont été détectées Le statut de chaque mise à jour est indiqué dans l&#39;objet AdmissionsBulkResponse. </td><td>  -  </td></tr>
     </table>
     */
    public InscriptionAutoriseeBulkResponse ajouterInscriptionsAutorisees(String codeStructure, InscriptionAutoriseeBulkRequest inscriptionAutoriseeBulkRequest) throws ApiException {
        ApiResponse<InscriptionAutoriseeBulkResponse> localVarResp = ajouterInscriptionsAutoriseesWithHttpInfo(codeStructure, inscriptionAutoriseeBulkRequest);
        return localVarResp.getData();
    }

    /**
     * Créer des inscriptions autorisées
     * API permettant de créer des inscriptions autorisées par lot. Egalement appelées autorisations à s&#39;inscrire. Elle est utilisée dans le cadre des ré-inscriptions. Ce qui signifie qu&#39;elle positionne automatiquement  le canal à REINS.  Une inscription autorisée est un couple apprenant-&gt;chemin d&#39;inscription. Le chemin d&#39;inscription est un point. d&#39;inscription administrative actif. Il n&#39;est pas possible de créer deux inscriptions autorisées pour le même apprenant. sur le même chemin d&#39;inscription. Ainsi le comportement est:  * Si aucune inscription pour l&#39;apprenant et le chemin n&#39;existe, l&#39;inscription autorisée est créée. * Si une inscription pour l&#39;apprenant et le chemin existe, elle est ignorée. Le paramètre failOnErrors permet de contrôler le comportement en cas d&#39;erreur de validation.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param inscriptionAutoriseeBulkRequest La liste des inscriptions autorisées à ajouter (required)
     * @return ApiResponse&lt;InscriptionAutoriseeBulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Généré en cas de mise à jour avec succès ou si des erreurs fonctionnelles ont été détectées Le statut de chaque mise à jour est indiqué dans l&#39;objet AdmissionsBulkResponse. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InscriptionAutoriseeBulkResponse> ajouterInscriptionsAutoriseesWithHttpInfo(String codeStructure, InscriptionAutoriseeBulkRequest inscriptionAutoriseeBulkRequest) throws ApiException {
        okhttp3.Call localVarCall = ajouterInscriptionsAutoriseesValidateBeforeCall(codeStructure, inscriptionAutoriseeBulkRequest, null);
        Type localVarReturnType = new TypeToken<InscriptionAutoriseeBulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Créer des inscriptions autorisées (asynchronously)
     * API permettant de créer des inscriptions autorisées par lot. Egalement appelées autorisations à s&#39;inscrire. Elle est utilisée dans le cadre des ré-inscriptions. Ce qui signifie qu&#39;elle positionne automatiquement  le canal à REINS.  Une inscription autorisée est un couple apprenant-&gt;chemin d&#39;inscription. Le chemin d&#39;inscription est un point. d&#39;inscription administrative actif. Il n&#39;est pas possible de créer deux inscriptions autorisées pour le même apprenant. sur le même chemin d&#39;inscription. Ainsi le comportement est:  * Si aucune inscription pour l&#39;apprenant et le chemin n&#39;existe, l&#39;inscription autorisée est créée. * Si une inscription pour l&#39;apprenant et le chemin existe, elle est ignorée. Le paramètre failOnErrors permet de contrôler le comportement en cas d&#39;erreur de validation.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param inscriptionAutoriseeBulkRequest La liste des inscriptions autorisées à ajouter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Généré en cas de mise à jour avec succès ou si des erreurs fonctionnelles ont été détectées Le statut de chaque mise à jour est indiqué dans l&#39;objet AdmissionsBulkResponse. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ajouterInscriptionsAutoriseesAsync(String codeStructure, InscriptionAutoriseeBulkRequest inscriptionAutoriseeBulkRequest, final ApiCallback<InscriptionAutoriseeBulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ajouterInscriptionsAutoriseesValidateBeforeCall(codeStructure, inscriptionAutoriseeBulkRequest, _callback);
        Type localVarReturnType = new TypeToken<InscriptionAutoriseeBulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for annulerInscription
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idInscription L&#39;id de l&#39;inscription. (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscription annulée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erreur dans le traitement de la requête </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annulerInscriptionCall(String codeStructure, UUID idInscription, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/inscriptions/{idInscription}/annuler"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idInscription" + "\\}", localVarApiClient.escapeString(idInscription.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (motifAnnulation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("motifAnnulation", motifAnnulation));
        }

        if (avecRemboursement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avecRemboursement", avecRemboursement));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call annulerInscriptionValidateBeforeCall(String codeStructure, UUID idInscription, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling annulerInscription(Async)");
        }
        
        // verify the required parameter 'idInscription' is set
        if (idInscription == null) {
            throw new ApiException("Missing the required parameter 'idInscription' when calling annulerInscription(Async)");
        }
        
        // verify the required parameter 'motifAnnulation' is set
        if (motifAnnulation == null) {
            throw new ApiException("Missing the required parameter 'motifAnnulation' when calling annulerInscription(Async)");
        }
        
        // verify the required parameter 'avecRemboursement' is set
        if (avecRemboursement == null) {
            throw new ApiException("Missing the required parameter 'avecRemboursement' when calling annulerInscription(Async)");
        }
        

        okhttp3.Call localVarCall = annulerInscriptionCall(codeStructure, idInscription, motifAnnulation, avecRemboursement, _callback);
        return localVarCall;

    }

    /**
     * Annuler une inscription à partir de son id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idInscription L&#39;id de l&#39;inscription. (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
     * @return Inscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscription annulée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erreur dans le traitement de la requête </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public Inscription annulerInscription(String codeStructure, UUID idInscription, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
        ApiResponse<Inscription> localVarResp = annulerInscriptionWithHttpInfo(codeStructure, idInscription, motifAnnulation, avecRemboursement);
        return localVarResp.getData();
    }

    /**
     * Annuler une inscription à partir de son id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idInscription L&#39;id de l&#39;inscription. (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
     * @return ApiResponse&lt;Inscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscription annulée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erreur dans le traitement de la requête </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Inscription> annulerInscriptionWithHttpInfo(String codeStructure, UUID idInscription, MotifAnnulation motifAnnulation, Boolean avecRemboursement) throws ApiException {
        okhttp3.Call localVarCall = annulerInscriptionValidateBeforeCall(codeStructure, idInscription, motifAnnulation, avecRemboursement, null);
        Type localVarReturnType = new TypeToken<Inscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Annuler une inscription à partir de son id. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idInscription L&#39;id de l&#39;inscription. (required)
     * @param motifAnnulation Le motif d&#39;annulation de l&#39;inscription (required)
     * @param avecRemboursement L&#39;indicateur si l&#39;inscription doit être remboursée. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscription annulée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Erreur dans le traitement de la requête </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call annulerInscriptionAsync(String codeStructure, UUID idInscription, MotifAnnulation motifAnnulation, Boolean avecRemboursement, final ApiCallback<Inscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = annulerInscriptionValidateBeforeCall(codeStructure, idInscription, motifAnnulation, avecRemboursement, _callback);
        Type localVarReturnType = new TypeToken<Inscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for determinerInscriptionAutoriseeDebuteeExiste
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Il existe au moins une inscription autorisée ou débutée pour l&#39;appreannt sur l&#39;année universitaire de référence. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call determinerInscriptionAutoriseeDebuteeExisteCall(String codeStructure, UUID idApprenant, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/{idApprenant}/inscription-autorisee-debutee-existe"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idApprenant" + "\\}", localVarApiClient.escapeString(idApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call determinerInscriptionAutoriseeDebuteeExisteValidateBeforeCall(String codeStructure, UUID idApprenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling determinerInscriptionAutoriseeDebuteeExiste(Async)");
        }
        
        // verify the required parameter 'idApprenant' is set
        if (idApprenant == null) {
            throw new ApiException("Missing the required parameter 'idApprenant' when calling determinerInscriptionAutoriseeDebuteeExiste(Async)");
        }
        

        okhttp3.Call localVarCall = determinerInscriptionAutoriseeDebuteeExisteCall(codeStructure, idApprenant, _callback);
        return localVarCall;

    }

    /**
     * Déterminer si il existe au moins une inscription autorisée ou débutée pour l&#39;apprenant sur l&#39;année universitaire de référence.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Il existe au moins une inscription autorisée ou débutée pour l&#39;appreannt sur l&#39;année universitaire de référence. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public Boolean determinerInscriptionAutoriseeDebuteeExiste(String codeStructure, UUID idApprenant) throws ApiException {
        ApiResponse<Boolean> localVarResp = determinerInscriptionAutoriseeDebuteeExisteWithHttpInfo(codeStructure, idApprenant);
        return localVarResp.getData();
    }

    /**
     * Déterminer si il existe au moins une inscription autorisée ou débutée pour l&#39;apprenant sur l&#39;année universitaire de référence.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Il existe au moins une inscription autorisée ou débutée pour l&#39;appreannt sur l&#39;année universitaire de référence. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> determinerInscriptionAutoriseeDebuteeExisteWithHttpInfo(String codeStructure, UUID idApprenant) throws ApiException {
        okhttp3.Call localVarCall = determinerInscriptionAutoriseeDebuteeExisteValidateBeforeCall(codeStructure, idApprenant, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Déterminer si il existe au moins une inscription autorisée ou débutée pour l&#39;apprenant sur l&#39;année universitaire de référence. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Il existe au moins une inscription autorisée ou débutée pour l&#39;appreannt sur l&#39;année universitaire de référence. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call determinerInscriptionAutoriseeDebuteeExisteAsync(String codeStructure, UUID idApprenant, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = determinerInscriptionAutoriseeDebuteeExisteValidateBeforeCall(codeStructure, idApprenant, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for determinerPrimoEntrant
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param anneeUniversitaire L&#39;année universitaire sur laquelle porte l&#39;inscription de l&#39;apprenant (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Toutes les inscriptions sont sur l&#39;année universitaire de référence. (PRIMO). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call determinerPrimoEntrantCall(String codeStructure, UUID idApprenant, Integer anneeUniversitaire, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/{idApprenant}/primo-entrant"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idApprenant" + "\\}", localVarApiClient.escapeString(idApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (anneeUniversitaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anneeUniversitaire", anneeUniversitaire));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call determinerPrimoEntrantValidateBeforeCall(String codeStructure, UUID idApprenant, Integer anneeUniversitaire, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling determinerPrimoEntrant(Async)");
        }
        
        // verify the required parameter 'idApprenant' is set
        if (idApprenant == null) {
            throw new ApiException("Missing the required parameter 'idApprenant' when calling determinerPrimoEntrant(Async)");
        }
        

        okhttp3.Call localVarCall = determinerPrimoEntrantCall(codeStructure, idApprenant, anneeUniversitaire, _callback);
        return localVarCall;

    }

    /**
     * Déterminer si l&#39;apprenant n&#39;a aucune inscription sur l&#39;année universitaire (PRIMO) ou non (REINS). Si aucune année n&#39;est donnée, c&#39;est celle de référence qui est utilisée
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param anneeUniversitaire L&#39;année universitaire sur laquelle porte l&#39;inscription de l&#39;apprenant (optional)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Toutes les inscriptions sont sur l&#39;année universitaire de référence. (PRIMO). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public Boolean determinerPrimoEntrant(String codeStructure, UUID idApprenant, Integer anneeUniversitaire) throws ApiException {
        ApiResponse<Boolean> localVarResp = determinerPrimoEntrantWithHttpInfo(codeStructure, idApprenant, anneeUniversitaire);
        return localVarResp.getData();
    }

    /**
     * Déterminer si l&#39;apprenant n&#39;a aucune inscription sur l&#39;année universitaire (PRIMO) ou non (REINS). Si aucune année n&#39;est donnée, c&#39;est celle de référence qui est utilisée
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param anneeUniversitaire L&#39;année universitaire sur laquelle porte l&#39;inscription de l&#39;apprenant (optional)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Toutes les inscriptions sont sur l&#39;année universitaire de référence. (PRIMO). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> determinerPrimoEntrantWithHttpInfo(String codeStructure, UUID idApprenant, Integer anneeUniversitaire) throws ApiException {
        okhttp3.Call localVarCall = determinerPrimoEntrantValidateBeforeCall(codeStructure, idApprenant, anneeUniversitaire, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Déterminer si l&#39;apprenant n&#39;a aucune inscription sur l&#39;année universitaire (PRIMO) ou non (REINS). Si aucune année n&#39;est donnée, c&#39;est celle de référence qui est utilisée (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param anneeUniversitaire L&#39;année universitaire sur laquelle porte l&#39;inscription de l&#39;apprenant (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Toutes les inscriptions sont sur l&#39;année universitaire de référence. (PRIMO). </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call determinerPrimoEntrantAsync(String codeStructure, UUID idApprenant, Integer anneeUniversitaire, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = determinerPrimoEntrantValidateBeforeCall(codeStructure, idApprenant, anneeUniversitaire, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for genererCertificatDeScolarite
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genererCertificatDeScolariteCall(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/{idApprenant}/{codeVoeu}/certificat-de-scolarite"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idApprenant" + "\\}", localVarApiClient.escapeString(idApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/pdf"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call genererCertificatDeScolariteValidateBeforeCall(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling genererCertificatDeScolarite(Async)");
        }
        
        // verify the required parameter 'idApprenant' is set
        if (idApprenant == null) {
            throw new ApiException("Missing the required parameter 'idApprenant' when calling genererCertificatDeScolarite(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling genererCertificatDeScolarite(Async)");
        }
        

        okhttp3.Call localVarCall = genererCertificatDeScolariteCall(codeStructure, idApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * Génération du certificat de scolarité pour impression.
     * Génération du certificat de scolarité pour impression.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public File genererCertificatDeScolarite(String codeStructure, UUID idApprenant, String codeVoeu) throws ApiException {
        ApiResponse<File> localVarResp = genererCertificatDeScolariteWithHttpInfo(codeStructure, idApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * Génération du certificat de scolarité pour impression.
     * Génération du certificat de scolarité pour impression.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> genererCertificatDeScolariteWithHttpInfo(String codeStructure, UUID idApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = genererCertificatDeScolariteValidateBeforeCall(codeStructure, idApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Génération du certificat de scolarité pour impression. (asynchronously)
     * Génération du certificat de scolarité pour impression.
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Succès d&#39;impression du certificat de scolarité </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Certificat introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call genererCertificatDeScolariteAsync(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = genererCertificatDeScolariteValidateBeforeCall(codeStructure, idApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for initierInscription
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param initierInscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Liste id des inscriptions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemin ou id non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initierInscriptionCall(String codeStructure, InitierInscriptionRequest initierInscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = initierInscriptionRequest;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/initier-inscription"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call initierInscriptionValidateBeforeCall(String codeStructure, InitierInscriptionRequest initierInscriptionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling initierInscription(Async)");
        }
        
        // verify the required parameter 'initierInscriptionRequest' is set
        if (initierInscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'initierInscriptionRequest' when calling initierInscription(Async)");
        }
        

        okhttp3.Call localVarCall = initierInscriptionCall(codeStructure, initierInscriptionRequest, _callback);
        return localVarCall;

    }

    /**
     * Initier une inscription avec id apprenant.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param initierInscriptionRequest  (required)
     * @return List&lt;UUID&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Liste id des inscriptions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemin ou id non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public List<UUID> initierInscription(String codeStructure, InitierInscriptionRequest initierInscriptionRequest) throws ApiException {
        ApiResponse<List<UUID>> localVarResp = initierInscriptionWithHttpInfo(codeStructure, initierInscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Initier une inscription avec id apprenant.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param initierInscriptionRequest  (required)
     * @return ApiResponse&lt;List&lt;UUID&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Liste id des inscriptions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemin ou id non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<UUID>> initierInscriptionWithHttpInfo(String codeStructure, InitierInscriptionRequest initierInscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = initierInscriptionValidateBeforeCall(codeStructure, initierInscriptionRequest, null);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initier une inscription avec id apprenant. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param initierInscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Liste id des inscriptions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Chemin ou id non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call initierInscriptionAsync(String codeStructure, InitierInscriptionRequest initierInscriptionRequest, final ApiCallback<List<UUID>> _callback) throws ApiException {

        okhttp3.Call localVarCall = initierInscriptionValidateBeforeCall(codeStructure, initierInscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<List<UUID>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerInscriptions
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param rechercheInscription  (optional)
     * @param pageable  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerInscriptionsCall(String codeStructure, RechercheInscriptionRequest rechercheInscription, Pageable pageable, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/inscriptions"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rechercheInscription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rechercheInscription", rechercheInscription));
        }

        if (pageable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageable", pageable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerInscriptionsValidateBeforeCall(String codeStructure, RechercheInscriptionRequest rechercheInscription, Pageable pageable, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerInscriptions(Async)");
        }
        

        okhttp3.Call localVarCall = listerInscriptionsCall(codeStructure, rechercheInscription, pageable, _callback);
        return localVarCall;

    }

    /**
     * Lister les inscriptions (tableau de suivi).
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param rechercheInscription  (optional)
     * @param pageable  (optional)
     * @return PagedInscriptionsApprenantsPeriodesEtChemins
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public PagedInscriptionsApprenantsPeriodesEtChemins listerInscriptions(String codeStructure, RechercheInscriptionRequest rechercheInscription, Pageable pageable) throws ApiException {
        ApiResponse<PagedInscriptionsApprenantsPeriodesEtChemins> localVarResp = listerInscriptionsWithHttpInfo(codeStructure, rechercheInscription, pageable);
        return localVarResp.getData();
    }

    /**
     * Lister les inscriptions (tableau de suivi).
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param rechercheInscription  (optional)
     * @param pageable  (optional)
     * @return ApiResponse&lt;PagedInscriptionsApprenantsPeriodesEtChemins&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PagedInscriptionsApprenantsPeriodesEtChemins> listerInscriptionsWithHttpInfo(String codeStructure, RechercheInscriptionRequest rechercheInscription, Pageable pageable) throws ApiException {
        okhttp3.Call localVarCall = listerInscriptionsValidateBeforeCall(codeStructure, rechercheInscription, pageable, null);
        Type localVarReturnType = new TypeToken<PagedInscriptionsApprenantsPeriodesEtChemins>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lister les inscriptions (tableau de suivi). (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param rechercheInscription  (optional)
     * @param pageable  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerInscriptionsAsync(String codeStructure, RechercheInscriptionRequest rechercheInscription, Pageable pageable, final ApiCallback<PagedInscriptionsApprenantsPeriodesEtChemins> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerInscriptionsValidateBeforeCall(codeStructure, rechercheInscription, pageable, _callback);
        Type localVarReturnType = new TypeToken<PagedInscriptionsApprenantsPeriodesEtChemins>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listerInscriptionsCsv
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param rechercheInscription  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions au format csv </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvée. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerInscriptionsCsvCall(String codeStructure, RechercheInscriptionRequest rechercheInscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/inscriptions/csv"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (rechercheInscription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rechercheInscription", rechercheInscription));
        }

        final String[] localVarAccepts = {
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listerInscriptionsCsvValidateBeforeCall(String codeStructure, RechercheInscriptionRequest rechercheInscription, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling listerInscriptionsCsv(Async)");
        }
        

        okhttp3.Call localVarCall = listerInscriptionsCsvCall(codeStructure, rechercheInscription, _callback);
        return localVarCall;

    }

    /**
     * Exporter la liste des inscriptions au format csv.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param rechercheInscription  (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions au format csv </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvée. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public File listerInscriptionsCsv(String codeStructure, RechercheInscriptionRequest rechercheInscription) throws ApiException {
        ApiResponse<File> localVarResp = listerInscriptionsCsvWithHttpInfo(codeStructure, rechercheInscription);
        return localVarResp.getData();
    }

    /**
     * Exporter la liste des inscriptions au format csv.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param rechercheInscription  (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions au format csv </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvée. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> listerInscriptionsCsvWithHttpInfo(String codeStructure, RechercheInscriptionRequest rechercheInscription) throws ApiException {
        okhttp3.Call localVarCall = listerInscriptionsCsvValidateBeforeCall(codeStructure, rechercheInscription, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exporter la liste des inscriptions au format csv. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param rechercheInscription  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Liste des inscriptions au format csv </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Route non trouvée. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listerInscriptionsCsvAsync(String codeStructure, RechercheInscriptionRequest rechercheInscription, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = listerInscriptionsCsvValidateBeforeCall(codeStructure, rechercheInscription, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recupererInscription
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionId L&#39;id de l&#39;inscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererInscriptionCall(String codeStructure, UUID inscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/{inscriptionId}/inscription"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "inscriptionId" + "\\}", localVarApiClient.escapeString(inscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recupererInscriptionValidateBeforeCall(String codeStructure, UUID inscriptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling recupererInscription(Async)");
        }
        
        // verify the required parameter 'inscriptionId' is set
        if (inscriptionId == null) {
            throw new ApiException("Missing the required parameter 'inscriptionId' when calling recupererInscription(Async)");
        }
        

        okhttp3.Call localVarCall = recupererInscriptionCall(codeStructure, inscriptionId, _callback);
        return localVarCall;

    }

    /**
     * Récupérer une inscription à partir de son id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionId L&#39;id de l&#39;inscription. (required)
     * @return Inscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public Inscription recupererInscription(String codeStructure, UUID inscriptionId) throws ApiException {
        ApiResponse<Inscription> localVarResp = recupererInscriptionWithHttpInfo(codeStructure, inscriptionId);
        return localVarResp.getData();
    }

    /**
     * Récupérer une inscription à partir de son id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionId L&#39;id de l&#39;inscription. (required)
     * @return ApiResponse&lt;Inscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Inscription> recupererInscriptionWithHttpInfo(String codeStructure, UUID inscriptionId) throws ApiException {
        okhttp3.Call localVarCall = recupererInscriptionValidateBeforeCall(codeStructure, inscriptionId, null);
        Type localVarReturnType = new TypeToken<Inscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récupérer une inscription à partir de son id. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionId L&#39;id de l&#39;inscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Données de l&#39;inscription. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererInscriptionAsync(String codeStructure, UUID inscriptionId, final ApiCallback<Inscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = recupererInscriptionValidateBeforeCall(codeStructure, inscriptionId, _callback);
        Type localVarReturnType = new TypeToken<Inscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for recupererInscriptions
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param anneeUniversitaire Valeur de l&#39;année universitaire. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ensemble des inscriptions pour un apprenant sur une année universitaire. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou periode non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererInscriptionsCall(String codeStructure, UUID idApprenant, Integer anneeUniversitaire, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/{idApprenant}/inscriptions"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idApprenant" + "\\}", localVarApiClient.escapeString(idApprenant.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (anneeUniversitaire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("anneeUniversitaire", anneeUniversitaire));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call recupererInscriptionsValidateBeforeCall(String codeStructure, UUID idApprenant, Integer anneeUniversitaire, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling recupererInscriptions(Async)");
        }
        
        // verify the required parameter 'idApprenant' is set
        if (idApprenant == null) {
            throw new ApiException("Missing the required parameter 'idApprenant' when calling recupererInscriptions(Async)");
        }
        

        okhttp3.Call localVarCall = recupererInscriptionsCall(codeStructure, idApprenant, anneeUniversitaire, _callback);
        return localVarCall;

    }

    /**
     * Récuperer l&#39;ensemble des inscriptions avec id l&#39;apprenant  et l&#39;année universitaire. Si aucune année n&#39;est donnée, c&#39;est celle de référence qui est utilisée&#39;.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param anneeUniversitaire Valeur de l&#39;année universitaire. (optional)
     * @return List&lt;Inscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ensemble des inscriptions pour un apprenant sur une année universitaire. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou periode non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public List<Inscription> recupererInscriptions(String codeStructure, UUID idApprenant, Integer anneeUniversitaire) throws ApiException {
        ApiResponse<List<Inscription>> localVarResp = recupererInscriptionsWithHttpInfo(codeStructure, idApprenant, anneeUniversitaire);
        return localVarResp.getData();
    }

    /**
     * Récuperer l&#39;ensemble des inscriptions avec id l&#39;apprenant  et l&#39;année universitaire. Si aucune année n&#39;est donnée, c&#39;est celle de référence qui est utilisée&#39;.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param anneeUniversitaire Valeur de l&#39;année universitaire. (optional)
     * @return ApiResponse&lt;List&lt;Inscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ensemble des inscriptions pour un apprenant sur une année universitaire. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou periode non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Inscription>> recupererInscriptionsWithHttpInfo(String codeStructure, UUID idApprenant, Integer anneeUniversitaire) throws ApiException {
        okhttp3.Call localVarCall = recupererInscriptionsValidateBeforeCall(codeStructure, idApprenant, anneeUniversitaire, null);
        Type localVarReturnType = new TypeToken<List<Inscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Récuperer l&#39;ensemble des inscriptions avec id l&#39;apprenant  et l&#39;année universitaire. Si aucune année n&#39;est donnée, c&#39;est celle de référence qui est utilisée&#39;. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param anneeUniversitaire Valeur de l&#39;année universitaire. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Ensemble des inscriptions pour un apprenant sur une année universitaire. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Apprenant ou periode non trouvé. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call recupererInscriptionsAsync(String codeStructure, UUID idApprenant, Integer anneeUniversitaire, final ApiCallback<List<Inscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = recupererInscriptionsValidateBeforeCall(codeStructure, idApprenant, anneeUniversitaire, _callback);
        Type localVarReturnType = new TypeToken<List<Inscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerInscription
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionId L&#39;id de l&#39;inscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inscription supprimée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerInscriptionCall(String codeStructure, UUID inscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/inscriptions/{inscriptionId}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "inscriptionId" + "\\}", localVarApiClient.escapeString(inscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerInscriptionValidateBeforeCall(String codeStructure, UUID inscriptionId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling supprimerInscription(Async)");
        }
        
        // verify the required parameter 'inscriptionId' is set
        if (inscriptionId == null) {
            throw new ApiException("Missing the required parameter 'inscriptionId' when calling supprimerInscription(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerInscriptionCall(codeStructure, inscriptionId, _callback);
        return localVarCall;

    }

    /**
     * Supprimer une inscription à partir de son id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionId L&#39;id de l&#39;inscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inscription supprimée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public void supprimerInscription(String codeStructure, UUID inscriptionId) throws ApiException {
        supprimerInscriptionWithHttpInfo(codeStructure, inscriptionId);
    }

    /**
     * Supprimer une inscription à partir de son id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionId L&#39;id de l&#39;inscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inscription supprimée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerInscriptionWithHttpInfo(String codeStructure, UUID inscriptionId) throws ApiException {
        okhttp3.Call localVarCall = supprimerInscriptionValidateBeforeCall(codeStructure, inscriptionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Supprimer une inscription à partir de son id. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionId L&#39;id de l&#39;inscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inscription supprimée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerInscriptionAsync(String codeStructure, UUID inscriptionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerInscriptionValidateBeforeCall(codeStructure, inscriptionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerInscriptions
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionIds L&#39;id de l&#39;inscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inscriptions supprimées. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerInscriptionsCall(String codeStructure, List<UUID> inscriptionIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/inscriptions/liste/{inscriptionIds}"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "inscriptionIds" + "\\}", localVarApiClient.escapeString(localVarApiClient.collectionPathParameterToString("csv", inscriptionIds)));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerInscriptionsValidateBeforeCall(String codeStructure, List<UUID> inscriptionIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling supprimerInscriptions(Async)");
        }
        
        // verify the required parameter 'inscriptionIds' is set
        if (inscriptionIds == null) {
            throw new ApiException("Missing the required parameter 'inscriptionIds' when calling supprimerInscriptions(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerInscriptionsCall(codeStructure, inscriptionIds, _callback);
        return localVarCall;

    }

    /**
     * Supprimer une liste d&#39;inscriptions à partir de leur id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionIds L&#39;id de l&#39;inscription. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inscriptions supprimées. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public void supprimerInscriptions(String codeStructure, List<UUID> inscriptionIds) throws ApiException {
        supprimerInscriptionsWithHttpInfo(codeStructure, inscriptionIds);
    }

    /**
     * Supprimer une liste d&#39;inscriptions à partir de leur id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionIds L&#39;id de l&#39;inscription. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inscriptions supprimées. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> supprimerInscriptionsWithHttpInfo(String codeStructure, List<UUID> inscriptionIds) throws ApiException {
        okhttp3.Call localVarCall = supprimerInscriptionsValidateBeforeCall(codeStructure, inscriptionIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Supprimer une liste d&#39;inscriptions à partir de leur id. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param inscriptionIds L&#39;id de l&#39;inscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Inscriptions supprimées. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unhautorised </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerInscriptionsAsync(String codeStructure, List<UUID> inscriptionIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerInscriptionsValidateBeforeCall(codeStructure, inscriptionIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for supprimerInscriptionsAutorisees
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param inscriptionAutoriseeBulkDeleteRequest La liste des inscriptions autorisées à supprimer (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Si les suppression ont réussi et/ou si des erreurs fonctionnelles ont été détectées. Le contenu de la réponse indique combien d&#39;inscriptions ont été supprimées. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerInscriptionsAutoriseesCall(String codeStructure, InscriptionAutoriseeBulkDeleteRequest inscriptionAutoriseeBulkDeleteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inscriptionAutoriseeBulkDeleteRequest;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/inscriptions/autorisations/bulkDelete"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call supprimerInscriptionsAutoriseesValidateBeforeCall(String codeStructure, InscriptionAutoriseeBulkDeleteRequest inscriptionAutoriseeBulkDeleteRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling supprimerInscriptionsAutorisees(Async)");
        }
        
        // verify the required parameter 'inscriptionAutoriseeBulkDeleteRequest' is set
        if (inscriptionAutoriseeBulkDeleteRequest == null) {
            throw new ApiException("Missing the required parameter 'inscriptionAutoriseeBulkDeleteRequest' when calling supprimerInscriptionsAutorisees(Async)");
        }
        

        okhttp3.Call localVarCall = supprimerInscriptionsAutoriseesCall(codeStructure, inscriptionAutoriseeBulkDeleteRequest, _callback);
        return localVarCall;

    }

    /**
     * Suppression des inscriptions autorisées
     * API permettant de supprimer plusieurs inscriptions autorisées en un seul appel (API de type bulk). Se reporter à la section APIs de type bulk pour le détail de fonctionnement d&#39;une telle API
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param inscriptionAutoriseeBulkDeleteRequest La liste des inscriptions autorisées à supprimer (required)
     * @return InscriptionAutoriseeBulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Si les suppression ont réussi et/ou si des erreurs fonctionnelles ont été détectées. Le contenu de la réponse indique combien d&#39;inscriptions ont été supprimées. </td><td>  -  </td></tr>
     </table>
     */
    public InscriptionAutoriseeBulkResponse supprimerInscriptionsAutorisees(String codeStructure, InscriptionAutoriseeBulkDeleteRequest inscriptionAutoriseeBulkDeleteRequest) throws ApiException {
        ApiResponse<InscriptionAutoriseeBulkResponse> localVarResp = supprimerInscriptionsAutoriseesWithHttpInfo(codeStructure, inscriptionAutoriseeBulkDeleteRequest);
        return localVarResp.getData();
    }

    /**
     * Suppression des inscriptions autorisées
     * API permettant de supprimer plusieurs inscriptions autorisées en un seul appel (API de type bulk). Se reporter à la section APIs de type bulk pour le détail de fonctionnement d&#39;une telle API
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param inscriptionAutoriseeBulkDeleteRequest La liste des inscriptions autorisées à supprimer (required)
     * @return ApiResponse&lt;InscriptionAutoriseeBulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Si les suppression ont réussi et/ou si des erreurs fonctionnelles ont été détectées. Le contenu de la réponse indique combien d&#39;inscriptions ont été supprimées. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InscriptionAutoriseeBulkResponse> supprimerInscriptionsAutoriseesWithHttpInfo(String codeStructure, InscriptionAutoriseeBulkDeleteRequest inscriptionAutoriseeBulkDeleteRequest) throws ApiException {
        okhttp3.Call localVarCall = supprimerInscriptionsAutoriseesValidateBeforeCall(codeStructure, inscriptionAutoriseeBulkDeleteRequest, null);
        Type localVarReturnType = new TypeToken<InscriptionAutoriseeBulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suppression des inscriptions autorisées (asynchronously)
     * API permettant de supprimer plusieurs inscriptions autorisées en un seul appel (API de type bulk). Se reporter à la section APIs de type bulk pour le détail de fonctionnement d&#39;une telle API
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param inscriptionAutoriseeBulkDeleteRequest La liste des inscriptions autorisées à supprimer (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Si les suppression ont réussi et/ou si des erreurs fonctionnelles ont été détectées. Le contenu de la réponse indique combien d&#39;inscriptions ont été supprimées. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call supprimerInscriptionsAutoriseesAsync(String codeStructure, InscriptionAutoriseeBulkDeleteRequest inscriptionAutoriseeBulkDeleteRequest, final ApiCallback<InscriptionAutoriseeBulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = supprimerInscriptionsAutoriseesValidateBeforeCall(codeStructure, inscriptionAutoriseeBulkDeleteRequest, _callback);
        Type localVarReturnType = new TypeToken<InscriptionAutoriseeBulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validerInscription
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idInscription L&#39;id de l&#39;inscription. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscription validée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerInscriptionCall(String codeStructure, UUID idInscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissements/{codeStructure}/inscriptions/{idInscription}/valider"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idInscription" + "\\}", localVarApiClient.escapeString(idInscription.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validerInscriptionValidateBeforeCall(String codeStructure, UUID idInscription, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling validerInscription(Async)");
        }
        
        // verify the required parameter 'idInscription' is set
        if (idInscription == null) {
            throw new ApiException("Missing the required parameter 'idInscription' when calling validerInscription(Async)");
        }
        

        okhttp3.Call localVarCall = validerInscriptionCall(codeStructure, idInscription, _callback);
        return localVarCall;

    }

    /**
     * Valider une inscription à partir de son id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idInscription L&#39;id de l&#39;inscription. (required)
     * @return Inscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscription validée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public Inscription validerInscription(String codeStructure, UUID idInscription) throws ApiException {
        ApiResponse<Inscription> localVarResp = validerInscriptionWithHttpInfo(codeStructure, idInscription);
        return localVarResp.getData();
    }

    /**
     * Valider une inscription à partir de son id.
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idInscription L&#39;id de l&#39;inscription. (required)
     * @return ApiResponse&lt;Inscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscription validée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Inscription> validerInscriptionWithHttpInfo(String codeStructure, UUID idInscription) throws ApiException {
        okhttp3.Call localVarCall = validerInscriptionValidateBeforeCall(codeStructure, idInscription, null);
        Type localVarReturnType = new TypeToken<Inscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Valider une inscription à partir de son id. (asynchronously)
     * 
     * @param codeStructure Le code de l&#39;établissement. (required)
     * @param idInscription L&#39;id de l&#39;inscription. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inscription validée. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Structure introuvable </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription non trouvée </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> erreur serveur </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerInscriptionAsync(String codeStructure, UUID idInscription, final ApiCallback<Inscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = validerInscriptionValidateBeforeCall(codeStructure, idInscription, _callback);
        Type localVarReturnType = new TypeToken<Inscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validerPaiement
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Statut paiement de l&#39;inscription . </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure, période, chemin ou inscription associée à l&#39;apprenantId introuvable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerPaiementCall(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/{idApprenant}/{codeVoeu}/validerPaiement"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idApprenant" + "\\}", localVarApiClient.escapeString(idApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validerPaiementValidateBeforeCall(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling validerPaiement(Async)");
        }
        
        // verify the required parameter 'idApprenant' is set
        if (idApprenant == null) {
            throw new ApiException("Missing the required parameter 'idApprenant' when calling validerPaiement(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling validerPaiement(Async)");
        }
        

        okhttp3.Call localVarCall = validerPaiementCall(codeStructure, idApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * Valider le paiement de l&#39;inscription
     * Valider le paiement de l&#39;inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Statut paiement de l&#39;inscription . </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure, période, chemin ou inscription associée à l&#39;apprenantId introuvable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public String validerPaiement(String codeStructure, UUID idApprenant, String codeVoeu) throws ApiException {
        ApiResponse<String> localVarResp = validerPaiementWithHttpInfo(codeStructure, idApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * Valider le paiement de l&#39;inscription
     * Valider le paiement de l&#39;inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Statut paiement de l&#39;inscription . </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure, période, chemin ou inscription associée à l&#39;apprenantId introuvable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> validerPaiementWithHttpInfo(String codeStructure, UUID idApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = validerPaiementValidateBeforeCall(codeStructure, idApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Valider le paiement de l&#39;inscription (asynchronously)
     * Valider le paiement de l&#39;inscription
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Statut paiement de l&#39;inscription . </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Accès refusé </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Structure, période, chemin ou inscription associée à l&#39;apprenantId introuvable. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Erreur serveur. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validerPaiementAsync(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = validerPaiementValidateBeforeCall(codeStructure, idApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifierExistenceAffectation
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Affectations sur cette inscription récupérées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifierExistenceAffectationCall(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/etablissement/{codeStructure}/{idApprenant}/{codeVoeu}/verifier-affectation"
            .replaceAll("\\{" + "codeStructure" + "\\}", localVarApiClient.escapeString(codeStructure.toString()))
            .replaceAll("\\{" + "idApprenant" + "\\}", localVarApiClient.escapeString(idApprenant.toString()))
            .replaceAll("\\{" + "codeVoeu" + "\\}", localVarApiClient.escapeString(codeVoeu.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "idTokenAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifierExistenceAffectationValidateBeforeCall(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'codeStructure' is set
        if (codeStructure == null) {
            throw new ApiException("Missing the required parameter 'codeStructure' when calling verifierExistenceAffectation(Async)");
        }
        
        // verify the required parameter 'idApprenant' is set
        if (idApprenant == null) {
            throw new ApiException("Missing the required parameter 'idApprenant' when calling verifierExistenceAffectation(Async)");
        }
        
        // verify the required parameter 'codeVoeu' is set
        if (codeVoeu == null) {
            throw new ApiException("Missing the required parameter 'codeVoeu' when calling verifierExistenceAffectation(Async)");
        }
        

        okhttp3.Call localVarCall = verifierExistenceAffectationCall(codeStructure, idApprenant, codeVoeu, _callback);
        return localVarCall;

    }

    /**
     * Vérification de l&#39;existence d&#39;affectations pour cette inscription
     * Vérification s&#39;il existe des affectations sur une inscription spécifique
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Affectations sur cette inscription récupérées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public Boolean verifierExistenceAffectation(String codeStructure, UUID idApprenant, String codeVoeu) throws ApiException {
        ApiResponse<Boolean> localVarResp = verifierExistenceAffectationWithHttpInfo(codeStructure, idApprenant, codeVoeu);
        return localVarResp.getData();
    }

    /**
     * Vérification de l&#39;existence d&#39;affectations pour cette inscription
     * Vérification s&#39;il existe des affectations sur une inscription spécifique
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Affectations sur cette inscription récupérées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> verifierExistenceAffectationWithHttpInfo(String codeStructure, UUID idApprenant, String codeVoeu) throws ApiException {
        okhttp3.Call localVarCall = verifierExistenceAffectationValidateBeforeCall(codeStructure, idApprenant, codeVoeu, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Vérification de l&#39;existence d&#39;affectations pour cette inscription (asynchronously)
     * Vérification s&#39;il existe des affectations sur une inscription spécifique
     * @param codeStructure Le code de l&#39;établissement (required)
     * @param idApprenant L&#39;id de l&#39;apprenant. (required)
     * @param codeVoeu Le code du voeu (\&quot;code_cible@code_periode\&quot;) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Affectations sur cette inscription récupérées </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Inscription introuvable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifierExistenceAffectationAsync(String codeStructure, UUID idApprenant, String codeVoeu, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifierExistenceAffectationValidateBeforeCall(codeStructure, idApprenant, codeVoeu, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
